.TH "vendor/jetbrains/phpstorm-stubs/svn/svn.php" 3 "Sat Sep 26 2020" "Safaricom SDP" \" -*- nroff -*-
.ad l
.nh
.SH NAME
vendor/jetbrains/phpstorm-stubs/svn/svn.php
.SH SYNOPSIS
.br
.PP
.SS "Data Structures"

.in +1c
.ti -1c
.RI "class \fBSvn\fP"
.br
.ti -1c
.RI "class \fBSvnWc\fP"
.br
.ti -1c
.RI "class \fBSvnWcSchedule\fP"
.br
.ti -1c
.RI "class \fBSvnNode\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBsvn_checkout\fP ($repos, $targetpath, $revision=\fBSVN_REVISION_HEAD\fP, $flags=0)"
.br
.ti -1c
.RI "\fBsvn_cat\fP ($repos_url, $revision_no=\fBSVN_REVISION_HEAD\fP)"
.br
.ti -1c
.RI "\fBsvn_ls\fP ($repos_url, $revision_no=\fBSVN_REVISION_HEAD\fP, $recurse=\fBfalse\fP, $peg=\fBfalse\fP)"
.br
.ti -1c
.RI "\fBsvn_log\fP ($repos_url, $start_revision=\fBnull\fP, $end_revision=\fBnull\fP, $limit=0, $flags=\fBSVN_DISCOVER_CHANGED_PATHS\fP|\fBSVN_STOP_ON_COPY\fP)"
.br
.ti -1c
.RI "\fBsvn_auth_set_parameter\fP ($\fBkey\fP, $value)"
.br
.ti -1c
.RI "\fBsvn_auth_get_parameter\fP ($\fBkey\fP)"
.br
.ti -1c
.RI "\fBsvn_client_version\fP ()"
.br
.ti -1c
.RI "\fBsvn_config_ensure\fP ()"
.br
.ti -1c
.RI "\fBsvn_diff\fP ($path1, $rev1, $path2, $rev2)"
.br
.ti -1c
.RI "\fBsvn_cleanup\fP ($workingdir)"
.br
.ti -1c
.RI "\fBsvn_revert\fP ($path, $recursive=\fBfalse\fP)"
.br
.ti -1c
.RI "\fBsvn_resolved\fP ()"
.br
.ti -1c
.RI "\fBsvn_commit\fP ($\fBlog\fP, array $targets, $recursive=\fBtrue\fP)"
.br
.ti -1c
.RI "\fBsvn_lock\fP ()"
.br
.ti -1c
.RI "\fBsvn_unlock\fP ()"
.br
.ti -1c
.RI "\fBsvn_add\fP ($path, $recursive=\fBtrue\fP, $force=\fBfalse\fP)"
.br
.ti -1c
.RI "\fBsvn_status\fP ($path, $flags=0)"
.br
.ti -1c
.RI "\fBsvn_update\fP ($path, $revno=\fBSVN_REVISION_HEAD\fP, $recurse=\fBtrue\fP)"
.br
.ti -1c
.RI "\fBsvn_import\fP ($path, $url, $nonrecursive)"
.br
.ti -1c
.RI "\fBsvn_info\fP ()"
.br
.ti -1c
.RI "\fBsvn_export\fP ($frompath, $topath, $working_copy=\fBtrue\fP, $revision_no=\-1)"
.br
.ti -1c
.RI "\fBsvn_copy\fP ()"
.br
.ti -1c
.RI "\fBsvn_switch\fP ()"
.br
.ti -1c
.RI "\fBsvn_blame\fP ($repository_url, $revision_no=\fBSVN_REVISION_HEAD\fP)"
.br
.ti -1c
.RI "\fBsvn_delete\fP ($path, $force=\fBfalse\fP)"
.br
.ti -1c
.RI "\fBsvn_mkdir\fP ($path, $log_message=\fBnull\fP)"
.br
.ti -1c
.RI "\fBsvn_move\fP ($src_path, $dst_path, $force=\fBfalse\fP)"
.br
.ti -1c
.RI "\fBsvn_proplist\fP ($path, $recurse=\fBfalse\fP, $revision)"
.br
.ti -1c
.RI "\fBsvn_propget\fP ($path, $property_name, $recurse=\fBfalse\fP, $revision)"
.br
.ti -1c
.RI "\fBsvn_repos_create\fP ($path, array $config=\fBnull\fP, array $fsconfig=\fBnull\fP)"
.br
.ti -1c
.RI "\fBsvn_repos_recover\fP ($path)"
.br
.ti -1c
.RI "\fBsvn_repos_hotcopy\fP ($repospath, $destpath, $cleanlogs)"
.br
.ti -1c
.RI "\fBsvn_repos_open\fP ($path)"
.br
.ti -1c
.RI "\fBsvn_repos_fs\fP ($repos)"
.br
.ti -1c
.RI "\fBsvn_repos_fs_begin_txn_for_commit\fP ($repos, $rev, $author, $log_msg)"
.br
.ti -1c
.RI "\fBsvn_repos_fs_commit_txn\fP ($txn)"
.br
.ti -1c
.RI "\fBsvn_fs_revision_root\fP ($fs, $revnum)"
.br
.ti -1c
.RI "\fBsvn_fs_check_path\fP ($fsroot, $path)"
.br
.ti -1c
.RI "\fBsvn_fs_revision_prop\fP ($fs, $revnum, $propname)"
.br
.ti -1c
.RI "\fBsvn_fs_dir_entries\fP ($fsroot, $path)"
.br
.ti -1c
.RI "\fBsvn_fs_node_created_rev\fP ($fsroot, $path)"
.br
.ti -1c
.RI "\fBsvn_fs_youngest_rev\fP ($fs)"
.br
.ti -1c
.RI "\fBsvn_fs_file_contents\fP ($fsroot, $path)"
.br
.ti -1c
.RI "\fBsvn_fs_file_length\fP ($fsroot, $path)"
.br
.ti -1c
.RI "\fBsvn_fs_txn_root\fP ($txn)"
.br
.ti -1c
.RI "\fBsvn_fs_make_file\fP ($root, $path)"
.br
.ti -1c
.RI "\fBsvn_fs_make_dir\fP ($root, $path)"
.br
.ti -1c
.RI "\fBsvn_fs_apply_text\fP ($root, $path)"
.br
.ti -1c
.RI "\fBsvn_fs_copy\fP ($from_root, $from_path, $to_root, $to_path)"
.br
.ti -1c
.RI "\fBsvn_fs_delete\fP ($root, $path)"
.br
.ti -1c
.RI "\fBsvn_fs_begin_txn2\fP ($repos, $rev)"
.br
.ti -1c
.RI "\fBsvn_fs_is_dir\fP ($root, $path)"
.br
.ti -1c
.RI "\fBsvn_fs_is_file\fP ($root, $path)"
.br
.ti -1c
.RI "\fBsvn_fs_node_prop\fP ($fsroot, $path, $propname)"
.br
.ti -1c
.RI "\fBsvn_fs_change_node_prop\fP ($root, $path, $name, $value)"
.br
.ti -1c
.RI "\fBsvn_fs_contents_changed\fP ($root1, $path1, $root2, $path2)"
.br
.ti -1c
.RI "\fBsvn_fs_props_changed\fP ($root1, $path1, $root2, $path2)"
.br
.ti -1c
.RI "\fBsvn_fs_abort_txn\fP ($txn)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "const \fBSVN_AUTH_PARAM_DEFAULT_USERNAME\fP 'svn:auth:username'"
.br
.ti -1c
.RI "const \fBSVN_AUTH_PARAM_DEFAULT_PASSWORD\fP 'svn:auth:password'"
.br
.ti -1c
.RI "const \fBSVN_AUTH_PARAM_NON_INTERACTIVE\fP 'svn:auth:non\-interactive'"
.br
.ti -1c
.RI "const \fBSVN_AUTH_PARAM_DONT_STORE_PASSWORDS\fP 'svn:auth:dont\-store\-passwords'"
.br
.ti -1c
.RI "const \fBSVN_AUTH_PARAM_NO_AUTH_CACHE\fP 'svn:auth:no\-auth\-cache'"
.br
.ti -1c
.RI "const \fBSVN_AUTH_PARAM_SSL_SERVER_FAILURES\fP 'svn:auth:ssl:failures'"
.br
.ti -1c
.RI "const \fBSVN_AUTH_PARAM_SSL_SERVER_CERT_INFO\fP 'svn:auth:ssl:cert\-info'"
.br
.ti -1c
.RI "const \fBSVN_AUTH_PARAM_CONFIG\fP 'svn:auth:config\-category\-servers'"
.br
.ti -1c
.RI "const \fBSVN_AUTH_PARAM_SERVER_GROUP\fP 'svn:auth:server\-group'"
.br
.ti -1c
.RI "const \fBSVN_AUTH_PARAM_CONFIG_DIR\fP 'svn:auth:config\-\fBdir\fP'"
.br
.ti -1c
.RI "const \fBPHP_SVN_AUTH_PARAM_IGNORE_SSL_VERIFY_ERRORS\fP 'php:svn:auth:ignore\-ssl\-verify\-errors'"
.br
.ti -1c
.RI "const \fBSVN_FS_CONFIG_FS_TYPE\fP 'fs\-type'"
.br
.ti -1c
.RI "const \fBSVN_FS_TYPE_BDB\fP 'bdb'"
.br
.ti -1c
.RI "const \fBSVN_FS_TYPE_FSFS\fP 'fsfs'"
.br
.ti -1c
.RI "const \fBSVN_PROP_REVISION_DATE\fP 'svn:date'"
.br
.ti -1c
.RI "const \fBSVN_PROP_REVISION_ORIG_DATE\fP 'svn:original\-\fBdate\fP'"
.br
.ti -1c
.RI "const \fBSVN_PROP_REVISION_AUTHOR\fP 'svn:author'"
.br
.ti -1c
.RI "const \fBSVN_PROP_REVISION_LOG\fP 'svn:log'"
.br
.ti -1c
.RI "const \fBSVN_REVISION_INITIAL\fP 1"
.br
.ti -1c
.RI "const \fBSVN_REVISION_HEAD\fP \-1"
.br
.ti -1c
.RI "const \fBSVN_REVISION_BASE\fP \-2"
.br
.ti -1c
.RI "const \fBSVN_REVISION_COMMITTED\fP \-3"
.br
.ti -1c
.RI "const \fBSVN_REVISION_PREV\fP \-4"
.br
.ti -1c
.RI "const \fBSVN_REVISION_UNSPECIFIED\fP \-5"
.br
.ti -1c
.RI "const \fBSVN_NON_RECURSIVE\fP 1"
.br
.ti -1c
.RI "const \fBSVN_DISCOVER_CHANGED_PATHS\fP 2"
.br
.ti -1c
.RI "const \fBSVN_OMIT_MESSAGES\fP 4"
.br
.ti -1c
.RI "const \fBSVN_STOP_ON_COPY\fP 8"
.br
.ti -1c
.RI "const \fBSVN_ALL\fP 16"
.br
.ti -1c
.RI "const \fBSVN_SHOW_UPDATES\fP 32"
.br
.ti -1c
.RI "const \fBSVN_NO_IGNORE\fP 64"
.br
.ti -1c
.RI "const \fBSVN_WC_STATUS_NONE\fP 1"
.br
.ti -1c
.RI "const \fBSVN_WC_STATUS_UNVERSIONED\fP 2"
.br
.ti -1c
.RI "const \fBSVN_WC_STATUS_NORMAL\fP 3"
.br
.ti -1c
.RI "const \fBSVN_WC_STATUS_ADDED\fP 4"
.br
.ti -1c
.RI "const \fBSVN_WC_STATUS_MISSING\fP 5"
.br
.ti -1c
.RI "const \fBSVN_WC_STATUS_DELETED\fP 6"
.br
.ti -1c
.RI "const \fBSVN_WC_STATUS_REPLACED\fP 7"
.br
.ti -1c
.RI "const \fBSVN_WC_STATUS_MODIFIED\fP 8"
.br
.ti -1c
.RI "const \fBSVN_WC_STATUS_MERGED\fP 9"
.br
.ti -1c
.RI "const \fBSVN_WC_STATUS_CONFLICTED\fP 10"
.br
.ti -1c
.RI "const \fBSVN_WC_STATUS_IGNORED\fP 11"
.br
.ti -1c
.RI "const \fBSVN_WC_STATUS_OBSTRUCTED\fP 12"
.br
.ti -1c
.RI "const \fBSVN_WC_STATUS_EXTERNAL\fP 13"
.br
.ti -1c
.RI "const \fBSVN_WC_STATUS_INCOMPLETE\fP 14"
.br
.ti -1c
.RI "const \fBSVN_NODE_NONE\fP 0"
.br
.ti -1c
.RI "const \fBSVN_NODE_FILE\fP 1"
.br
.ti -1c
.RI "const \fBSVN_NODE_DIR\fP 2"
.br
.ti -1c
.RI "const \fBSVN_NODE_UNKNOWN\fP 3"
.br
.ti -1c
.RI "const \fBSVN_WC_SCHEDULE_NORMAL\fP 0"
.br
.ti -1c
.RI "const \fBSVN_WC_SCHEDULE_ADD\fP 1"
.br
.ti -1c
.RI "const \fBSVN_WC_SCHEDULE_DELETE\fP 2"
.br
.ti -1c
.RI "const \fBSVN_WC_SCHEDULE_REPLACE\fP 3"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "svn_add ( $path,  $recursive = \fC\fBtrue\fP\fP,  $force = \fC\fBfalse\fP\fP)"
(PECL svn >= 0\&.1\&.0)
.br
 Schedules the addition of an item in a working directory \fBstring $path \fP Path of item to add\&. 
.PP
Relative paths will be resolved as if the current working directory was the one that contains the PHP binary\&. To use the calling script&#x00027;s working directory, use \fBrealpath\fP or dirname(\fBFILE\fP)\&. 
.PP
\fBParameters\fP
.RS 4
\fI$recursive\fP [optional] 
.RE
.PP
If item is directory, whether or not to recursively add all of its contents\&. Default is \fBTRUE\fP 
.PP
\fBParameters\fP
.RS 4
\fI$force\fP [optional] 
.RE
.PP
If true, Subversion will recurse into already versioned directories in order to add unversioned files that may be hiding in those directories\&. Default is \fBFALSE\fP 
.PP
\fBReturns\fP
.RS 4
bool \fBTRUE\fP on success or \fBFALSE\fP on failure\&. 
.RE
.PP

.SS "svn_auth_get_parameter ( $key)"
(PECL svn >= 0\&.1\&.0)
.br
 Retrieves authentication parameter \fBstring $key \fP String key name\&. Use the authentication constants defined by this extension to specify a key\&. 
.PP
\fBReturns\fP
.RS 4
string|null the string value of the parameter at \fIkey\fP; returns \fBNULL\fP if parameter does not exist\&. 
.RE
.PP

.SS "svn_auth_set_parameter ( $key,  $value)"
(PECL svn >= 0\&.1\&.0)
.br
 Sets an authentication parameter \fBstring $key \fP String key name\&. Use the authentication constants defined by this extension to specify a key\&. 
.PP
\fBParameters\fP
.RS 4
\fI$value\fP 
.RE
.PP
String value to set to parameter at key\&. Format of value varies with the parameter\&. 
.PP
\fBReturns\fP
.RS 4
void No value is returned\&. 
.RE
.PP

.SS "svn_blame ( $repository_url,  $revision_no = \fC\fBSVN_REVISION_HEAD\fP\fP)"
(PECL svn >= 0\&.3\&.0)
.br
 Get the SVN blame for a file \fBstring $repository_url \fP The repository URL\&. 
.PP
\fBParameters\fP
.RS 4
\fI$revision_no\fP [optional] 
.RE
.PP
The revision number\&. 
.PP
\fBReturns\fP
.RS 4
array An array of SVN blame information separated by line which includes the revision number, line number, line of code, author, and date\&. 
.RE
.PP

.SS "svn_cat ( $repos_url,  $revision_no = \fC\fBSVN_REVISION_HEAD\fP\fP)"
(PECL svn >= 0\&.1\&.0)
.br
 Returns the contents of a file in a repository \fBstring $repos_url \fP String URL path to item in a repository\&. 
.PP
\fBParameters\fP
.RS 4
\fI$revision_no\fP [optional] 
.RE
.PP
Integer revision number of item to retrieve, default is the HEAD revision\&. 
.PP
\fBReturns\fP
.RS 4
string the string contents of the item from the repository on success, and \fBFALSE\fP on failure\&. 
.RE
.PP

.SS "svn_checkout ( $repos,  $targetpath,  $revision = \fC\fBSVN_REVISION_HEAD\fP\fP,  $flags = \fC0\fP)"
(PECL svn >= 0\&.1\&.0)
.br
 Checks out a working copy from the repository \fBstring $repos \fP String URL path to directory in repository to check out\&. 
.PP
\fBParameters\fP
.RS 4
\fI$targetpath\fP 
.RE
.PP
String local path to directory to check out in to 
.PP
Relative paths will be resolved as if the current working directory was the one that contains the PHP binary\&. To use the calling script&#x00027;s working directory, use \fBrealpath\fP or dirname(\fBFILE\fP)\&. 
.PP
\fBParameters\fP
.RS 4
\fI$revision\fP [optional] 
.RE
.PP
Integer revision number of repository to check out\&. Default is HEAD, the most recent revision\&. 
.PP
\fBParameters\fP
.RS 4
\fI$flags\fP [optional] 
.RE
.PP
Any combination of \fBSVN_NON_RECURSIVE\fP and \fBSVN_IGNORE_EXTERNALS\fP\&. 
.PP
\fBReturns\fP
.RS 4
bool \fBTRUE\fP on success or \fBFALSE\fP on failure\&. 
.RE
.PP

.SS "svn_cleanup ( $workingdir)"
(PECL svn >= 0\&.1\&.0)
.br
 Recursively cleanup a working copy directory, finishing incomplete operations and removing locks \fBstring $workingdir \fP String path to local working directory to cleanup 
.PP
Relative paths will be resolved as if the current working directory was the one that contains the PHP binary\&. To use the calling script&#x00027;s working directory, use \fBrealpath\fP or dirname(\fBFILE\fP)\&. 
.PP
\fBReturns\fP
.RS 4
bool \fBTRUE\fP on success or \fBFALSE\fP on failure\&. 
.RE
.PP

.SS "svn_client_version ()"
(PECL svn >= 0\&.1\&.0)
.br
 Returns the version of the SVN client libraries \fBstring String version number, usually in form of x\&.y\&.z\&. \fP
.SS "svn_commit ( $log, array $targets,  $recursive = \fC\fBtrue\fP\fP)"
(PECL svn >= 0\&.1\&.0)
.br
 Sends changes from the local working copy to the repository \fBstring $log \fP String log text to commit 
.PP
\fBParameters\fP
.RS 4
\fI$targets\fP 
.RE
.PP
Array of local paths of files to be committed 
.PP
This parameter must be an array, a string for a single target is not acceptable\&. Relative paths will be resolved as if the current working directory was the one that contains the PHP binary\&. To use the calling script&#x00027;s working directory, use \fBrealpath\fP or dirname(\fBFILE\fP)\&. 
.PP
\fBParameters\fP
.RS 4
\fI$recursive\fP [optional] 
.RE
.PP
Boolean flag to disable recursive committing of directories in the \fItargets\fP array\&. Default is \fBTRUE\fP\&. 
.PP
\fBReturns\fP
.RS 4
array array in form of: 
.RE
.PP
.PP
.nf

array(
0 => integer revision number of commit
1 => string ISO 8601 date and time of commit
2 => name of committer
)
.fi
.PP
 <p<blockquote>
.PP
Returns \fBFALSE\fP on failure\&. 
.SS "svn_config_ensure ()"

.SS "svn_copy ()"

.SS "svn_delete ( $path,  $force = \fC\fBfalse\fP\fP)"
(PECL svn >= 0\&.4\&.0)
.br
 Delete items from a working copy or repository\&. \fBstring $path \fP Path of item to delete\&. 
.PP
Relative paths will be resolved as if the current working directory was the one that contains the PHP binary\&. To use the calling script&#x00027;s working directory, use \fBrealpath\fP or dirname(\fBFILE\fP)\&. 
.PP
\fBParameters\fP
.RS 4
\fI$force\fP [optional] 
.RE
.PP
If \fBTRUE\fP, the file will be deleted even if it has local modifications\&. Otherwise, local modifications will result in a failure\&. Default is \fBFALSE\fP 
.PP
\fBReturns\fP
.RS 4
bool \fBTRUE\fP on success or \fBFALSE\fP on failure\&. 
.RE
.PP

.SS "svn_diff ( $path1,  $rev1,  $path2,  $rev2)"
(PECL svn >= 0\&.1\&.0)
.br
 Recursively diffs two paths \fBstring $path1 \fP First path to diff\&. This can be a URL to a file/directory in an SVN repository or a local file/directory path\&. 
.PP
Relative paths will be resolved as if the current working directory was the one that contains the PHP binary\&. To use the calling script&#x00027;s working directory, use \fBrealpath\fP or dirname(\fBFILE\fP)\&. If a local file path has only backslashes and no forward slashes, this extension will fail to find the path\&. Always replace all backslashes with forward slashes when using this function\&. 
.PP
\fBParameters\fP
.RS 4
\fI$rev1\fP 
.RE
.PP
First path's revision number\&. Use \fBSVN_REVISION_HEAD\fP to specify the most recent revision\&. 
.PP
\fBParameters\fP
.RS 4
\fI$path2\fP 
.RE
.PP
Second path to diff\&. See \fIpath1\fP for description\&. 
.PP
\fBParameters\fP
.RS 4
\fI$rev2\fP 
.RE
.PP
Second path's revision number\&. See \fIrev1\fP for description\&. 
.PP
\fBReturns\fP
.RS 4
array an array-list consisting of two streams: the first is the diff output and the second contains error stream output\&. The streams can be read using \fBfread\fP\&. Returns \fBFALSE\fP or \fBNULL\fP on error\&. 
.RE
.PP
.PP
The diff output will, by default, be in the form of Subversion's custom unified diff format, but an external diff engine may be used depending on Subversion's configuration\&. 
.SS "svn_export ( $frompath,  $topath,  $working_copy = \fC\fBtrue\fP\fP,  $revision_no = \fC\-1\fP)"
(PECL svn >= 0\&.3\&.0)
.br
 Export the contents of a SVN directory \fBstring $frompath \fP The path to the current repository\&. 
.PP
\fBParameters\fP
.RS 4
\fI$topath\fP 
.RE
.PP
The path to the new repository\&. 
.PP
\fBParameters\fP
.RS 4
\fI$working_copy\fP [optional] 
.RE
.PP
If \fBTRUE\fP, it will export uncommitted files from the working copy\&. 
.PP
\fBParameters\fP
.RS 4
\fI$revision_no\fP [optional] 
.RE
.PP
\fBReturns\fP
.RS 4
bool \fBTRUE\fP on success or \fBFALSE\fP on failure\&. 
.RE
.PP

.SS "svn_fs_abort_txn ( $txn)"
(PECL svn >= 0\&.2\&.0)
.br
 Abort a transaction, returns true if everything is okay, false otherwise \fBresource $txn \fP Its description 
.PP
\fBReturns\fP
.RS 4
bool What the function returns, first on success, then on failure\&. See also the &#38;#38;return\&.success; entity 
.RE
.PP

.SS "svn_fs_apply_text ( $root,  $path)"
(PECL svn >= 0\&.2\&.0)
.br
 Creates and returns a stream that will be used to replace \fBresource $root \fP Its description 
.PP
\fBParameters\fP
.RS 4
\fI$path\fP 
.RE
.PP
Its description 
.PP
\fBReturns\fP
.RS 4
resource What the function returns, first on success, then on failure\&. See also the &#38;#38;return\&.success; entity 
.RE
.PP

.SS "svn_fs_begin_txn2 ( $repos,  $rev)"
(PECL svn >= 0\&.2\&.0)
.br
 Create a new transaction \fBresource $repos \fP Its description 
.PP
\fBParameters\fP
.RS 4
\fI$rev\fP 
.RE
.PP
Its description 
.PP
\fBReturns\fP
.RS 4
resource What the function returns, first on success, then on failure\&. See also the &#38;#38;return\&.success; entity 
.RE
.PP

.SS "svn_fs_change_node_prop ( $root,  $path,  $name,  $value)"
(PECL svn >= 0\&.2\&.0)
.br
 Return true if everything is ok, false otherwise \fBresource $root \fP Its description 
.PP
\fBParameters\fP
.RS 4
\fI$path\fP 
.RE
.PP
Its description 
.PP
\fBParameters\fP
.RS 4
\fI$name\fP 
.RE
.PP
Its description 
.PP
\fBParameters\fP
.RS 4
\fI$value\fP 
.RE
.PP
Its description 
.PP
\fBReturns\fP
.RS 4
bool What the function returns, first on success, then on failure\&. See also the &#38;#38;return\&.success; entity 
.RE
.PP

.SS "svn_fs_check_path ( $fsroot,  $path)"
(PECL svn >= 0\&.1\&.0)
.br
 Determines what kind of item lives at path in a given repository fsroot \fBresource $fsroot \fP Its description 
.PP
\fBParameters\fP
.RS 4
\fI$path\fP 
.RE
.PP
Its description 
.PP
\fBReturns\fP
.RS 4
int What the function returns, first on success, then on failure\&. See also the &#38;#38;return\&.success; entity 
.RE
.PP

.SS "svn_fs_contents_changed ( $root1,  $path1,  $root2,  $path2)"
(PECL svn >= 0\&.2\&.0)
.br
 Return true if content is different, false otherwise \fBresource $root1 \fP Its description 
.PP
\fBParameters\fP
.RS 4
\fI$path1\fP 
.RE
.PP
Its description 
.PP
\fBParameters\fP
.RS 4
\fI$root2\fP 
.RE
.PP
Its description 
.PP
\fBParameters\fP
.RS 4
\fI$path2\fP 
.RE
.PP
Its description 
.PP
\fBReturns\fP
.RS 4
bool What the function returns, first on success, then on failure\&. See also the &#38;#38;return\&.success; entity 
.RE
.PP

.SS "svn_fs_copy ( $from_root,  $from_path,  $to_root,  $to_path)"
(PECL svn >= 0\&.2\&.0)
.br
 Copies a file or a directory, returns true if all is ok, false otherwise \fBresource $from_root \fP Its description 
.PP
\fBParameters\fP
.RS 4
\fI$from_path\fP 
.RE
.PP
Its description 
.PP
\fBParameters\fP
.RS 4
\fI$to_root\fP 
.RE
.PP
Its description 
.PP
\fBParameters\fP
.RS 4
\fI$to_path\fP 
.RE
.PP
Its description 
.PP
\fBReturns\fP
.RS 4
bool What the function returns, first on success, then on failure\&. See also the &#38;#38;return\&.success; entity 
.RE
.PP

.SS "svn_fs_delete ( $root,  $path)"
(PECL svn >= 0\&.2\&.0)
.br
 Deletes a file or a directory, return true if all is ok, false otherwise \fBresource $root \fP Its description 
.PP
\fBParameters\fP
.RS 4
\fI$path\fP 
.RE
.PP
Its description 
.PP
\fBReturns\fP
.RS 4
bool What the function returns, first on success, then on failure\&. See also the &#38;#38;return\&.success; entity 
.RE
.PP

.SS "svn_fs_dir_entries ( $fsroot,  $path)"
(PECL svn >= 0\&.1\&.0)
.br
 Enumerates the directory entries under path; returns a hash of dir names to file type \fBresource $fsroot \fP Its description 
.PP
\fBParameters\fP
.RS 4
\fI$path\fP 
.RE
.PP
Its description 
.PP
\fBReturns\fP
.RS 4
array What the function returns, first on success, then on failure\&. See also the &#38;#38;return\&.success; entity 
.RE
.PP

.SS "svn_fs_file_contents ( $fsroot,  $path)"
(PECL svn >= 0\&.1\&.0)
.br
 Returns a stream to access the contents of a file from a given version of the fs \fBresource $fsroot \fP Its description 
.PP
\fBParameters\fP
.RS 4
\fI$path\fP 
.RE
.PP
Its description 
.PP
\fBReturns\fP
.RS 4
resource What the function returns, first on success, then on failure\&. See also the &#38;#38;return\&.success; entity 
.RE
.PP

.SS "svn_fs_file_length ( $fsroot,  $path)"
(PECL svn >= 0\&.1\&.0)
.br
 Returns the length of a file from a given version of the fs \fBresource $fsroot \fP Its description 
.PP
\fBParameters\fP
.RS 4
\fI$path\fP 
.RE
.PP
Its description 
.PP
\fBReturns\fP
.RS 4
int What the function returns, first on success, then on failure\&. See also the &#38;#38;return\&.success; entity 
.RE
.PP

.SS "svn_fs_is_dir ( $root,  $path)"
(PECL svn >= 0\&.2\&.0)
.br
 Return true if the path points to a directory, false otherwise \fBresource $root \fP Its description 
.PP
\fBParameters\fP
.RS 4
\fI$path\fP 
.RE
.PP
Its description 
.PP
\fBReturns\fP
.RS 4
bool What the function returns, first on success, then on failure\&. See also the &#38;#38;return\&.success; entity 
.RE
.PP

.SS "svn_fs_is_file ( $root,  $path)"
(PECL svn >= 0\&.2\&.0)
.br
 Return true if the path points to a file, false otherwise \fBresource $root \fP Its description 
.PP
\fBParameters\fP
.RS 4
\fI$path\fP 
.RE
.PP
Its description 
.PP
\fBReturns\fP
.RS 4
bool What the function returns, first on success, then on failure\&. See also the &#38;#38;return\&.success; entity 
.RE
.PP

.SS "svn_fs_make_dir ( $root,  $path)"
(PECL svn >= 0\&.2\&.0)
.br
 Creates a new empty directory, returns true if all is ok, false otherwise \fBresource $root \fP Its description 
.PP
\fBParameters\fP
.RS 4
\fI$path\fP 
.RE
.PP
Its description 
.PP
\fBReturns\fP
.RS 4
bool What the function returns, first on success, then on failure\&. See also the &#38;#38;return\&.success; entity 
.RE
.PP

.SS "svn_fs_make_file ( $root,  $path)"
(PECL svn >= 0\&.2\&.0)
.br
 Creates a new empty file, returns true if all is ok, false otherwise \fBresource $root \fP Its description 
.PP
\fBParameters\fP
.RS 4
\fI$path\fP 
.RE
.PP
Its description 
.PP
\fBReturns\fP
.RS 4
bool What the function returns, first on success, then on failure\&. See also the &#38;#38;return\&.success; entity 
.RE
.PP

.SS "svn_fs_node_created_rev ( $fsroot,  $path)"
(PECL svn >= 0\&.1\&.0)
.br
 Returns the revision in which path under fsroot was created \fBresource $fsroot \fP Its description 
.PP
\fBParameters\fP
.RS 4
\fI$path\fP 
.RE
.PP
Its description 
.PP
\fBReturns\fP
.RS 4
int What the function returns, first on success, then on failure\&. See also the &#38;#38;return\&.success; entity 
.RE
.PP

.SS "svn_fs_node_prop ( $fsroot,  $path,  $propname)"
(PECL svn >= 0\&.1\&.0)
.br
 Returns the value of a property for a node \fBresource $fsroot \fP Its description 
.PP
\fBParameters\fP
.RS 4
\fI$path\fP 
.RE
.PP
Its description 
.PP
\fBParameters\fP
.RS 4
\fI$propname\fP 
.RE
.PP
Its description 
.PP
\fBReturns\fP
.RS 4
string What the function returns, first on success, then on failure\&. See also the &#38;#38;return\&.success; entity 
.RE
.PP

.SS "svn_fs_props_changed ( $root1,  $path1,  $root2,  $path2)"
(PECL svn >= 0\&.2\&.0)
.br
 Return true if props are different, false otherwise \fBresource $root1 \fP Its description 
.PP
\fBParameters\fP
.RS 4
\fI$path1\fP 
.RE
.PP
Its description 
.PP
\fBParameters\fP
.RS 4
\fI$root2\fP 
.RE
.PP
Its description 
.PP
\fBParameters\fP
.RS 4
\fI$path2\fP 
.RE
.PP
Its description 
.PP
\fBReturns\fP
.RS 4
bool What the function returns, first on success, then on failure\&. See also the &#38;#38;return\&.success; entity 
.RE
.PP

.SS "svn_fs_revision_prop ( $fs,  $revnum,  $propname)"
(PECL svn >= 0\&.1\&.0)
.br
 Fetches the value of a named property \fBresource $fs \fP Its description 
.PP
\fBParameters\fP
.RS 4
\fI$revnum\fP 
.RE
.PP
Its description 
.PP
\fBParameters\fP
.RS 4
\fI$propname\fP 
.RE
.PP
Its description 
.PP
\fBReturns\fP
.RS 4
string What the function returns, first on success, then on failure\&. See also the &#38;#38;return\&.success; entity 
.RE
.PP

.SS "svn_fs_revision_root ( $fs,  $revnum)"
(PECL svn >= 0\&.1\&.0)
.br
 Get a handle on a specific version of the repository root \fBresource $fs \fP Its description 
.PP
\fBParameters\fP
.RS 4
\fI$revnum\fP 
.RE
.PP
Its description 
.PP
\fBReturns\fP
.RS 4
resource What the function returns, first on success, then on failure\&. See also the &#38;#38;return\&.success; entity 
.RE
.PP

.SS "svn_fs_txn_root ( $txn)"
(PECL svn >= 0\&.2\&.0)
.br
 Creates and returns a transaction root \fBresource $txn \fP Its description 
.PP
\fBReturns\fP
.RS 4
resource What the function returns, first on success, then on failure\&. See also the &#38;#38;return\&.success; entity 
.RE
.PP

.SS "svn_fs_youngest_rev ( $fs)"
(PECL svn >= 0\&.1\&.0)
.br
 Returns the number of the youngest revision in the filesystem \fBresource $fs \fP Its description 
.PP
\fBReturns\fP
.RS 4
int What the function returns, first on success, then on failure\&. See also the &#38;#38;return\&.success; entity 
.RE
.PP

.SS "svn_import ( $path,  $url,  $nonrecursive)"
(PECL svn >= 0\&.2\&.0)
.br
 Imports an unversioned path into a repository \fBstring $path \fP Path of file or directory to import\&. 
.PP
Relative paths will be resolved as if the current working directory was the one that contains the PHP binary\&. To use the calling script&#x00027;s working directory, use \fBrealpath\fP or dirname(\fBFILE\fP)\&. 
.PP
\fBParameters\fP
.RS 4
\fI$url\fP 
.RE
.PP
Repository URL to import into\&. 
.PP
\fBParameters\fP
.RS 4
\fI$nonrecursive\fP 
.RE
.PP
Whether or not to refrain from recursively processing directories\&. 
.PP
\fBReturns\fP
.RS 4
bool \fBTRUE\fP on success or \fBFALSE\fP on failure\&. 
.RE
.PP

.SS "svn_info ()"

.SS "svn_lock ()"

.SS "svn_log ( $repos_url,  $start_revision = \fC\fBnull\fP\fP,  $end_revision = \fC\fBnull\fP\fP,  $limit = \fC0\fP,  $flags = \fC\fBSVN_DISCOVER_CHANGED_PATHS\fP | \fBSVN_STOP_ON_COPY\fP\fP)"
(PECL svn >= 0\&.1\&.0)
.br
 Returns the commit log messages of a repository URL \fBstring $repos_url \fP Repository URL of the item to retrieve log history from\&. 
.PP
\fBParameters\fP
.RS 4
\fI$start_revision\fP [optional] 
.RE
.PP
Revision number of the first log to retrieve\&. Use \fBSVN_REVISION_HEAD\fP to retrieve the log from the most recent revision\&. 
.PP
\fBParameters\fP
.RS 4
\fI$end_revision\fP [optional] 
.RE
.PP
Revision number of the last log to retrieve\&. Defaults to \fIstart_revision\fP if specified or to \fBSVN_REVISION_INITIAL\fP otherwise\&. 
.PP
\fBParameters\fP
.RS 4
\fI$limit\fP [optional] 
.RE
.PP
Number of logs to retrieve\&. 
.PP
\fBParameters\fP
.RS 4
\fI$flags\fP [optional] 
.RE
.PP
Any combination of \fBSVN_OMIT_MESSAGES\fP, \fBSVN_DISCOVER_CHANGED_PATHS\fP and \fBSVN_STOP_ON_COPY\fP\&. 
.PP
\fBReturns\fP
.RS 4
array On success, this function returns an array file listing in the format of: 
.PP
.nf

[0] => Array, ordered most recent (highest) revision first
(
[rev] => integer revision number
[author] => string author name
[msg] => string log message
[date] => string date formatted per ISO 8601, i\&.e\&. date('c')
[paths] => Array, describing changed files
(
[0] => Array
(
[action] => string letter signifying change
[path] => absolute repository path of changed file
)
[1] => \&.\&.\&.
)
)
[1] => \&.\&.\&.
.fi
.PP
 
.RE
.PP
.PP
The output will always be a numerically indexed array of arrays, even when there are none or only one log message(s)\&. 
.PP
The value of action is a subset of the status output in the first column, where possible values are: 
.PP
.PP
Letter 
.PP
Description  
.PP
M 
.PP
Item/props was modified  
.PP
\fBA\fP 
.PP
Item was added  
.PP
D 
.PP
Item was deleted  
.PP
R 
.PP
Item was replaced  
.PP
If no changes were made to the item, an empty array is returned\&. 
.SS "svn_ls ( $repos_url,  $revision_no = \fC\fBSVN_REVISION_HEAD\fP\fP,  $recurse = \fC\fBfalse\fP\fP,  $peg = \fC\fBfalse\fP\fP)"
(PECL svn >= 0\&.1\&.0)
.br
 Returns list of directory contents in repository URL, optionally at revision number \fBstring $repos_url  int $revision_no [optional]  bool $recurse [optional] \fP Enables recursion\&. 
.PP
\fBParameters\fP
.RS 4
\fI$peg\fP [optional] 
.RE
.PP
\fBReturns\fP
.RS 4
array On success, this function returns an array file listing in the format of: 
.PP
.nf

[0] => Array
(
[created_rev] => integer revision number of last edit
[last_author] => string author name of last edit
[size] => integer byte file size of file
[time] => string date of last edit in form 'M d H:i'
or 'M d Y', depending on how old the file is
[time_t] => integer unix timestamp of last edit
[name] => name of file/directory
[type] => type, can be 'file' or 'dir'
)
[1] => \&.\&.\&.
.fi
.PP
 
.RE
.PP

.SS "svn_mkdir ( $path,  $log_message = \fC\fBnull\fP\fP)"
(PECL svn >= 0\&.4\&.0)
.br
 Creates a directory in a working copy or repository \fBstring $path \fP The path to the working copy or repository\&. 
.PP
\fBParameters\fP
.RS 4
\fI$log_message\fP [optional] 
.RE
.PP
\fBReturns\fP
.RS 4
bool \fBTRUE\fP on success or \fBFALSE\fP on failure\&. 
.RE
.PP

.SS "svn_move ( $src_path,  $dst_path,  $force = \fC\fBfalse\fP\fP)"
\fBstring $src_path  string $dst_path  bool $force [optional]  mixed \fP
.SS "svn_propget ( $path,  $property_name,  $recurse = \fC\fBfalse\fP\fP,  $revision)"

.PP
\fBParameters\fP
.RS 4
\fI$path\fP 
.br
\fI$property_name\fP 
.br
\fI$recurse\fP [optional] 
.br
\fI$revision\fP [optional] 
.RE
.PP
\fBReturns\fP
.RS 4
mixed 
.RE
.PP

.SS "svn_proplist ( $path,  $recurse = \fC\fBfalse\fP\fP,  $revision)"
\fBstring $path  bool $recurse [optional]  int $revision [optional]  mixed \fP
.SS "svn_repos_create ( $path, array $config = \fC\fBnull\fP\fP, array $fsconfig = \fC\fBnull\fP\fP)"
(PECL svn >= 0\&.1\&.0)
.br
 Create a new subversion repository at path \fBstring $path \fP Its description 
.PP
\fBParameters\fP
.RS 4
\fI$config\fP [optional] 
.RE
.PP
Its description 
.PP
\fBParameters\fP
.RS 4
\fI$fsconfig\fP [optional] 
.RE
.PP
Its description 
.PP
\fBReturns\fP
.RS 4
resource What the function returns, first on success, then on failure\&. See also the &#38;#38;return\&.success; entity 
.RE
.PP

.SS "svn_repos_fs ( $repos)"
(PECL svn >= 0\&.1\&.0)
.br
 Gets a handle on the filesystem for a repository \fBresource $repos \fP Its description 
.PP
\fBReturns\fP
.RS 4
resource What the function returns, first on success, then on failure\&. See also the &#38;#38;return\&.success; entity 
.RE
.PP

.SS "svn_repos_fs_begin_txn_for_commit ( $repos,  $rev,  $author,  $log_msg)"
(PECL svn >= 0\&.2\&.0)
.br
 Create a new transaction \fBresource $repos \fP Its description 
.PP
\fBParameters\fP
.RS 4
\fI$rev\fP 
.RE
.PP
Its description 
.PP
\fBParameters\fP
.RS 4
\fI$author\fP 
.RE
.PP
Its description 
.PP
\fBParameters\fP
.RS 4
\fI$log_msg\fP 
.RE
.PP
Its description 
.PP
\fBReturns\fP
.RS 4
resource What the function returns, first on success, then on failure\&. See also the &#38;#38;return\&.success; entity 
.RE
.PP

.SS "svn_repos_fs_commit_txn ( $txn)"
(PECL svn >= 0\&.2\&.0)
.br
 Commits a transaction and returns the new revision \fBresource $txn \fP Its description 
.PP
\fBReturns\fP
.RS 4
int What the function returns, first on success, then on failure\&. See also the &#38;#38;return\&.success; entity 
.RE
.PP

.SS "svn_repos_hotcopy ( $repospath,  $destpath,  $cleanlogs)"
(PECL svn >= 0\&.1\&.0)
.br
 Make a hot-copy of the repos at repospath; copy it to destpath \fBstring $repospath \fP Its description 
.PP
\fBParameters\fP
.RS 4
\fI$destpath\fP 
.RE
.PP
Its description 
.PP
\fBParameters\fP
.RS 4
\fI$cleanlogs\fP 
.RE
.PP
Its description 
.PP
\fBReturns\fP
.RS 4
bool What the function returns, first on success, then on failure\&. See also the &#38;#38;return\&.success; entity 
.RE
.PP

.SS "svn_repos_open ( $path)"
(PECL svn >= 0\&.1\&.0)
.br
 Open a shared lock on a repository\&. \fBstring $path \fP Its description 
.PP
\fBReturns\fP
.RS 4
resource What the function returns, first on success, then on failure\&. See also the &#38;#38;return\&.success; entity 
.RE
.PP

.SS "svn_repos_recover ( $path)"
(PECL svn >= 0\&.1\&.0)
.br
 Run recovery procedures on the repository located at path\&. \fBstring $path \fP Its description 
.PP
\fBReturns\fP
.RS 4
bool What the function returns, first on success, then on failure\&. See also the &#38;#38;return\&.success; entity 
.RE
.PP

.SS "svn_resolved ()"

.SS "svn_revert ( $path,  $recursive = \fC\fBfalse\fP\fP)"
(PECL svn >= 0\&.3\&.0)
.br
 Revert changes to the working copy \fBstring $path \fP The path to the working repository\&. 
.PP
\fBParameters\fP
.RS 4
\fI$recursive\fP [optional] 
.RE
.PP
Optionally make recursive changes\&. 
.PP
\fBReturns\fP
.RS 4
bool \fBTRUE\fP on success or \fBFALSE\fP on failure\&. 
.RE
.PP

.SS "svn_status ( $path,  $flags = \fC0\fP)"
(PECL svn >= 0\&.1\&.0)
.br
 Returns the status of working copy files and directories \fBstring $path \fP Local path to file or directory to retrieve status of\&. 
.PP
Relative paths will be resolved as if the current working directory was the one that contains the PHP binary\&. To use the calling script&#x00027;s working directory, use \fBrealpath\fP or dirname(\fBFILE\fP)\&. 
.PP
\fBParameters\fP
.RS 4
\fI$flags\fP [optional] 
.RE
.PP
Any combination of \fBSVN_NON_RECURSIVE\fP, \fBSVN_ALL\fP (regardless of modification status), \fBSVN_SHOW_UPDATES\fP (entries will be added for items that are out-of-date), \fBSVN_NO_IGNORE\fP (disregard svn:ignore properties when scanning for new files) and \fBSVN_IGNORE_EXTERNALS\fP\&. 
.PP
\fBReturns\fP
.RS 4
array a numerically indexed array of associative arrays detailing the status of items in the repository: 
.RE
.PP
.PP
.nf

Array (
[0] => Array (
// information on item
)
[1] => \&.\&.\&.
)
.fi
.PP
 <p<blockquote>
.PP
The information on the item is an associative array that can contain the following keys: 
.PP
path String path to file/directory of this entry on local filesystem\&. text_status Status of item's text\&. Refer to status constants for possible values\&. repos_text_status Status of item's text in repository\&. Only accurate if \fIupdate\fP was set to \fBTRUE\fP\&. Refer to status constants for possible values\&. prop_status Status of item's properties\&. Refer to status constants for possible values\&. repos_prop_status Status of item's property in repository\&. Only accurate if \fIupdate\fP was set to \fBTRUE\fP\&. Refer to status constants for possible values\&. locked Whether or not the item is locked\&. (Only set if \fBTRUE\fP\&.) copied Whether or not the item was copied (scheduled for addition with history)\&. (Only set if \fBTRUE\fP\&.) switched Whether or not the item was switched using the switch command\&. (Only set if \fBTRUE\fP) 
.PP
These keys are only set if the item is versioned: 
.PP
name Base name of item in repository\&. url URL of item in repository\&. repos Base URL of repository\&. revision Integer revision of item in working copy\&. kind Type of item, i\&.e\&. file or directory\&. Refer to type constants for possible values\&. schedule Scheduled action for item, i\&.e\&. addition or deletion\&. Constants for these magic numbers are not available, they can be emulated by using: \fC if (!defined('svn_wc_schedule_normal')) { define('svn_wc_schedule_normal', 0); // nothing special define('svn_wc_schedule_add', 1); // item will be added define('svn_wc_schedule_delete', 2); // item will be deleted define('svn_wc_schedule_replace', 3); // item will be added and deleted } \fP deleted Whether or not the item was deleted, but parent revision lags behind\&. (Only set if \fBTRUE\fP\&.) absent Whether or not the item is absent, that is, Subversion knows that there should be something there but there isn't\&. (Only set if \fBTRUE\fP\&.) incomplete Whether or not the entries file for a directory is incomplete\&. (Only set if \fBTRUE\fP\&.) cmt_date Integer Unix timestamp of last commit date\&. (Unaffected by \fIupdate\fP\&.) cmt_rev Integer revision of last commit\&. (Unaffected by \fIupdate\fP\&.) cmt_author String author of last commit\&. (Unaffected by \fIupdate \fP
.SS "svn_switch ()"

.SS "svn_unlock ()"

.SS "svn_update ( $path,  $revno = \fC\fBSVN_REVISION_HEAD\fP\fP,  $recurse = \fC\fBtrue\fP\fP)"
(PECL svn >= 0\&.1\&.0)
.br
 Update working copy \fBstring $path \fP Path to local working copy\&. 
.PP
Relative paths will be resolved as if the current working directory was the one that contains the PHP binary\&. To use the calling script&#x00027;s working directory, use \fBrealpath\fP or dirname(\fBFILE\fP)\&. 
.PP
\fBParameters\fP
.RS 4
\fI$revno\fP [optional] 
.RE
.PP
Revision number to update to, default is \fBSVN_REVISION_HEAD\fP\&. 
.PP
\fBParameters\fP
.RS 4
\fI$recurse\fP [optional] 
.RE
.PP
Whether or not to recursively update directories\&. 
.PP
\fBReturns\fP
.RS 4
int|false new revision number on success, returns \fBFALSE\fP on failure\&. 
.RE
.PP

.SH "Variable Documentation"
.PP 
.SS "const PHP_SVN_AUTH_PARAM_IGNORE_SSL_VERIFY_ERRORS 'php:svn:auth:ignore\-ssl\-verify\-errors'"
Custom property for ignoring SSL cert verification errors \fBhttps://php\&.net/manual/en/svn\&.constants\&.php\fP
.SS "const SVN_ALL 16"

.SS "const SVN_AUTH_PARAM_CONFIG 'svn:auth:config\-category\-servers'"

.SS "const SVN_AUTH_PARAM_CONFIG_DIR 'svn:auth:config\-\fBdir\fP'"

.SS "const SVN_AUTH_PARAM_DEFAULT_PASSWORD 'svn:auth:password'"
Property for default password to use when performing basic authentication \fBhttps://php\&.net/manual/en/svn\&.constants\&.php\fP
.SS "const SVN_AUTH_PARAM_DEFAULT_USERNAME 'svn:auth:username'"
Property for default username to use when performing basic authentication \fBhttps://php\&.net/manual/en/svn\&.constants\&.php\fP
.SS "const SVN_AUTH_PARAM_DONT_STORE_PASSWORDS 'svn:auth:dont\-store\-passwords'"

.SS "const SVN_AUTH_PARAM_NO_AUTH_CACHE 'svn:auth:no\-auth\-cache'"

.SS "const SVN_AUTH_PARAM_NON_INTERACTIVE 'svn:auth:non\-interactive'"

.SS "const SVN_AUTH_PARAM_SERVER_GROUP 'svn:auth:server\-group'"

.SS "const SVN_AUTH_PARAM_SSL_SERVER_CERT_INFO 'svn:auth:ssl:cert\-info'"

.SS "const SVN_AUTH_PARAM_SSL_SERVER_FAILURES 'svn:auth:ssl:failures'"

.SS "const SVN_DISCOVER_CHANGED_PATHS 2"

.SS "const SVN_FS_CONFIG_FS_TYPE 'fs\-type'"
Configuration key that determines filesystem type \fBhttps://php\&.net/manual/en/svn\&.constants\&.php\fP
.SS "const SVN_FS_TYPE_BDB 'bdb'"
Filesystem is Berkeley-DB implementation \fBhttps://php\&.net/manual/en/svn\&.constants\&.php\fP
.SS "const SVN_FS_TYPE_FSFS 'fsfs'"
Filesystem is native-filesystem implementation \fBhttps://php\&.net/manual/en/svn\&.constants\&.php\fP
.SS "const SVN_NO_IGNORE 64"

.SS "const SVN_NODE_DIR 2"
\fBDirectory\fP \fBhttps://php\&.net/manual/en/svn\&.constants\&.php\fP
.SS "const SVN_NODE_FILE 1"
File \fBhttps://php\&.net/manual/en/svn\&.constants\&.php\fP
.SS "const SVN_NODE_NONE 0"
Absent \fBhttps://php\&.net/manual/en/svn\&.constants\&.php\fP
.SS "const SVN_NODE_UNKNOWN 3"
Something Subversion cannot identify \fBhttps://php\&.net/manual/en/svn\&.constants\&.php\fP
.SS "const SVN_NON_RECURSIVE 1"

.SS "const SVN_OMIT_MESSAGES 4"

.SS "const SVN_PROP_REVISION_AUTHOR 'svn:author'"
svn:author \fBhttps://php\&.net/manual/en/svn\&.constants\&.php\fP
.SS "const SVN_PROP_REVISION_DATE 'svn:date'"
svn:date \fBhttps://php\&.net/manual/en/svn\&.constants\&.php\fP
.SS "const SVN_PROP_REVISION_LOG 'svn:log'"
svn:log \fBhttps://php\&.net/manual/en/svn\&.constants\&.php\fP
.SS "const SVN_PROP_REVISION_ORIG_DATE 'svn:original\-\fBdate\fP'"
svn:original-date \fBhttps://php\&.net/manual/en/svn\&.constants\&.php\fP
.SS "const SVN_REVISION_BASE \-2"

.SS "const SVN_REVISION_COMMITTED \-3"

.SS "const SVN_REVISION_HEAD \-1"
Magic number (-1) specifying the HEAD revision \fBhttps://php\&.net/manual/en/svn\&.constants\&.php\fP
.SS "const SVN_REVISION_INITIAL 1"

.SS "const SVN_REVISION_PREV \-4"

.SS "const SVN_REVISION_UNSPECIFIED \-5"

.SS "const SVN_SHOW_UPDATES 32"

.SS "const SVN_STOP_ON_COPY 8"

.SS "const SVN_WC_SCHEDULE_ADD 1"

.SS "const SVN_WC_SCHEDULE_DELETE 2"

.SS "const SVN_WC_SCHEDULE_NORMAL 0"

.SS "const SVN_WC_SCHEDULE_REPLACE 3"

.SS "const SVN_WC_STATUS_ADDED 4"
Item is scheduled for addition \fBhttps://php\&.net/manual/en/svn\&.constants\&.php\fP
.SS "const SVN_WC_STATUS_CONFLICTED 10"
Item's local modifications conflicted with repository modifications \fBhttps://php\&.net/manual/en/svn\&.constants\&.php\fP
.SS "const SVN_WC_STATUS_DELETED 6"
Item is scheduled for deletion \fBhttps://php\&.net/manual/en/svn\&.constants\&.php\fP
.SS "const SVN_WC_STATUS_EXTERNAL 13"
Unversioned path that is populated using svn:externals \fBhttps://php\&.net/manual/en/svn\&.constants\&.php\fP
.SS "const SVN_WC_STATUS_IGNORED 11"
Item is unversioned but configured to be ignored \fBhttps://php\&.net/manual/en/svn\&.constants\&.php\fP
.SS "const SVN_WC_STATUS_INCOMPLETE 14"
\fBDirectory\fP does not contain complete entries list \fBhttps://php\&.net/manual/en/svn\&.constants\&.php\fP
.SS "const SVN_WC_STATUS_MERGED 9"
Item's local modifications were merged with repository modifications \fBhttps://php\&.net/manual/en/svn\&.constants\&.php\fP
.SS "const SVN_WC_STATUS_MISSING 5"
Item is versioned but missing from the working copy \fBhttps://php\&.net/manual/en/svn\&.constants\&.php\fP
.SS "const SVN_WC_STATUS_MODIFIED 8"
Item (text or properties) was modified \fBhttps://php\&.net/manual/en/svn\&.constants\&.php\fP
.SS "const SVN_WC_STATUS_NONE 1"
Status does not exist \fBhttps://php\&.net/manual/en/svn\&.constants\&.php\fP
.SS "const SVN_WC_STATUS_NORMAL 3"
Item exists, nothing else is happening \fBhttps://php\&.net/manual/en/svn\&.constants\&.php\fP
.SS "const SVN_WC_STATUS_OBSTRUCTED 12"
Unversioned item is in the way of a versioned resource \fBhttps://php\&.net/manual/en/svn\&.constants\&.php\fP
.SS "const SVN_WC_STATUS_REPLACED 7"
Item was deleted and then re-added \fBhttps://php\&.net/manual/en/svn\&.constants\&.php\fP
.SS "const SVN_WC_STATUS_UNVERSIONED 2"
Item is not versioned in working copy \fBhttps://php\&.net/manual/en/svn\&.constants\&.php\fP
.SH "Author"
.PP 
Generated automatically by Doxygen for Safaricom SDP from the source code\&.
