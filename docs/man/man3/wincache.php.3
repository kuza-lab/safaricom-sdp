.TH "vendor/jetbrains/phpstorm-stubs/wincache/wincache.php" 3 "Sat Sep 26 2020" "Safaricom SDP" \" -*- nroff -*-
.ad l
.nh
.SH NAME
vendor/jetbrains/phpstorm-stubs/wincache/wincache.php
.SH SYNOPSIS
.br
.PP
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBwincache_fcache_fileinfo\fP ($summaryonly=\fBfalse\fP)"
.br
.ti -1c
.RI "\fBwincache_fcache_meminfo\fP ()"
.br
.ti -1c
.RI "\fBwincache_lock\fP ($\fBkey\fP, $isglobal=\fBfalse\fP)"
.br
.ti -1c
.RI "\fBwincache_ocache_fileinfo\fP ($summaryonly=\fBfalse\fP)"
.br
.ti -1c
.RI "\fBwincache_ocache_meminfo\fP ()"
.br
.ti -1c
.RI "\fBwincache_refresh_if_changed\fP (array $files)"
.br
.ti -1c
.RI "\fBwincache_rplist_fileinfo\fP ()"
.br
.ti -1c
.RI "\fBwincache_rplist_meminfo\fP ()"
.br
.ti -1c
.RI "\fBwincache_scache_info\fP ($summaryonly=\fBfalse\fP)"
.br
.ti -1c
.RI "\fBwincache_scache_meminfo\fP ()"
.br
.ti -1c
.RI "\fBwincache_ucache_add\fP ($\fBkey\fP, $value, $ttl=0)"
.br
.ti -1c
.RI "\fBwincache_ucache_cas\fP ($\fBkey\fP, $old_value, $new_value)"
.br
.ti -1c
.RI "\fBwincache_ucache_clear\fP ()"
.br
.ti -1c
.RI "\fBwincache_ucache_dec\fP ($\fBkey\fP, $dec_by=1, &$success)"
.br
.ti -1c
.RI "\fBwincache_ucache_delete\fP ($\fBkey\fP)"
.br
.ti -1c
.RI "\fBwincache_ucache_exists\fP ($\fBkey\fP)"
.br
.ti -1c
.RI "\fBwincache_ucache_get\fP ($\fBkey\fP, &$success)"
.br
.ti -1c
.RI "\fBwincache_ucache_inc\fP ($\fBkey\fP, $inc_by=1, &$success)"
.br
.ti -1c
.RI "\fBwincache_ucache_info\fP ($summaryonly=\fBfalse\fP, $\fBkey\fP)"
.br
.ti -1c
.RI "\fBwincache_ucache_meminfo\fP ()"
.br
.ti -1c
.RI "\fBwincache_ucache_set\fP ($\fBkey\fP, $value, $ttl=0)"
.br
.ti -1c
.RI "\fBwincache_unlock\fP ($\fBkey\fP)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "wincache_fcache_fileinfo ( $summaryonly = \fC\fBfalse\fP\fP)"
Stubs for WinCache extension by Microsoft (v1\&.1\&.0) \fBWindows Cache Extension for PHP is a PHP accelerator that is used to increase the speed of PHP applications running on Windows and Windows Server\&. Requirements: IIS WebServer FastCGI mode PHP 5\&.2\&.X, Non-thread-safe build PHP 5\&.3 X86, Non-thread-safe VC9 build Author: Andriy Bazanov Date : 2010-09-30 (PHP 5\&.2+; PECL wincache >= 1\&.0\&.0)\fP Retrieves information about files cached in the file cache \fBbool $summaryonly [optional] \fPControls whether the returned array will contain information about individual cache entries along with the file cache summary\&.
.PP
\fBReturns\fP
.RS 4
array|false Array of meta data about file cache or FALSE on failure 
.RE
.PP
The array returned by this function contains the following elements: 
.PD 0

.IP "\(bu" 2
\fItotal_cache_uptime\fP - total time in seconds that the file cache has been active 
.IP "\(bu" 2
\fItotal_file_count\fP - total number of files that are currently in the file cache 
.IP "\(bu" 2
\fItotal_hit_count\fP - number of times the files have been served from the file cache 
.IP "\(bu" 2
\fItotal_miss_count\fP - number of times the files have not been found in the file cache 
.IP "\(bu" 2
\fIfile_entries\fP - an array that contains the information about all the cached files: 
.PD 0

.IP "  \(bu" 4
\fIfile_name\fP - absolute file name of the cached file 
.IP "  \(bu" 4
\fIadd_time\fP - time in seconds since the file has been added to the file cache 
.IP "  \(bu" 4
\fIuse_time\fP - time in seconds since the file has been accessed in the file cache 
.IP "  \(bu" 4
\fIlast_check\fP - time in seconds since the file has been checked for modifications 
.IP "  \(bu" 4
\fIhit_count\fP - number of times the file has been served from the cache 
.IP "  \(bu" 4
\fIfile_size\fP - size of the cached file in bytes 
.PP

.PP

.SS "wincache_fcache_meminfo ()"
(PHP 5\&.2+; PECL wincache >= 1\&.0\&.0)
.br
 Retrieves information about memory usage by file cache\&. \fBarray|false Array of meta data about file cache memory usage or FALSE on failure \fPThe array returned by this function contains the following elements: 
.PD 0

.IP "\(bu" 2
\fImemory_total\fP - amount of memory in bytes allocated for the file cache 
.IP "\(bu" 2
\fImemory_free\fP - amount of free memory in bytes available for the file cache 
.IP "\(bu" 2
\fInum_used_blks\fP - number of memory blocks used by the file cache 
.IP "\(bu" 2
\fInum_free_blks\fP - number of free memory blocks available for the file cache 
.IP "\(bu" 2
\fImemory_overhead\fP - amount of memory in bytes used for the file cache internal structures 
.PP

.SS "wincache_lock ( $key,  $isglobal = \fC\fBfalse\fP\fP)"
(PHP 5\&.2+; PECL wincache >= 1\&.1\&.0)
.br
 Obtains an exclusive lock on a given key\&. 
.PP
The execution of the current script will be blocked until the lock can be obtained\&. Once the lock is obtained, the other scripts that try to request the lock by using the same key will be blocked, until the current script releases the lock by using \fBwincache_unlock()\fP\&.
.PP
\fBstring $key Name of the key in the cache to get the lock on\&.  bool $isglobal [optional] \fPControls whether the scope of the lock is system-wide or local\&. Local locks are scoped to the application pool in IIS FastCGI case or to all php processes that have the same parent process identifier\&. 
.PP
\fBReturns\fP
.RS 4
bool Returns TRUE on success or FALSE on failure\&. 
.RE
.PP

.SS "wincache_ocache_fileinfo ( $summaryonly = \fC\fBfalse\fP\fP)"
(PHP 5\&.2+; PECL wincache >= 1\&.0\&.0)
.br
 Retrieves information about opcode cache content and its usage \fBbool $summaryonly [optional] \fPControls whether the returned array will contain information about individual cache entries along with the opcode cache summary\&.
.PP
\fBReturns\fP
.RS 4
array|false Array of meta data about opcode cache or FALSE on failure 
.RE
.PP
The array returned by this function contains the following elements: 
.PD 0

.IP "\(bu" 2
\fItotal_cache_uptime\fP - total time in seconds that the opcode cache has been active 
.IP "\(bu" 2
\fItotal_file_count\fP - total number of files that are currently in the opcode cache 
.IP "\(bu" 2
\fItotal_hit_count\fP - number of times the compiled opcode have been served from the cache 
.IP "\(bu" 2
\fItotal_miss_count\fP - number of times the compiled opcode have not been found in the cache 
.IP "\(bu" 2
\fIis_local_cache\fP - true is the cache metadata is for a local cache instance, false if the metadata is for the global cache 
.IP "\(bu" 2
\fIfile_entries\fP - an array that contains the information about all the cached files: 
.PD 0

.IP "  \(bu" 4
\fIfile_name\fP - absolute file name of the cached file 
.IP "  \(bu" 4
\fIadd_time\fP - time in seconds since the file has been added to the opcode cache 
.IP "  \(bu" 4
\fIuse_time\fP - time in seconds since the file has been accessed in the opcode cache 
.IP "  \(bu" 4
\fIlast_check\fP - time in seconds since the file has been checked for modifications 
.IP "  \(bu" 4
\fIhit_count\fP - number of times the file has been served from the cache 
.IP "  \(bu" 4
\fIfunction_count\fP - number of functions in the cached file 
.IP "  \(bu" 4
\fIclass_count\fP - number of classes in the cached file 
.PP

.PP

.SS "wincache_ocache_meminfo ()"
(PHP 5\&.2+; PECL wincache >= 1\&.0\&.0)
.br
 Retrieves information about memory usage by opcode cache\&. \fBarray|false Array of meta data about opcode cache memory usage or FALSE on failure \fPThe array returned by this function contains the following elements: 
.PD 0

.IP "\(bu" 2
\fImemory_total\fP - amount of memory in bytes allocated for the opcode cache 
.IP "\(bu" 2
\fImemory_free\fP - amount of free memory in bytes available for the opcode cache 
.IP "\(bu" 2
\fInum_used_blks\fP - number of memory blocks used by the opcode cache 
.IP "\(bu" 2
\fInum_free_blks\fP - number of free memory blocks available for the opcode cache 
.IP "\(bu" 2
\fImemory_overhead\fP - amount of memory in bytes used for the opcode cache internal structures 
.PP

.SS "wincache_refresh_if_changed (array $files)"
(PHP 5\&.2+; PECL wincache >= 1\&.0\&.0)
.br
 Refreshes the cache entries for the files, whose names were passed in the input argument\&. 
.PP
If no argument is specified then refreshes all the entries in the cache\&.
.PP
\fBarray $files [optional] \fPAn array of file names for files that need to be refreshed\&. An absolute or relative file paths can be used\&.
.PP
\fBReturns\fP
.RS 4
bool Returns TRUE on success or FALSE on failure\&. 
.RE
.PP

.SS "wincache_rplist_fileinfo ()"
(PHP 5\&.2+; PECL wincache >= 1\&.0\&.0)
.br
 Retrieves information about cached mappings between relative file paths and corresponding absolute file paths\&. \fBarray|false Array of meta data about the resolve file path cache or FALSE on failure \fPThe array returned by this function contains the following elements: 
.PD 0

.IP "\(bu" 2
\fItotal_file_count\fP - total number of file path mappings stored in the cache 
.IP "\(bu" 2
\fIrplist_entries\fP - an array that contains the information about all the cached file paths: 
.PD 0

.IP "  \(bu" 4
\fIresolve_path\fP - path to a file 
.IP "  \(bu" 4
\fIsubkey_data\fP - corresponding absolute path to a file 
.PP

.PP

.SS "wincache_rplist_meminfo ()"
(PHP 5\&.2+; PECL wincache >= 1\&.0\&.0)
.br
 Retrieves information about memory usage by resolve file path cache\&. \fBarray|false Array of meta data that describes memory usage by resolve file path cache\&. or FALSE on failure \fPThe array returned by this function contains the following elements: 
.PD 0

.IP "\(bu" 2
\fImemory_total\fP - amount of memory in bytes allocated for the resolve file path cache 
.IP "\(bu" 2
\fImemory_free\fP - amount of free memory in bytes available for the resolve file path cache 
.IP "\(bu" 2
\fInum_used_blks\fP - number of memory blocks used by the resolve file path cache 
.IP "\(bu" 2
\fInum_free_blks\fP - number of free memory blocks available for the resolve file path cache 
.IP "\(bu" 2
\fImemory_overhead\fP - amount of memory in bytes used for the internal structures of resolve file path cache 
.PP

.SS "wincache_scache_info ( $summaryonly = \fC\fBfalse\fP\fP)"
(PHP 5\&.2+; PECL wincache >= 1\&.1\&.0)
.br
 Retrieves information about session cache content and its usage\&. \fBbool $summaryonly [optional] \fPControls whether the returned array will contain information about individual cache entries along with the session cache summary\&.
.PP
\fBReturns\fP
.RS 4
array|false Array of meta data about session cache or FALSE on failure 
.RE
.PP
The array returned by this function contains the following elements: 
.PD 0

.IP "\(bu" 2
\fItotal_cache_uptime\fP - total time in seconds that the session cache has been active 
.IP "\(bu" 2
\fItotal_item_count\fP - total number of elements that are currently in the session cache 
.IP "\(bu" 2
\fIis_local_cache\fP - true is the cache metadata is for a local cache instance, false if the metadata is for the global cache 
.IP "\(bu" 2
\fItotal_hit_count\fP - number of times the data has been served from the cache 
.IP "\(bu" 2
\fItotal_miss_count\fP - number of times the data has not been found in the cache 
.IP "\(bu" 2
\fIscache_entries\fP - an array that contains the information about all the cached items: 
.PD 0

.IP "  \(bu" 4
\fIkey_name\fP - name of the key which is used to store the data 
.IP "  \(bu" 4
\fIvalue_type\fP - type of value stored by the key 
.IP "  \(bu" 4
\fIuse_time\fP - time in seconds since the file has been accessed in the opcode cache 
.IP "  \(bu" 4
\fIlast_check\fP - time in seconds since the file has been checked for modifications 
.IP "  \(bu" 4
\fIttl_seconds\fP - time remaining for the data to live in the cache, 0 meaning infinite 
.IP "  \(bu" 4
\fIage_seconds\fP - time elapsed from the time data has been added in the cache 
.IP "  \(bu" 4
\fIhitcount\fP - number of times data has been served from the cache 
.PP

.PP

.SS "wincache_scache_meminfo ()"
(PHP 5\&.2+; PECL wincache >= 1\&.1\&.0)
.br
 Retrieves information about memory usage by session cache\&. \fBarray|false Array of meta data about session cache memory usage or FALSE on failure \fPThe array returned by this function contains the following elements: 
.PD 0

.IP "\(bu" 2
\fImemory_total\fP - amount of memory in bytes allocated for the session cache 
.IP "\(bu" 2
\fImemory_free\fP - amount of free memory in bytes available for the session cache 
.IP "\(bu" 2
\fInum_used_blks\fP - number of memory blocks used by the session cache 
.IP "\(bu" 2
\fInum_free_blks\fP - number of free memory blocks available for the session cache 
.IP "\(bu" 2
\fImemory_overhead\fP - amount of memory in bytes used for the session cache internal structures 
.PP

.SS "wincache_ucache_add ( $key,  $value,  $ttl = \fC0\fP)"
(PHP 5\&.2+; PECL wincache >= 1\&.1\&.0)
.br
 Adds a variable in user cache, only if this variable doesn't already exist in the cache\&. 
.PP
The added variable remains in the user cache unless its time to live expires or it is deleted by using \fBwincache_ucache_delete()\fP or \fBwincache_ucache_clear()\fP functions\&.
.PP
\fBmixed $key \fPStore the variable using this key name\&. If a variable with same key is already present the function will fail and return FALSE\&. key is case sensitive\&. To override the value even if key is present use \fBwincache_ucache_set()\fP function instad\&. key can also take array of name => value pairs where names will be used as keys\&. This can be used to add multiple values in the cache in one operation, thus avoiding race condition\&.
.PP
\fBParameters\fP
.RS 4
\fI$value\fP 
.RE
.PP
Value of a variable to store\&. Value supports all data types except resources, such as file handles\&. This paramter is ignored if first argument is an array\&. \fBA\fP general guidance is to pass NULL as value while using array as key\&.
.PP
\fBParameters\fP
.RS 4
\fI$ttl\fP [optional] 
.RE
.PP
Time for the variable to live in the cache in seconds\&. After the value specified in ttl has passed the stored variable will be deleted from the cache\&. This parameter takes a default value of 0 which means the variable will stay in the cache unless explicitly deleted by using \fBwincache_ucache_delete()\fP or \fBwincache_ucache_clear()\fP functions\&.
.PP
\fBReturns\fP
.RS 4
bool If key is string, the function returns TRUE on success and FALSE on failure\&. 
.RE
.PP
If key is an array, the function returns: 
.PD 0

.IP "\(bu" 2
If all the name => value pairs in the array can be set, function returns an empty array; 
.IP "\(bu" 2
If all the name => value pairs in the array cannot be set, function returns FALSE; 
.IP "\(bu" 2
If some can be set while others cannot, function returns an array with name=>value pair for which the addition failed in the user cache\&. 
.PP

.SS "wincache_ucache_cas ( $key,  $old_value,  $new_value)"
(PHP 5\&.2+; PECL wincache >= 1\&.1\&.0)
.br
 Compares the variable associated with the \fIkey\fP with \fIold_value\fP and if it matches then assigns the \fInew_value\fP to it\&. \fBstring $key The key that is used to store the variable in the cache\&. key is case sensitive\&.  int $old_value Old value of the variable pointed by key in the user cache\&. The value should be of type long, otherwise the function returns FALSE\&.  int $new_value New value which will get assigned to variable pointer by key if a match is found\&. The value should be of type long, otherwise the function returns FALSE\&.  bool Returns TRUE on success or FALSE on failure\&. \fP
.SS "wincache_ucache_clear ()"
(PHP 5\&.2+; PECL wincache >= 1\&.1\&.0)
.br
 Clears/deletes all the values stored in the user cache\&. \fBbool Returns TRUE on success or FALSE on failure\&. \fP
.SS "wincache_ucache_dec ( $key,  $dec_by = \fC1\fP, & $success)"
(PHP 5\&.2+; PECL wincache >= 1\&.1\&.0)
.br
 Decrements the value associated with the key by 1 or as specified by dec_by\&. \fBstring $key \fPThe key that was used to store the variable in the cache\&. key is case sensitive\&.
.PP
\fBParameters\fP
.RS 4
\fI$dec_by\fP 
.RE
.PP
The value by which the variable associated with the key will get decremented\&. If the argument is a floating point number it will be truncated to nearest integer\&. The variable associated with the key should be of type long, otherwise the function fails and returns FALSE\&.
.PP
\fBParameters\fP
.RS 4
\fI$success\fP [optional] 
.RE
.PP
Will be set to TRUE on success and FALSE on failure\&.
.PP
\fBReturns\fP
.RS 4
int|false Returns the decremented value on success and FALSE on failure\&. 
.RE
.PP

.SS "wincache_ucache_delete ( $key)"
(PHP 5\&.2+; PECL wincache >= 1\&.1\&.0)
.br
 Deletes the elements in the user cache pointed by key\&. \fBmixed $key \fPThe key that was used to store the variable in the cache\&. key is case sensitive\&. key can be an array of keys\&.
.PP
\fBReturns\fP
.RS 4
bool Returns TRUE on success or FALSE on failure\&. 
.RE
.PP
If key is an array then the function returns FALSE if every element of the array fails to get deleted from the user cache, otherwise returns an array which consists of all the keys that are deleted\&.
.SS "wincache_ucache_exists ( $key)"
(PHP 5\&.2+; PECL wincache >= 1\&.1\&.0)
.br
 Checks if a variable with the key exists in the user cache or not\&. \fBstring $key The key that was used to store the variable in the cache\&. key is case sensitive\&.  bool Returns TRUE if variable with the key exitsts, otherwise returns FALSE\&. \fP
.SS "wincache_ucache_get ( $key, & $success)"
(PHP 5\&.2+; PECL wincache >= 1\&.1\&.0)
.br
 Gets a variable stored in the user cache\&. \fBmixed $key \fPThe key that was used to store the variable in the cache\&. key is case sensitive\&. key can be an array of keys\&. In this case the return value will be an array of values of each element in the key array\&.
.PP
\fBParameters\fP
.RS 4
\fI$success\fP [optional] 
.RE
.PP
Will be set to TRUE on success and FALSE on failure\&.
.PP
\fBReturns\fP
.RS 4
mixed 
.RE
.PP
If key is a string, the function returns the value of the variable stored with that key\&. The success is set to TRUE on success and to FALSE on failure\&.
.PP
The key is an array, the parameter success is always set to TRUE\&. The returned array (name => value pairs) will contain only those name => value pairs for which the get operation in user cache was successful\&. If none of the keys in the key array finds a match in the user cache an empty array will be returned\&.
.SS "wincache_ucache_inc ( $key,  $inc_by = \fC1\fP, & $success)"
(PHP 5\&.2+; PECL wincache >= 1\&.1\&.0)
.br
 Increments the value associated with the key by 1 or as specified by inc_by\&. \fBstring $key \fPThe key that was used to store the variable in the cache\&. key is case sensitive\&.
.PP
\fBParameters\fP
.RS 4
\fI$inc_by\fP 
.RE
.PP
The value by which the variable associated with the key will get incremented\&. If the argument is a floating point number it will be truncated to nearest integer\&. The variable associated with the key should be of type long, otherwise the function fails and returns FALSE\&.
.PP
\fBParameters\fP
.RS 4
\fI$success\fP [optional] 
.RE
.PP
Will be set to TRUE on success and FALSE on failure\&.
.PP
\fBReturns\fP
.RS 4
int|false Returns the incremented value on success and FALSE on failure\&. 
.RE
.PP

.SS "wincache_ucache_info ( $summaryonly = \fC\fBfalse\fP\fP,  $key)"
(PHP 5\&.2+; PECL wincache >= 1\&.1\&.0)
.br
 Retrieves information about data stored in the user cache\&. \fBbool $summaryonly [optional] \fPControls whether the returned array will contain information about individual cache entries along with the user cache summary\&.
.PP
\fBParameters\fP
.RS 4
\fI$key\fP [optional] 
.RE
.PP
The key of an entry in the user cache\&. If specified then the returned array will contain information only about that cache entry\&. If not specified and summaryonly is set to false then the returned array will contain information about all entries in the cache\&.
.PP
\fBReturns\fP
.RS 4
array|false Array of meta data about user cache or FALSE on failure 
.RE
.PP
The array returned by this function contains the following elements: 
.PD 0

.IP "\(bu" 2
\fItotal_cache_uptime\fP - total time in seconds that the user cache has been active 
.IP "\(bu" 2
\fItotal_item_count\fP - total number of elements that are currently in the user cache 
.IP "\(bu" 2
\fIis_local_cache\fP - true is the cache metadata is for a local cache instance, false if the metadata is for the global cache 
.IP "\(bu" 2
\fItotal_hit_count\fP - number of times the data has been served from the cache 
.IP "\(bu" 2
\fItotal_miss_count\fP - number of times the data has not been found in the cache 
.IP "\(bu" 2
\fIucache_entries\fP - an array that contains the information about all the cached items: 
.PD 0

.IP "  \(bu" 4
\fIkey_name\fP - name of the key which is used to store the data 
.IP "  \(bu" 4
\fIvalue_type\fP - type of value stored by the key 
.IP "  \(bu" 4
\fIuse_time\fP - time in seconds since the file has been accessed in the opcode cache 
.IP "  \(bu" 4
\fIlast_check\fP - time in seconds since the file has been checked for modifications 
.IP "  \(bu" 4
\fIis_session\fP - indicates if the data is a session variable 
.IP "  \(bu" 4
\fIttl_seconds\fP - time remaining for the data to live in the cache, 0 meaning infinite 
.IP "  \(bu" 4
\fIage_seconds\fP - time elapsed from the time data has been added in the cache 
.IP "  \(bu" 4
\fIhitcount\fP - number of times data has been served from the cache 
.PP

.PP

.SS "wincache_ucache_meminfo ()"
(PHP 5\&.2+; PECL wincache >= 1\&.1\&.0)
.br
 Retrieves information about memory usage by user cache\&. \fBarray|false Array of meta data about user cache memory usage or FALSE on failure \fPThe array returned by this function contains the following elements: 
.PD 0

.IP "\(bu" 2
\fImemory_total\fP - amount of memory in bytes allocated for the user cache 
.IP "\(bu" 2
\fImemory_free\fP - amount of free memory in bytes available for the user cache 
.IP "\(bu" 2
\fInum_used_blks\fP - number of memory blocks used by the user cache 
.IP "\(bu" 2
\fInum_free_blks\fP - number of free memory blocks available for the user cache 
.IP "\(bu" 2
\fImemory_overhead\fP - amount of memory in bytes used for the user cache internal structures 
.PP

.SS "wincache_ucache_set ( $key,  $value,  $ttl = \fC0\fP)"
(PHP 5\&.2+; PECL wincache >= 1\&.1\&.0)
.br
 Adds a variable in user cache and overwrites a variable if it already exists in the cache\&. 
.PP
The added or updated variable remains in the user cache unless its time to live expires or it is deleted by using \fBwincache_ucache_delete()\fP or \fBwincache_ucache_clear()\fP functions\&.
.PP
\fBmixed $key \fP Store the variable using this key name\&. If a variable with same key is already present the function will overwrite the previous value with the new one\&. key is case sensitive\&. key can also take array of name => value pairs where names will be used as keys\&. This can be used to add multiple values in the cache in one operation, thus avoiding race condition\&.
.PP
\fBParameters\fP
.RS 4
\fI$value,<p>\fP Value of a variable to store\&. Value supports all data types except resources, such as file handles\&. This paramter is ignored if first argument is an array\&. \fBA\fP general guidance is to pass NULL as value while using array as key\&.
.br
\fI$ttl\fP [optional]
.RE
.PP
Time for the variable to live in the cache in seconds\&. After the value specified in ttl has passed the stored variable will be deleted from the cache\&. This parameter takes a default value of 0 which means the variable will stay in the cache unless explicitly deleted by using \fBwincache_ucache_delete()\fP or \fBwincache_ucache_clear()\fP functions\&.
.PP
\fBReturns\fP
.RS 4
bool 
.RE
.PP
If key is string, the function returns TRUE on success and FALSE on failure\&.
.PP
If key is an array, the function returns: 
.PD 0

.IP "\(bu" 2
If all the name => value pairs in the array can be set, function returns an empty array; 
.IP "\(bu" 2
If all the name => value pairs in the array cannot be set, function returns FALSE; 
.IP "\(bu" 2
If some can be set while others cannot, function returns an array with name=>value pair for which the addition failed in the user cache\&. 
.PP

.SS "wincache_unlock ( $key)"
(PHP 5\&.2+; PECL wincache >= 1\&.1\&.0)
.br
 Releases an exclusive lock that was obtained on a given key by using \fBwincache_lock()\fP\&. 
.PP
If any other process was blocked waiting for the lock on this key, that process will be able to obtain the lock\&.
.PP
\fBstring $key Name of the key in the cache to release the lock on\&.  bool Returns TRUE on success or FALSE on failure\&. \fP
.SH "Author"
.PP 
Generated automatically by Doxygen for Safaricom SDP from the source code\&.
