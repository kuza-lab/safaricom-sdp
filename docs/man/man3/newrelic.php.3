.TH "vendor/jetbrains/phpstorm-stubs/newrelic/newrelic.php" 3 "Sat Sep 26 2020" "Safaricom SDP" \" -*- nroff -*-
.ad l
.nh
.SH NAME
vendor/jetbrains/phpstorm-stubs/newrelic/newrelic.php
.SH SYNOPSIS
.br
.PP
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBnewrelic_add_custom_parameter\fP ($\fBkey\fP, $value)"
.br
.ti -1c
.RI "\fBnewrelic_add_custom_tracer\fP ($functionName)"
.br
.ti -1c
.RI "\fBnewrelic_background_job\fP ($flag=\fBtrue\fP)"
.br
.ti -1c
.RI "\fBnewrelic_capture_params\fP ($enable=\fBtrue\fP)"
.br
.ti -1c
.RI "\fBnewrelic_custom_metric\fP ($metricName, $value)"
.br
.ti -1c
.RI "\fBnewrelic_disable_autorum\fP ()"
.br
.ti -1c
.RI "\fBnewrelic_enable_params\fP ()"
.br
.ti -1c
.RI "\fBnewrelic_end_of_transaction\fP ()"
.br
.ti -1c
.RI "\fBnewrelic_end_transaction\fP ($ignore=\fBfalse\fP)"
.br
.ti -1c
.RI "\fBnewrelic_get_browser_timing_footer\fP ($includeTags=\fBtrue\fP)"
.br
.ti -1c
.RI "\fBnewrelic_get_browser_timing_header\fP ($includeTags=\fBtrue\fP)"
.br
.ti -1c
.RI "\fBnewrelic_ignore_apdex\fP ()"
.br
.ti -1c
.RI "\fBnewrelic_ignore_transaction\fP ()"
.br
.ti -1c
.RI "\fBnewrelic_name_transaction\fP ($name)"
.br
.ti -1c
.RI "\fBnewrelic_notice_error\fP ($messageOrUnused=\fBnull\fP, $exceptionOrMessage=\fBnull\fP, $unused2=\fBnull\fP, $unused3=\fBnull\fP, $unused4=\fBnull\fP)"
.br
.ti -1c
.RI "\fBnewrelic_record_custom_event\fP ($name, array $attributes)"
.br
.ti -1c
.RI "\fBnewrelic_set_appname\fP ($name, $license=\fBnull\fP, $xmit=\fBfalse\fP)"
.br
.ti -1c
.RI "\fBnewrelic_set_user_attributes\fP ($user, $account, $product)"
.br
.ti -1c
.RI "\fBnewrelic_start_transaction\fP ($appName, $license=\fBnull\fP)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "newrelic_add_custom_parameter ( $key,  $value)"
Add a custom parameter to the current web transaction with the specified value\&.
.PP
For example, you can add a customer's full name from your customer database\&. This parameter is shown in any transaction trace that results from this transaction\&.
.PP
If the value given is a float with a value of NaN, Infinity, denorm or negative zero, the behavior of this function is undefined\&. For other floating point values, New Relic may discard 1 or more bits of precision (ULPs) from the given value\&.
.PP
This function will return true if the parameter was added successfully\&.
.PP
Warning: If you are using your custom parameters/attributes in Insights, avoid using any of Insights' reserved words for naming them\&.
.PP
\fBstring $key  bool|float|integer|string $value  bool \fP
.SS "newrelic_add_custom_tracer ( $functionName)"
Add user-defined functions or methods to the list to be instrumented \&. API equivalent of the newrelic\&.transaction_tracer\&.custom setting\&.
.PP
Internal PHP functions cannot have custom tracing\&. functionName can be formatted either as 'functionName' for procedural functions, or as 'ClassName::method' for methods\&. Both static and instance methods will be instrumented if the method syntax is used\&.
.PP
This function will return true if the tracer was added successfully\&.
.PP
\fBstring $functionName  bool \fP
.SS "newrelic_background_job ( $flag = \fC\fBtrue\fP\fP)"
Mark current transaction as a background job or a web transaction\&.
.PP
If the flag argument is set to true or omitted, the current transaction is marked as a background job\&. If flag is set to false, then the transaction is marked as a web transaction\&.
.PP
\fBbool $flag [optional]  void \fP
.SS "newrelic_capture_params ( $enable = \fC\fBtrue\fP\fP)"
Enables the capturing of URL parameters for displaying in transaction traces\&. This will override the newrelic\&.capture_params setting\&.
.PP
Note: Until version 2\&.1\&.3 of the PHP agent, this function was called newrelic_enable_params\&. Although this alias still exists, it is deprecated and will be removed in the future\&.
.PP
\fBbool $enable [optional]  void \fP
.SS "newrelic_custom_metric ( $metricName,  $value)"
Adds a custom metric with the specified name and value\&.
.PP
Values saved are assumed to be milliseconds, so '4' will be stored as '\&.004' in our system\&. Your custom metrics can then be used in custom dashboards and custom views in the New Relic user interface\&. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric)\&. This will make them easily usable in custom dashboards\&. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined\&. New Relic may discard 1 or more bits of precision (ULPs) from the given value\&.
.PP
This function will return true if the metric was added successfully\&.
.PP
Warning: Avoid creating too many unique custom metric names\&. New Relic limits the total number of custom metrics you can use (not the total you can report for each of these custom metrics)\&. Exceeding more than 2000 unique custom metric names can cause automatic clamps that will affect other data\&.
.PP
\fBstring $metricName  float $value  bool \fP
.SS "newrelic_disable_autorum ()"
Prevents the output filter from attempting to insert the JavaScript for page load timing (sometimes referred to as real user monitoring or RUM) for this current transaction\&.
.PP
This function will always return true\&.
.PP
\fBtrue \fP
.SS "newrelic_enable_params ()"

.PP
\fBDeprecated\fP
.RS 4
use \fBnewrelic_capture_params()\fP instead 
.RE
.PP

.SS "newrelic_end_of_transaction ()"
Stop recording the web transaction immediately\&.
.PP
Usually used when a page is done with all computation and is about to stream data (file download, audio or video streaming, etc\&.) and you don't want the time taken to stream to be counted as part of the transaction\&. This is especially relevant when the time taken to complete the operation is completely outside the bounds of your application\&. For example, a user on a very slow connection may take a very long time to download even small files, and you wouldn't want that download time to skew the real transaction time\&.
.PP
\fBvoid \fP
.SS "newrelic_end_transaction ( $ignore = \fC\fBfalse\fP\fP)"
Causes the current transaction to end immediately\&.
.PP
Despite being similar in name to newrelic_end_of_transaction above, this call serves a very different purpose\&. newrelic_end_of_transaction simply marks the end time of the transaction but takes no other action\&. The transaction is still only sent to the daemon when the PHP engine determines that the script is done executing and is shutting down\&. This function on the other hand, causes the current transaction to end immediately, and will ship all of the metrics gathered thus far to the daemon unless the ignore parameter is set to true\&. In effect this call simulates what would happen when PHP terminates the current transaction\&. This is most commonly used in command line scripts that do some form of job queue processing\&. You would use this call at the end of processing a single job task, and begin a new transaction (see below) when a new task is pulled off the queue\&. Normally, when you end a transaction you want the metrics that have been gathered thus far to be recorded\&. However, there are times when you may want to end a transaction without doing so\&. In this case use the second form of the function and set ignore to true\&.
.PP
This function will return true if the transaction was successfully ended and data was sent to the New Relic daemon\&.
.PP
\fBbool $ignore [optional]  bool \fP
.SS "newrelic_get_browser_timing_footer ( $includeTags = \fC\fBtrue\fP\fP)"
Returns the JavaScript string to inject at the very end of the HTML output for page load timing (sometimes referred to as real user monitoring or RUM)\&.
.PP
If includeTags omitted or set to true, the returned JavaScript string will be enclosed in a <script> tag\&.
.PP
\fBbool $includeTags [optional]  string \fP
.SS "newrelic_get_browser_timing_header ( $includeTags = \fC\fBtrue\fP\fP)"
Returns the JavaScript string to inject as part of the header for page load timing (sometimes referred to as real user monitoring or RUM)\&.
.PP
If includeTags are omitted or set to true, the returned JavaScript string will be enclosed in a <script> tag\&.
.PP
\fBbool $includeTags  string \fP
.SS "newrelic_ignore_apdex ()"
Do not generate Apdex metrics for this transaction\&.
.PP
This is useful when you have either very short or very long transactions (such as file downloads) that can skew your Apdex score\&.
.PP
\fBvoid \fP
.SS "newrelic_ignore_transaction ()"
Do not generate metrics for this transaction\&.
.PP
This is useful when you have transactions that are particularly slow for known reasons and you do not want them always being reported as the transaction trace or skewing your site averages\&.
.PP
\fBvoid \fP
.SS "newrelic_name_transaction ( $name)"
Sets the name of the transaction to the specified name\&.
.PP
This can be useful if you have implemented your own dispatching scheme and want to name transactions according to their purpose rather than their URL\&.
.PP
This function will return true if the transaction name was successfully changed\&. If false is returned, please check the agent log for more information\&.
.PP
Call this function as early as possible\&. It will have no effect, for example, if called after the JavaScript footer for page load timing (sometimes referred to as real user monitoring or RUM) has been sent\&. Avoid creating too many unique transaction names\&. This will make your graphs less useful, and you may run into limits we set on the number of unique transaction names per account\&. It also can slow down the performance of your application\&.
.PP
\fBExample\fP: Naming transactions You have /product/123 and /product/234\&. If you generate a separate transaction name for each, then New Relic will store separate information for these two transaction names\&. Instead, store the transaction as /product/*, or use something significant about the code itself to name the transaction, such as /Product/view\&. The total number of unique transaction names should be less than 1000\&. Exceeding that is not recommended\&.
.PP
\fBstring $name  bool \fP
.SS "newrelic_notice_error ( $messageOrUnused = \fC\fBnull\fP\fP,  $exceptionOrMessage = \fC\fBnull\fP\fP,  $unused2 = \fC\fBnull\fP\fP,  $unused3 = \fC\fBnull\fP\fP,  $unused4 = \fC\fBnull\fP\fP)"
Report an error at this line of code, with a complete stack trace\&.
.PP
The first form of the call was added in agent version 2\&.6 and should be used for reporting exceptions\&. Only the exception for the last call is retained during the course of a transaction\&.
.PP
Agent version 4\&.3 enhanced this form to use the exception class as the category for grouping within the New Relic APM user interface\&. The exception parameter must be a valid PHP \fBException\fP class, and the stack frame recorded in that class will be the one reported, rather than the stack at the time this function was called\&. When using this form, if the error message is empty, a standard message in the same format as created by \fBException::__toString()\fP will be automatically generated\&.
.PP
function newrelic_notice_error(string $message, \fBException\fP $exception)
.PP
With the second form of the call, only the message is used\&. This set of parameters allows newrelic_notice_error to be set as an error handler with the internal PHP function \fBset_error_handler()\fP\&. With the second form of the call, only the message is used\&.
.PP
function newrelic_notice_error(integer $unused1, string $message, $unused2, $unused3, $unused4)
.PP
\fBstring|integer $messageOrUnused [optional]  Exception|string $exceptionOrMessage [optional]  string $unused2 [optional]  integer $unused3 [optional]  mixed $unused4 [optional]  void \fP
.SS "newrelic_record_custom_event ( $name, array $attributes)"
Records a New Relic Insights custom event\&.
.PP
For more information, see Inserting custom events with the PHP agent\&. The attributes parameter is expected to be an associative array: the keys should be the attribute names (which may be up to 255 characters in length), and the values should be scalar values: arrays and objects are not supported\&.
.PP
This API call was introduced in version 4\&.18 of the agent\&.
.PP
\fBstring $name  array $attributes  void \fP
.SS "newrelic_set_appname ( $name,  $license = \fC\fBnull\fP\fP,  $xmit = \fC\fBfalse\fP\fP)"
Sets the name of the application to name\&.
.PP
The string uses the same format as newrelic\&.appname and can set multiple application names by separating each with a semi-colon (;)\&. However, be aware of the restriction on the application name ordering as described for that setting\&. The first application name is the primary name\&. You can also specify up to two extra application names\&. (However, the same application name can only ever be used once as a primary name\&.) Call this function as early as possible\&. It will have no effect if called after the JavaScript footer for page load timing (sometimes referred to as real user monitoring or RUM) has been sent\&.
.PP
If you use multiple licenses, you can also specify a license key along with the application name\&. An application can appear in more than one account and the license key controls which account you are changing the name in\&. If you do not wish to change the license and wish to use the third variant, simply set the license key to the empty string ('')\&.
.PP
The xmit flag is new in PHP agent version 3\&.1\&. Usually, when you change an application name, the agent simply discards the current transaction and does not send any of the accumulated metrics to the daemon\&. However, if you want to record the metric and transaction data up to the point at which you called this function, you can specify a value of true for this argument to make the agent send the transaction to the daemon\&. This has a very slight performance impact as it takes a few milliseconds for the agent to dump its data\&. By default this parameter is false\&.
.PP
Consider setting the application name in a file loaded by PHP's auto_prepend_file INI setting\&. This function returns true if it succeeded or false otherwise\&.
.PP
This function will return true if the application name was successfully changed\&.
.PP
\fBstring $name  string $license [optional] defaults to ini_get('newrelic\&.license')  bool $xmit [optional]  bool \fP
.SS "newrelic_set_user_attributes ( $user,  $account,  $product)"
Sets user attributes (custom parameters)\&.
.PP
As of release 4\&.4, calling newrelic_set_user_attributes('a', 'b', 'c'); is equivalent to calling: newrelic_add_custom_parameter('user', 'a'); newrelic_add_custom_parameter('account', 'b'); newrelic_add_custom_parameter('product', 'c'); Previously, the three parameter strings were added to collected browser traces\&. All three parameters are required, but may be empty strings\&. * This function will return true if the attributes were added successfully\&.
.PP
\fBstring $user  string $account  string $product  bool \fP
.SS "newrelic_start_transaction ( $appName,  $license = \fC\fBnull\fP\fP)"
If you have ended a transaction before your script terminates (perhaps due to it just having finished a task in a job queue manager) and you want to start a new transaction, use this call\&.
.PP
This will perform the same operations that occur when the script was first started\&. Of the two arguments, only the application name is mandatory\&. However, if you are processing tasks for multiple accounts, you may also provide a license for the associated account\&. The license set for this API call will supersede all per-directory and global default licenses configured in INI files\&.
.PP
This function will return true if the transaction was successfully started\&.
.PP
\fBstring $appName  string $license [optional] defaults to ini_get('newrelic\&.license')  bool \fP
.SH "Author"
.PP 
Generated automatically by Doxygen for Safaricom SDP from the source code\&.
