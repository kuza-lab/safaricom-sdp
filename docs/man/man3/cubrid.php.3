.TH "vendor/jetbrains/phpstorm-stubs/cubrid/cubrid.php" 3 "Sat Sep 26 2020" "Safaricom SDP" \" -*- nroff -*-
.ad l
.nh
.SH NAME
vendor/jetbrains/phpstorm-stubs/cubrid/cubrid.php
.SH SYNOPSIS
.br
.PP
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBcubrid_connect\fP ($host, $port, $dbname, $userid='PUBLIC', $passwd='', $new_link=FALSE)"
.br
.ti -1c
.RI "\fBcubrid_connect_with_url\fP ($conn_url, $userid='PUBLIC', $passwd='', $new_link=FALSE)"
.br
.ti -1c
.RI "\fBcubrid_pconnect\fP ($host, $port, $dbname, $userid='PUBLIC', $passwd='')"
.br
.ti -1c
.RI "\fBcubrid_pconnect_with_url\fP ($conn_url, $userid='PUBLIC', $passwd='')"
.br
.ti -1c
.RI "\fBcubrid_close\fP ($conn_identifier=\fBnull\fP)"
.br
.ti -1c
.RI "\fBcubrid_disconnect\fP ($conn_identifier=\fBnull\fP)"
.br
.ti -1c
.RI "\fBcubrid_query\fP ($query, $conn_identifier=\fBnull\fP)"
.br
.ti -1c
.RI "\fBcubrid_execute\fP ($conn_identifier, $sql, $option=\fBnull\fP)"
.br
.ti -1c
.RI "\fBcubrid_execute\fP ($request_identifier, $option=\fBnull\fP)"
.br
.ti -1c
.RI "\fBcubrid_bind\fP ($req_identifier, $bind_index, $bind_value, $bind_value_type=\fBnull\fP)"
.br
.ti -1c
.RI "\fBcubrid_close_prepare\fP ($req_identifier)"
.br
.ti -1c
.RI "\fBcubrid_close_request\fP ($req_identifier)"
.br
.ti -1c
.RI "\fBcubrid_col_get\fP ($conn_identifier, $oid, $attr_name)"
.br
.ti -1c
.RI "\fBcubrid_col_size\fP ($conn_identifier, $oid, $attr_name)"
.br
.ti -1c
.RI "\fBcubrid_unbuffered_query\fP ($query, $conn_identifier=\fBnull\fP)"
.br
.ti -1c
.RI "\fBcubrid_list_dbs\fP ($conn_identifier)"
.br
.ti -1c
.RI "\fBcubrid_error\fP ($connection=\fBnull\fP)"
.br
.ti -1c
.RI "\fBcubrid_error_msg\fP ()"
.br
.ti -1c
.RI "\fBcubrid_errno\fP ($conn_identifier=\fBnull\fP)"
.br
.ti -1c
.RI "\fBcubrid_error_code\fP ()"
.br
.ti -1c
.RI "\fBcubrid_affected_rows\fP ($conn_identifier=\fBnull\fP)"
.br
.ti -1c
.RI "\fBcubrid_insert_id\fP ($conn_identifier=\fBnull\fP)"
.br
.ti -1c
.RI "\fBcubrid_result\fP ($result, $row, $field=0)"
.br
.ti -1c
.RI "\fBcubrid_num_rows\fP ($result)"
.br
.ti -1c
.RI "\fBcubrid_num_cols\fP ($result)"
.br
.ti -1c
.RI "\fBcubrid_num_fields\fP ($result)"
.br
.ti -1c
.RI "\fBcubrid_fetch\fP ($result, $type=\fBCUBRID_BOTH\fP)"
.br
.ti -1c
.RI "\fBcubrid_fetch_row\fP ($result, $type=\fBnull\fP)"
.br
.ti -1c
.RI "\fBcubrid_fetch_array\fP ($result, $type=\fBCUBRID_BOTH\fP)"
.br
.ti -1c
.RI "\fBcubrid_fetch_assoc\fP ($result, $type=\fBnull\fP)"
.br
.ti -1c
.RI "\fBcubrid_fetch_object\fP ($result, $class_name=\fBnull\fP, $params=\fBnull\fP, $type=\fBnull\fP)"
.br
.ti -1c
.RI "\fBcubrid_data_seek\fP ($result, $row_number)"
.br
.ti -1c
.RI "\fBcubrid_fetch_lengths\fP ($result)"
.br
.ti -1c
.RI "\fBcubrid_fetch_field\fP ($result, $field_offset=0)"
.br
.ti -1c
.RI "\fBcubrid_column_names\fP ($req_identifier)"
.br
.ti -1c
.RI "\fBcubrid_column_types\fP ($req_identifier)"
.br
.ti -1c
.RI "\fBcubrid_field_seek\fP ($result, $field_offset)"
.br
.ti -1c
.RI "\fBcubrid_free_result\fP ($req_identifier)"
.br
.ti -1c
.RI "\fBcubrid_field_name\fP ($result, $field_offset)"
.br
.ti -1c
.RI "\fBcubrid_field_table\fP ($result, $field_offset)"
.br
.ti -1c
.RI "\fBcubrid_field_len\fP ($result, $field_offset)"
.br
.ti -1c
.RI "\fBcubrid_field_type\fP ($result, $field_offset)"
.br
.ti -1c
.RI "\fBcubrid_field_flags\fP ($result, $field_offset)"
.br
.ti -1c
.RI "\fBcubrid_real_escape_string\fP ($unescaped_string, $conn_identifier=\fBnull\fP)"
.br
.ti -1c
.RI "\fBcubrid_client_encoding\fP ($conn_identifier=\fBnull\fP)"
.br
.ti -1c
.RI "\fBcubrid_ping\fP ($conn_identifier=\fBnull\fP)"
.br
.ti -1c
.RI "\fBcubrid_get_client_info\fP ()"
.br
.ti -1c
.RI "\fBcubrid_get_server_info\fP ($conn_identifier)"
.br
.ti -1c
.RI "\fBcubrid_get_db_parameter\fP ($conn_identifier)"
.br
.ti -1c
.RI "\fBcubrid_get_autocommit\fP ($conn_identifier)"
.br
.ti -1c
.RI "\fBcubrid_get_charset\fP ($conn_identifier)"
.br
.ti -1c
.RI "\fBcubrid_set_autocommit\fP ($conn_identifier, $mode)"
.br
.ti -1c
.RI "\fBcubrid_db_name\fP ($result, $index)"
.br
.ti -1c
.RI "\fBcubrid_db_parameter\fP ($conn_identifier)"
.br
.ti -1c
.RI "\fBcubrid_set_db_parameter\fP ($conn_identifier, $param_type, $param_value)"
.br
.ti -1c
.RI "\fBcubrid_get_query_timeout\fP ($req_identifier)"
.br
.ti -1c
.RI "\fBcubrid_set_query_timeout\fP ($req_identifier, $timeout)"
.br
.ti -1c
.RI "\fBcubrid_get_class_name\fP ($conn_identifier, $oid)"
.br
.ti -1c
.RI "\fBcubrid_get\fP ($conn_identifier, $oid, $attr=\fBnull\fP)"
.br
.ti -1c
.RI "\fBcubrid_is_instance\fP ($conn_identifier, $oid)"
.br
.ti -1c
.RI "\fBcubrid_commit\fP ($conn_identifier)"
.br
.ti -1c
.RI "\fBcubrid_rollback\fP ($conn_identifier)"
.br
.ti -1c
.RI "\fBcubrid_current_oid\fP ($req_identifier)"
.br
.ti -1c
.RI "\fBcubrid_drop\fP ($conn_identifier, $oid)"
.br
.ti -1c
.RI "\fBcubrid_error_code_facility\fP ()"
.br
.ti -1c
.RI "\fBcubrid_lob_close\fP ($lob_identifier_array)"
.br
.ti -1c
.RI "\fBcubrid_lob_export\fP ($conn_identifier, $lob_identifier, $path_name)"
.br
.ti -1c
.RI "\fBcubrid_lob_get\fP ($conn_identifier, $sql)"
.br
.ti -1c
.RI "\fBcubrid_lob_send\fP ($conn_identifier, $lob_identifier)"
.br
.ti -1c
.RI "\fBcubrid_lob_size\fP ($lob_identifier)"
.br
.ti -1c
.RI "\fBcubrid_lob2_bind\fP ($req_identifier, $bind_index, $bind_value, $bind_value_type=NULL)"
.br
.ti -1c
.RI "\fBcubrid_lob2_close\fP ($lob_identifier)"
.br
.ti -1c
.RI "\fBcubrid_lob2_export\fP ($lob_identifier, $file_name)"
.br
.ti -1c
.RI "\fBcubrid_lob2_import\fP ($lob_identifier, $file_name)"
.br
.ti -1c
.RI "\fBcubrid_lob2_new\fP ($conn_identifier=NULL, $type='BLOB')"
.br
.ti -1c
.RI "\fBcubrid_lob2_read\fP ($lob_identifier, $len)"
.br
.ti -1c
.RI "\fBcubrid_lob2_seek64\fP ($lob_identifier, $offset, $origin=\fBCUBRID_CURSOR_CURRENT\fP)"
.br
.ti -1c
.RI "\fBcubrid_lob2_seek\fP ($lob_identifier, $offset, $origin=\fBCUBRID_CURSOR_CURRENT\fP)"
.br
.ti -1c
.RI "\fBcubrid_lob2_size64\fP ($lob_identifier)"
.br
.ti -1c
.RI "\fBcubrid_lob2_size\fP ($lob_identifier)"
.br
.ti -1c
.RI "\fBcubrid_lob2_tell64\fP ($lob_identifier)"
.br
.ti -1c
.RI "\fBcubrid_lob2_tell\fP ($lob_identifier)"
.br
.ti -1c
.RI "\fBcubrid_lock_read\fP ($conn_identifier, $oid)"
.br
.ti -1c
.RI "\fBcubrid_lock_write\fP ($conn_identifier, $oid)"
.br
.ti -1c
.RI "\fBcubrid_move_cursor\fP ($req_identifier, $offset, $origin=\fBCUBRID_CURSOR_CURRENT\fP)"
.br
.ti -1c
.RI "\fBcubrid_next_result\fP ($result)"
.br
.ti -1c
.RI "\fBcubrid_prepare\fP ($conn_identifier, $prepare_stmt, $option=0)"
.br
.ti -1c
.RI "\fBcubrid_put\fP ($conn_identifier, $oid, $attr=\fBnull\fP, $value)"
.br
.ti -1c
.RI "\fBcubrid_schema\fP ($conn_identifier, $schema_type, $class_name=\fBnull\fP, $attr_name=\fBnull\fP)"
.br
.ti -1c
.RI "\fBcubrid_seq_drop\fP ($conn_identifier, $oid, $attr_name, $index)"
.br
.ti -1c
.RI "\fBcubrid_seq_insert\fP ($conn_identifier, $oid, $attr_name, $index, $seq_element)"
.br
.ti -1c
.RI "\fBcubrid_seq_put\fP ($conn_identifier, $oid, $attr_name, $index, $seq_element)"
.br
.ti -1c
.RI "\fBcubrid_seq_add\fP ($conn_identifier, $oid, $attr_name, $seq_element)"
.br
.ti -1c
.RI "\fBcubrid_set_add\fP ($conn_identifier, $oid, $attr_name, $set_element)"
.br
.ti -1c
.RI "\fBcubrid_set_drop\fP ($conn_identifier, $oid, $attr_name, $set_element)"
.br
.ti -1c
.RI "\fBcubrid_version\fP ()"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "const \fBCUBRID_NUM\fP 1"
.br
.ti -1c
.RI "const \fBCUBRID_ASSOC\fP 2"
.br
.ti -1c
.RI "const \fBCUBRID_BOTH\fP 3"
.br
.ti -1c
.RI "const \fBCUBRID_OBJECT\fP 4"
.br
.ti -1c
.RI "const \fBCUBRID_INCLUDE_OID\fP 1"
.br
.ti -1c
.RI "const \fBCUBRID_ASYNC\fP 2"
.br
.ti -1c
.RI "const \fBCUBRID_EXEC_QUERY_ALL\fP 4"
.br
.ti -1c
.RI "const \fBCUBRID_CURSOR_SUCCESS\fP 1"
.br
.ti -1c
.RI "const \fBCUBRID_NO_MORE_DATA\fP 0"
.br
.ti -1c
.RI "const \fBCUBRID_CURSOR_ERROR\fP \-1"
.br
.ti -1c
.RI "const \fBCUBRID_AUTOCOMMIT_TRUE\fP 1"
.br
.ti -1c
.RI "const \fBCUBRID_AUTOCOMMIT_FALSE\fP 0"
.br
.ti -1c
.RI "const \fBCUBRID_CURSOR_FIRST\fP 0"
.br
.ti -1c
.RI "const \fBCUBRID_CURSOR_CURRENT\fP 1"
.br
.ti -1c
.RI "const \fBCUBRID_CURSOR_LAST\fP 2"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "cubrid_affected_rows ( $conn_identifier = \fC\fBnull\fP\fP)"
(PHP 5, CUBRID >= 8\&.3\&.0)
.br
 Return the number of rows affected by the last SQL statement \fBresource $conn_identifier [optional] \fP The CUBRID connection\&. If the connection identifier is not specified, the last link opened by \fBcubrid_connect()\fP is assumed\&. 
.PP
\fBReturns\fP
.RS 4
int 
.RE
.PP
the number of affected rows on success, or -1, when SQL statement is not INSERT, DELETE or UPDATE, or FALSE, when the request identifier is not specified, and there is no last request\&. 
.SS "cubrid_bind ( $req_identifier,  $bind_index,  $bind_value,  $bind_value_type = \fC\fBnull\fP\fP)"
(PHP 5, CUBRID >= 8\&.3\&.0)
.br
 Bind variables to a prepared statement as parameters \fBresource $req_identifier \fP Request identifier as a result of \fBcubrid_prepare()\fP\&. 
.PP
\fBParameters\fP
.RS 4
\fI$bind_index\fP 
.RE
.PP
Location of binding parameters\&. It starts with 1\&. 
.PP
\fBParameters\fP
.RS 4
\fI$bind_value\fP 
.RE
.PP
Actual value for binding\&. 
.PP
\fBParameters\fP
.RS 4
\fI$bind_value_type\fP [optional] 
.RE
.PP
\fBA\fP type of the value to bind\&. (It is omitted by default\&. Thus, system internally use string by default\&. However, you need to specify the exact type of the value as an argument when they are NCHAR, BIT, or BLOB/CLOB)\&. 
.PP
The following bind types are supported: 'STRING', 'NCHAR', 'BIT', 'NUMERIC', 'NUMBER', 'FLOAT', 'DOUBLE', 'TIME', 'DATE', 'TIMESTAMP', 'OBJECT', 'BLOB', 'CLOB', 'NULL'\&. 
.PP
\fBReturns\fP
.RS 4
bool TRUE, when process is successful, otherwise FALSE\&. 
.RE
.PP

.SS "cubrid_client_encoding ( $conn_identifier = \fC\fBnull\fP\fP)"
(PHP 5, CUBRID >= 8\&.3\&.0)
.br
 Returns the current CUBRID connection charset \fBresource $conn_identifier [optional] \fP The CUBRID connection\&. If the connection identifier is not specified, the last link opened by \fBcubrid_connect()\fP is assumed\&. 
.PP
\fBReturns\fP
.RS 4
string 
.RE
.PP
\fBA\fP string that represents the CUBRID connection charset; on success\&. FALSE on failure\&. 
.SS "cubrid_close ( $conn_identifier = \fC\fBnull\fP\fP)"
(PHP 5, CUBRID >= 8\&.3\&.0)
.br
 Close CUBRID connection\&. Same as \fBcubrid_disconnect()\fP\&. \fBresource $conn_identifier [optional] \fP The CUBRID connection identifier\&. If the connection identifier is not specified, the last connection opened by \fBcubrid_connect()\fP is assumed\&. 
.PP
\fBReturns\fP
.RS 4
bool 
.RE
.PP
TRUE, when process is successful\&. FALSE, when process is unsuccessful\&. 
.SS "cubrid_close_prepare ( $req_identifier)"
(PHP 5, CUBRID >= 8\&.3\&.0)
.br
 Close the request handle\&. Same as \fBcubrid_close_request()\fP\&. \fBresource $req_identifier \fP Request identifier\&. 
.PP
\fBReturns\fP
.RS 4
bool TRUE, when process is successful, otherwise FALSE\&. 
.RE
.PP

.SS "cubrid_close_request ( $req_identifier)"
(PHP 5, CUBRID >= 8\&.3\&.0)
.br
 Close the request handle\&. Same as \fBcubrid_close_prepare()\fP\&. \fBresource $req_identifier \fP Request identifier\&. 
.PP
\fBReturns\fP
.RS 4
bool TRUE, when process is successful, or FALSE\&. 
.RE
.PP

.SS "cubrid_col_get ( $conn_identifier,  $oid,  $attr_name)"
(PHP 5, CUBRID >= 8\&.3\&.0)
.br
 Get contents of collection type column using OID \fBresource $conn_identifier \fP Connection identifier\&. 
.PP
\fBParameters\fP
.RS 4
\fI$oid\fP 
.RE
.PP
OID of the instance that you want to read\&. 
.PP
\fBParameters\fP
.RS 4
\fI$attr_name\fP 
.RE
.PP
Attribute name that you want to read from the instance\&. 
.PP
\fBReturns\fP
.RS 4
array 
.PD 0

.IP "\(bu" 2
Array (0-based numerical array) containing the elements requested, when process is successful;  
.IP "\(bu" 2
FALSE (to distinguish the error from the situation of attribute having empty collection; or NULL, in case of error, a warning message is shown; in such case you can check the error by using \fBcubrid_error_code()\fP), when process is unsuccessful\&.  
.PP
.RE
.PP

.SS "cubrid_col_size ( $conn_identifier,  $oid,  $attr_name)"
(PHP 5, CUBRID >= 8\&.3\&.0)
.br
 Get the number of elements in collection type column using OID \fBresource $conn_identifier \fP Connection identifier\&. 
.PP
\fBParameters\fP
.RS 4
\fI$oid\fP 
.RE
.PP
OID of the instance that you want to read\&. 
.PP
\fBParameters\fP
.RS 4
\fI$attr_name\fP 
.RE
.PP
Attribute name that you want to read from the instance\&. 
.PP
\fBReturns\fP
.RS 4
int 
.RE
.PP
Number of elements, when process is successful\&. FALSE, when process is unsuccessful\&. 
.SS "cubrid_column_names ( $req_identifier)"
(PHP 5, CUBRID >= 8\&.3\&.0)
.br
 Get the column names in result \fBresource $req_identifier \fP Request identifier\&. 
.PP
\fBReturns\fP
.RS 4
array 
.RE
.PP
Array of string which containing column names, when process is successful\&. FALSE, when process is unsuccessful\&. 
.SS "cubrid_column_types ( $req_identifier)"
(PHP 5, CUBRID >= 8\&.3\&.0)
.br
 Get column types in result \fBresource $req_identifier \fP Request identifier\&. 
.PP
\fBReturns\fP
.RS 4
array 
.RE
.PP
Array of string which containing column types, when process is successful\&. FALSE, when process is unsuccessful\&. 
.SS "cubrid_commit ( $conn_identifier)"
(PHP 5, CUBRID >= 8\&.3\&.0)
.br
 Commit a transaction \fBresource $conn_identifier \fP Connection identifier\&. 
.PP
\fBReturns\fP
.RS 4
bool 
.RE
.PP
TRUE, when process is successful\&. FALSE, when process is unsuccessful\&. 
.SS "cubrid_connect ( $host,  $port,  $dbname,  $userid = \fC'PUBLIC'\fP,  $passwd = \fC''\fP,  $new_link = \fCFALSE\fP)"
(PHP 5, CUBRID >= 8\&.3\&.1)
.br
 Open a connection to a CUBRID Server \fBstring $host \fP Host name or IP address of CUBRID CAS server\&. 
.PP
\fBParameters\fP
.RS 4
\fI$port\fP 
.RE
.PP
Port number of CUBRID CAS server (BROKER_PORT configured in $CUBRID/conf/cubrid_broker\&.conf)\&. 
.PP
\fBParameters\fP
.RS 4
\fI$dbname\fP 
.RE
.PP
Name of database\&. 
.PP
\fBParameters\fP
.RS 4
\fI$userid\fP [optional] 
.RE
.PP
User name for the database\&. Default value is 'PUBLIC'\&. 
.PP
\fBParameters\fP
.RS 4
\fI$passwd\fP [optional] 
.RE
.PP
User password\&. Default value is empty string, i\&.e\&. no password is defined\&. 
.PP
\fBParameters\fP
.RS 4
\fI$new_link\fP [optional] 
.RE
.PP
If a second call is made to \fBcubrid_connect()\fP with the same arguments, no new link will be established, but instead, the connection identifier of the already opened connection will be returned\&. The new_link parameter modifies this behavior and makes \fBcubrid_connect()\fP always open a new connection, even if \fBcubrid_connect()\fP was called before with the same parameters\&. 
.PP
\fBReturns\fP
.RS 4
resource 
.RE
.PP
a CUBRID connection identifier on success or false on failure\&. 
.SS "cubrid_connect_with_url ( $conn_url,  $userid = \fC'PUBLIC'\fP,  $passwd = \fC''\fP,  $new_link = \fCFALSE\fP)"
(PHP 5, CUBRID >= 8\&.3\&.1)
.br
 Establish the environment for connecting to CUBRID server\&. \fBstring $conn_url \fP \fBA\fP character string that contains server connection information\&.
.br
 Syntax: 'CUBRID:>host<:>port<:>dbname<:>username<:>password<:?>params<'\&.
.br
 E\&.g\&. \fICUBRID:127\&.0\&.0\&.1:33088:demodb:dba:123456:?autocommit=off&althost=10\&.34\&.63\&.132:33088&rctime=100\fP 
.PP
\fBParameters\fP
.RS 4
\fI$userid\fP [optional] 
.RE
.PP
User name for the database\&. Default value is 'PUBLIC'\&. 
.PP
\fBParameters\fP
.RS 4
\fI$passwd\fP [optional] 
.RE
.PP
User password\&. Default value is empty string, i\&.e\&. no password is defined\&. 
.PP
\fBParameters\fP
.RS 4
\fI$new_link\fP [optional] 
.RE
.PP
If a second call is made to \fBcubrid_connect()\fP with the same arguments, no new link will be established, but instead, the connection identifier of the already opened connection will be returned\&. The new_link parameter modifies this behavior and makes \fBcubrid_connect()\fP always open a new connection, even if \fBcubrid_connect()\fP was called before with the same parameters\&. 
.PP
\fBReturns\fP
.RS 4
resource 
.RE
.PP
a CUBRID connection identifier on success or false on failure\&. 
.SS "cubrid_current_oid ( $req_identifier)"
(PHP 5, CUBRID >= 8\&.3\&.0)
.br
 Get OID of the current cursor location \fBresource $req_identifier \fP Request identifier\&. 
.PP
\fBReturns\fP
.RS 4
string 
.RE
.PP
OID of current cursor location, when process is successful\&. FALSE, when process is unsuccessful\&. 
.SS "cubrid_data_seek ( $result,  $row_number)"
(PHP 5, CUBRID >= 8\&.3\&.0)
.br
 Move the internal row pointer of the CUBRID result \fBresource $result \fP The result\&. 
.PP
\fBParameters\fP
.RS 4
\fI$row_number\fP 
.RE
.PP
The desired row number of the new result pointer\&. 
.PP
\fBReturns\fP
.RS 4
bool 
.RE
.PP
Returns TRUE on success or FALSE on failure\&. 
.SS "cubrid_db_name ( $result,  $index)"
(PHP 5, CUBRID >= 8\&.3\&.1)
.br
 Get db name from results of cubrid_list_dbs \fBarray $result \fP The result pointer from a call to cubrid_list_dbs\&. 
.PP
\fBParameters\fP
.RS 4
\fI$index\fP 
.RE
.PP
The index into the result set\&. 
.PP
\fBReturns\fP
.RS 4
string 
.RE
.PP
the database name on success, and false on failure\&. If false is returned, use \fBcubrid_error()\fP to determine the nature of the error\&. 
.SS "cubrid_db_parameter ( $conn_identifier)"
(PHP 5, CUBRID >= 8\&.3\&.1)
.br
 Get result data \fBresource $conn_identifier \fP The CUBRID connection\&. If the connection identifier is not specified, the last link opened by \fBcubrid_connect()\fP is assumed\&. 
.PP
\fBReturns\fP
.RS 4
array 
.RE
.PP
An associative array with CUBRID database parameters; on success\&. FALSE on failure\&. 
.SS "cubrid_disconnect ( $conn_identifier = \fC\fBnull\fP\fP)"
(PHP 5, CUBRID >= 8\&.3\&.0)
.br
 Close CUBRID connection\&. Same as \fBcubrid_close()\fP\&. \fBresource $conn_identifier [optional] \fP Connection identifier\&. 
.PP
\fBReturns\fP
.RS 4
bool Returns true on success or false on failure\&. 
.RE
.PP

.SS "cubrid_drop ( $conn_identifier,  $oid)"
(PHP 5, CUBRID >= 8\&.3\&.0)
.br
 Delete an instance using OID \fBresource $conn_identifier \fP Connection identifier\&. 
.PP
\fBParameters\fP
.RS 4
\fI$oid\fP 
.RE
.PP
OID of the instance that you want to delete\&. 
.PP
\fBReturns\fP
.RS 4
bool 
.RE
.PP
TRUE, when process is successful\&. FALSE, when process is unsuccessful\&. 
.SS "cubrid_errno ( $conn_identifier = \fC\fBnull\fP\fP)"
(PHP 5, CUBRID >= 8\&.3\&.1)
.br
 Returns the numerical value of the error message from previous CUBRID operation\&. Same as \fBcubrid_error_code()\fP; \fBresource $conn_identifier [optional] \fP The CUBRID connection identifier\&. If the connection identifier is not specified, the last connection opened by \fBcubrid_connect()\fP is assumed\&. 
.PP
\fBReturns\fP
.RS 4
int 
.RE
.PP
the error number from the last CUBRID function, or 0 (zero) if no error occurred\&. 
.SS "cubrid_error ( $connection = \fC\fBnull\fP\fP)"
(PHP 5, CUBRID >= 8\&.3\&.1)
.br
 Get the error message\&. Same as \fBcubrid_error_msg()\fP; \fBresource $connection [optional] \fP The CUBRID connection\&. 
.PP
\fBReturns\fP
.RS 4
string 
.RE
.PP
\fBError\fP message that occurred\&. 
.SS "cubrid_error_code ()"
(PHP 5, CUBRID >= 8\&.3\&.0)
.br
 Get error code for the most recent function call\&. Same as \fBcubrid_errno()\fP; \fBint \fP \fBError\fP code of the error that occurred, or 0 (zero) if no error occurred\&. 
.SS "cubrid_error_code_facility ()"
(PHP 5, CUBRID >= 8\&.3\&.0)
.br
 Get the facility code of error \fBint \fP Facility code of the error code that occurred: CUBRID_FACILITY_DBMS, CUBRID_FACILITY_CAS, CUBRID_FACILITY_CCI, CUBRID_FACILITY_CLIENT 
.SS "cubrid_error_msg ()"
(PHP 5, CUBRID >= 8\&.3\&.0)
.br
 Get last error message for the most recent function call\&. Same as \fBcubrid_error()\fP; \fBstring \fP \fBError\fP message that occurred\&. 
.SS "cubrid_execute ( $conn_identifier,  $sql,  $option = \fC\fBnull\fP\fP)"
(PHP 5, CUBRID >= 8\&.3\&.0)
.br
 Execute a prepared SQL statement \fBresource $conn_identifier \fP Connection identifier\&. 
.PP
\fBParameters\fP
.RS 4
\fI$sql\fP 
.RE
.PP
SQL to be executed\&. 
.PP
\fBParameters\fP
.RS 4
\fI$option\fP [optional] 
.RE
.PP
Query execution option CUBRID_INCLUDE_OID, CUBRID_ASYNC, CUBRID_EXEC_QUERY_ALL\&. 
.PP
\fBReturns\fP
.RS 4
resource 
.RE
.PP
Request identifier, when process is successful, or FALSE, when process is unsuccessful\&. 
.SS "cubrid_execute ( $request_identifier,  $option = \fC\fBnull\fP\fP)"
(PHP 5, CUBRID >= 8\&.3\&.0)
.br
 Execute a prepared SQL statement \fBresource $request_identifier \fP \fBcubrid_prepare()\fP identifier\&. 
.PP
\fBParameters\fP
.RS 4
\fI$option\fP [optional] 
.RE
.PP
Query execution option CUBRID_INCLUDE_OID, CUBRID_ASYNC, CUBRID_EXEC_QUERY_ALL\&. 
.PP
\fBReturns\fP
.RS 4
bool 
.RE
.PP
TRUE, when process is successful\&. FALSE, when process is unsuccessful\&. 
.SS "cubrid_fetch ( $result,  $type = \fC\fBCUBRID_BOTH\fP\fP)"
(PHP 5, CUBRID >= 8\&.3\&.0)
.br
 Fetch the next row from a result set \fBresource $result \fP result comes from a call to \fBcubrid_execute()\fP 
.PP
\fBParameters\fP
.RS 4
\fI$type\fP [optional] 
.RE
.PP
Array type of the fetched result CUBRID_NUM, CUBRID_ASSOC, CUBRID_BOTH, CUBRID_OBJECT\&. If you want to operate the lob object, you can use CUBRID_LOB\&. 
.PP
\fBReturns\fP
.RS 4
mixed 
.PD 0

.IP "\(bu" 2
array or object, when process is successful\&. 
.IP "\(bu" 2
FALSE, when there are no more rows; 
.IP "\(bu" 2
NULL, when process is unsuccessful\&. 
.PP
.RE
.PP
The result can be received either as an array or as an object, and you can decide which data type to use by setting the type argument\&. The type variable can be set to one of the following values: 
.PP
.PD 0
.IP "\(bu" 2
CUBRID_NUM : Numerical array (0-based) 
.IP "\(bu" 2
CUBRID_ASSOC : Associative array 
.IP "\(bu" 2
CUBRID_BOTH : Numerical & Associative array (default) 
.IP "\(bu" 2
CUBRID_OBJECT : object that has the attribute name as the column name of query result 
.PP
.PP
When type argument is omitted, the result will be received using CUBRID_BOTH option as default\&. When you want to receive query result in object data type, the column name of the result must obey the naming rules for identifiers in PHP\&. For example, column name such as 'count(*)' cannot be received in object type\&. 
.SS "cubrid_fetch_array ( $result,  $type = \fC\fBCUBRID_BOTH\fP\fP)"
(PHP 5, CUBRID >= 8\&.3\&.0)
.br
 Fetch a result row as an associative array, a numeric array, or both \fBresource $result  int $type [optional] \fP The type of array that is to be fetched\&. It's a constant and can take the following values: CUBRID_ASSOC, CUBRID_NUM, and CUBRID_BOTH\&. 
.PP
\fBReturns\fP
.RS 4
array 
.RE
.PP
Returns an array of strings that corresponds to the fetched row, when process is successful\&. FALSE, when there are no more rows; NULL, when process is unsuccessful\&. 
.PP
The type of returned array depends on how result_type is defined\&. By using CUBRID_BOTH (default), you'll get an array with both associative and number indices, and you can decide which data type to use by setting the type argument\&. The type variable can be set to one of the following values: 
.PP
.PD 0
.IP "\(bu" 2
CUBRID_NUM : Numerical array (0-based) 
.IP "\(bu" 2
CUBRID_ASSOC : Associative array 
.IP "\(bu" 2
CUBRID_BOTH : Numerical & Associative array (default) 
.PP

.SS "cubrid_fetch_assoc ( $result,  $type = \fC\fBnull\fP\fP)"
(PHP 5, CUBRID >= 8\&.3\&.0)
.br
 Return the associative array that corresponds to the fetched row \fBresource $result \fP result comes from a call to \fBcubrid_execute()\fP 
.PP
\fBParameters\fP
.RS 4
\fI$type\fP [optional] 
.RE
.PP
Type can only be CUBRID_LOB, this parameter will be used only when you need to operate the lob object\&. 
.PP
\fBReturns\fP
.RS 4
array 
.RE
.PP
Associative array, when process is successful\&. FALSE, when there are no more rows; NULL, when process is unsuccessful\&. 
.SS "cubrid_fetch_field ( $result,  $field_offset = \fC0\fP)"
(PHP 5, CUBRID >= 8\&.3\&.1)
.br
 Get column information from a result and return as an object \fBresource $result \fP result comes from a call to \fBcubrid_execute()\fP 
.PP
\fBParameters\fP
.RS 4
\fI$field_offset\fP [optional] 
.RE
.PP
The numerical field offset\&. If the field offset is not specified, the next field that was not yet retrieved by this function is retrieved\&. The field_offset starts at 0\&. 
.PP
\fBReturns\fP
.RS 4
object 
.RE
.PP
an object containing field information\&. The properties of the object are: 
.PP
.PD 0
.IP "\(bu" 2
name - column name 
.IP "\(bu" 2
table - name of the table the column belongs to 
.IP "\(bu" 2
def - default value of the column 
.IP "\(bu" 2
max_length - maximum length of the column 
.IP "\(bu" 2
not_null - 1 if the column cannot be NULL 
.IP "\(bu" 2
primary_key - 1 if the column is a primary key 
.IP "\(bu" 2
unique_key - 1 if the column is a unique key 
.IP "\(bu" 2
multiple_key - 1 if the column is a non-unique key 
.IP "\(bu" 2
numeric - 1 if the column is numeric 
.IP "\(bu" 2
blob - 1 if the column is a BLOB 
.IP "\(bu" 2
type - the type of the column 
.IP "\(bu" 2
unsigned - 1 if the column is unsigned 
.IP "\(bu" 2
zerofill - 1 if the column is zero-filled 
.PP

.SS "cubrid_fetch_lengths ( $result)"
(PHP 5, CUBRID >= 8\&.3\&.0)
.br
 Return an array with the lengths of the values of each field from the current row \fBresource $result \fP result comes from a call to \fBcubrid_execute()\fP 
.PP
\fBReturns\fP
.RS 4
array 
.RE
.PP
\fBA\fP numerical array of lengths on success, or false on failure\&. 
.SS "cubrid_fetch_object ( $result,  $class_name = \fC\fBnull\fP\fP,  $params = \fC\fBnull\fP\fP,  $type = \fC\fBnull\fP\fP)"
(PHP 5, CUBRID >= 8\&.3\&.0)
.br
 Fetch the next row and returns it as an object \fBresource $result \fP result comes from a call to \fBcubrid_execute()\fP 
.PP
\fBParameters\fP
.RS 4
\fI$class_name\fP [optional] 
.RE
.PP
The name of the class to instantiate\&. If not specified, a \fBstdClass\fP (\fBstdClass\fP is PHP's generic empty class that's used when casting other types to objects) object is returned\&. 
.PP
\fBParameters\fP
.RS 4
\fI$params\fP [optional] 
.RE
.PP
An optional array of parameters to pass to the constructor for class_name objects\&. 
.PP
\fBParameters\fP
.RS 4
\fI$type\fP [optional] 
.RE
.PP
Type can only be CUBRID_LOB, this parameter will be used only when you need to operate the lob object\&. 
.PP
\fBReturns\fP
.RS 4
object 
.RE
.PP
an object with string properties that correspond to the fetched row, or false if there are no more rows, or NULL, when process is unsuccessful\&. 
.SS "cubrid_fetch_row ( $result,  $type = \fC\fBnull\fP\fP)"
(PHP 5, CUBRID >= 8\&.3\&.0)
.br
 Return a numerical array with the values of the current row \fBresource $result \fP result comes from a call to \fBcubrid_execute()\fP 
.PP
\fBParameters\fP
.RS 4
\fI$type\fP 
.RE
.PP
Type can only be CUBRID_LOB, this parameter will be used only when you need to operate the lob object\&. 
.PP
\fBReturns\fP
.RS 4
array 
.RE
.PP
\fBA\fP numerical array, when process is successful\&. FALSE, when there are no more rows; NULL, when process is unsuccessful\&. 
.SS "cubrid_field_flags ( $result,  $field_offset)"
(PHP 5, CUBRID >= 8\&.3\&.0)
.br
 Return a string with the flags of the given field offset \fBresource $result \fP result comes from a call to \fBcubrid_execute()\fP 
.PP
\fBParameters\fP
.RS 4
\fI$field_offset\fP 
.RE
.PP
The numerical field offset\&. The field_offset starts at 0\&. If field_offset does not exist, an error of level E_WARNING is also issued\&. 
.PP
\fBReturns\fP
.RS 4
string 
.RE
.PP
a string of flags associated with the result, or FALSE when invalid field_offset value, or -1 if SQL sentence is not SELECT\&. 
.PP
The following flags are reported, if your version of CUBRID is current enough to support them: 'not_null', 'primary_key', 'unique_key', 'foreign_key', 'auto_increment', 'shared', 'reverse_index', 'reverse_unique', and 'timestamp'\&. 
.SS "cubrid_field_len ( $result,  $field_offset)"
(PHP 5, CUBRID >= 8\&.3\&.0)
.br
 Returns the length of the specified field \fBresource $result \fP result comes from a call to \fBcubrid_execute()\fP 
.PP
\fBParameters\fP
.RS 4
\fI$field_offset\fP 
.RE
.PP
The field_offset starts at 0\&. If field_offset does not exist, an error of level E_WARNING is also issued\&. 
.PP
\fBReturns\fP
.RS 4
int 
.RE
.PP
Maximum length, when process is successful\&. FALSE on failure\&. 
.SS "cubrid_field_name ( $result,  $field_offset)"
(PHP 5, CUBRID >= 8\&.3\&.0)
.br
 Return the name of the specified field index \fBresource $result \fP result comes from a call to \fBcubrid_execute()\fP 
.PP
\fBParameters\fP
.RS 4
\fI$field_offset\fP 
.RE
.PP
The field_offset starts at 0\&. If field_offset does not exist, an error of level E_WARNING is also issued\&. 
.PP
\fBReturns\fP
.RS 4
string 
.RE
.PP
The name of the specified field index on success or false on failure\&. 
.SS "cubrid_field_seek ( $result,  $field_offset)"
(PHP 5, CUBRID >= 8\&.3\&.0)
.br
 Move the result set cursor to a specified field offset \fBresource $result \fP result comes from a call to \fBcubrid_execute()\fP 
.PP
\fBParameters\fP
.RS 4
\fI$field_offset\fP 
.RE
.PP
The numerical field offset\&. The field_offset starts at 0\&. If field_offset does not exist, an error of level E_WARNING is also issued\&. 
.PP
\fBReturns\fP
.RS 4
bool 
.RE
.PP
Returns true on success or false on failure\&. 
.SS "cubrid_field_table ( $result,  $field_offset)"
(PHP 5, CUBRID >= 8\&.3\&.0)
.br
 Return the name of the table of the specified field \fBresource $result \fP result comes from a call to \fBcubrid_execute()\fP 
.PP
\fBParameters\fP
.RS 4
\fI$field_offset\fP 
.RE
.PP
The field_offset starts at 0\&. If field_offset does not exist, an error of level E_WARNING is also issued\&. 
.PP
\fBReturns\fP
.RS 4
string 
.RE
.PP
The name of the table on success, FALSE when field_offset value is invalid, or -1 if SQL sentence is not SELECT\&. 
.SS "cubrid_field_type ( $result,  $field_offset)"
(PHP 5, CUBRID >= 8\&.3\&.0)
.br
 Return the type of the column corresponding to the given field offset \fBresource $result \fP result comes from a call to \fBcubrid_execute()\fP 
.PP
\fBParameters\fP
.RS 4
\fI$field_offset\fP 
.RE
.PP
The field_offset starts at 0\&. If field_offset does not exist, an error of level E_WARNING is also issued\&. 
.PP
\fBReturns\fP
.RS 4
string 
.RE
.PP
On success the returned field type will be one of 'int', 'real', 'string', 'blob', and others as detailed in the CUBRID documentation\&. Otherwise, FALSE when invalid field_offset value, or -1 if SQL sentence is not SELECT\&. 
.SS "cubrid_free_result ( $req_identifier)"
(PHP 5, CUBRID >= 8\&.3\&.0)
.br
 Free the memory occupied by the result data \fBresource $req_identifier \fP Request identifier\&. 
.PP
\fBReturns\fP
.RS 4
bool 
.RE
.PP
Returns true on success or false on failure\&. 
.PP
Note that it can only free the client fetch buffer now, and if you want to free all the memory, use function \fBcubrid_close_request()\fP\&. 
.SS "cubrid_get ( $conn_identifier,  $oid,  $attr = \fC\fBnull\fP\fP)"
(PHP 5, CUBRID >= 8\&.3\&.0)
.br
 Get a column using OID \fBresource $conn_identifier \fP Connection identifier\&. 
.PP
\fBParameters\fP
.RS 4
\fI$oid\fP 
.RE
.PP
OID of the instance that you want to read\&. To get the current OID of the request, use \fBcubrid_current_oid()\fP function\&. 
.PP
\fBParameters\fP
.RS 4
\fI$attr\fP [optional] 
.RE
.PP
Name of the attribute that you want to read\&. 
.PP
\fBReturns\fP
.RS 4
mixed 
.RE
.PP
Content of the requested attribute, when process is successful; When attr is set with string data type, the result is returned as a string; when attr is set with array data type (0-based numerical array), then the result is returned in associative array\&. When attr is omitted, then all attributes are received in array form\&. 
.PP
FALSE when process is unsuccessful or result is NULL (If error occurs to distinguish empty string from NULL, then it prints the warning message\&. You can check the error by using \fBcubrid_error_code()\fP)\&. 
.SS "cubrid_get_autocommit ( $conn_identifier)"
(PHP 5, CUBRID >= 8\&.4\&.0)
.br
 Get auto-commit mode of the connection \fBresource $conn_identifier \fP Connection identifier\&. 
.PP
\fBReturns\fP
.RS 4
bool 
.RE
.PP
TRUE, if autocommit is set to true\&. FALSE otherwise\&. NULL on error\&. 
.SS "cubrid_get_charset ( $conn_identifier)"
(PHP 5, CUBRID >= 8\&.3\&.0)
.br
 Return the current CUBRID connection charset \fBresource $conn_identifier \fP Connection identifier\&. 
.PP
\fBReturns\fP
.RS 4
string 
.RE
.PP
\fBA\fP string that represents the CUBRID connection charset; on success\&. FALSE on failure\&. 
.SS "cubrid_get_class_name ( $conn_identifier,  $oid)"
(PHP 5, CUBRID >= 8\&.3\&.0)
.br
 Get the class name using OID \fBresource $conn_identifier \fP Connection identifier\&. 
.PP
\fBParameters\fP
.RS 4
\fI$oid\fP 
.RE
.PP
OID of the instance that you want to check the existence\&. To get the current OID of the request, use \fBcubrid_current_oid()\fP function\&. 
.PP
\fBReturns\fP
.RS 4
string 
.RE
.PP
Class name when process is successful\&. FALSE, when process is unsuccessful\&. 
.SS "cubrid_get_client_info ()"
(PHP 5, CUBRID >= 8\&.3\&.0)
.br
 Return the client library version \fBstring \fP \fBA\fP string that represents the client library version; on success\&. FALSE on failure\&. 
.SS "cubrid_get_db_parameter ( $conn_identifier)"
(PHP 5, CUBRID >= 8\&.3\&.0)
.br
 Returns the CUBRID database parameters \fBresource $conn_identifier \fP Connection identifier\&. 
.PP
\fBReturns\fP
.RS 4
array 
.RE
.PP
An associative array with CUBRID database parameters; on success\&. FALSE on failure\&. 
.SS "cubrid_get_query_timeout ( $req_identifier)"
(PHP 5, CUBRID >= 8\&.4\&.1)
.br
 Get the query timeout value of the request \fBresource $req_identifier \fP Request identifier\&. 
.PP
\fBReturns\fP
.RS 4
int 
.RE
.PP
\fBSuccess\fP: the query timeout value of the current request\&. Units of msec\&. \fBFailure\fP: FALSE 
.SS "cubrid_get_server_info ( $conn_identifier)"
(PHP 5, CUBRID >= 8\&.3\&.0)
.br
 Return the CUBRID server version \fBresource $conn_identifier  string \fP \fBA\fP string that represents the CUBRID server version; on success\&. FALSE on failure\&. 
.SS "cubrid_insert_id ( $conn_identifier = \fC\fBnull\fP\fP)"
(PHP 5, CUBRID >= 8\&.3\&.0)
.br
 Return the ID generated for the latest updated AUTO_INCREMENT column \fBresource $conn_identifier [optional] \fP The connection identifier previously obtained by a call to \fBcubrid_connect()\fP\&. 
.PP
\fBReturns\fP
.RS 4
string 
.RE
.PP
\fBA\fP string representing the ID generated for an AUTO_INCREMENT column by the previous query, on success\&. 0, if the previous query does not generate new rows\&. FALSE on failure\&. 
.SS "cubrid_is_instance ( $conn_identifier,  $oid)"
(PHP 5, CUBRID >= 8\&.3\&.0)
.br
 Check whether the instance pointed by OID exists \fBresource $conn_identifier \fP Connection identifier\&. 
.PP
\fBParameters\fP
.RS 4
\fI$oid\fP 
.RE
.PP
OID of the instance that you want to check the existence\&. To get the current OID of the request, use \fBcubrid_current_oid()\fP function\&. 
.PP
\fBReturns\fP
.RS 4
int 
.RE
.PP
1, if such instance exists; 0, if such instance does not exist; -1, in case of error 
.SS "cubrid_list_dbs ( $conn_identifier)"
(PHP 5, CUBRID >= 8\&.3\&.0)
.br
 Return an array with the list of all existing CUBRID databases \fBresource $conn_identifier [optional] \fP The CUBRID connection\&. 
.PP
\fBReturns\fP
.RS 4
array 
.RE
.PP
a numeric array with all existing CUBRID databases on success, or false on failure\&. 
.SS "cubrid_lob2_bind ( $req_identifier,  $bind_index,  $bind_value,  $bind_value_type = \fCNULL\fP)"
(PHP 5, CUBRID >= 8\&.4\&.1)
.br
 Bind a lob object or a string as a lob object to a prepared statement as parameters\&. \fBresource $req_identifier \fP Reqeust identifier\&. 
.PP
\fBParameters\fP
.RS 4
\fI$bind_index\fP 
.RE
.PP
Location of binding parameters\&. It starts with 1\&. 
.PP
\fBParameters\fP
.RS 4
\fI$bind_value\fP 
.RE
.PP
Actual value for binding\&. 
.PP
\fBParameters\fP
.RS 4
\fI$bind_value_type\fP [optional] 
.RE
.PP
It must be 'BLOB' or 'CLOB' and it won't be case-sensitive\&. If it not be given, the default value is 'BLOB'\&. 
.PP
\fBReturns\fP
.RS 4
bool 
.RE
.PP
TRUE, when process is successful\&. FALSE, when process is unsuccessful\&. 
.SS "cubrid_lob2_close ( $lob_identifier)"
(PHP 5, CUBRID >= 8\&.4\&.1)
.br
 Close BLOB/CLOB data \fBresource $lob_identifier \fP Lob identifier as a result of \fBcubrid_lob2_new()\fP or get from the result set\&. 
.PP
\fBReturns\fP
.RS 4
bool 
.RE
.PP
TRUE, on success\&. FALSE, on failure\&. 
.SS "cubrid_lob2_export ( $lob_identifier,  $file_name)"
(PHP 5, CUBRID >= 8\&.4\&.1)
.br
 Export the lob object to a file\&. \fBresource $lob_identifier \fP Lob identifier as a result of \fBcubrid_lob2_new()\fP or get from the result set\&. 
.PP
\fBParameters\fP
.RS 4
\fI$file_name\fP 
.RE
.PP
File name you want to store BLOB/CLOB data\&. It also supports the path of the file\&. 
.PP
\fBReturns\fP
.RS 4
bool 
.RE
.PP
TRUE if the process is successful and FALSE for failure\&. 
.SS "cubrid_lob2_import ( $lob_identifier,  $file_name)"
(PHP 5, CUBRID >= 8\&.4\&.1)
.br
 Import the lob object from a file\&. \fBresource $lob_identifier \fP Lob identifier as a result of \fBcubrid_lob2_new()\fP or get from the result set\&. 
.PP
\fBParameters\fP
.RS 4
\fI$file_name\fP 
.RE
.PP
File name you want to import BLOB/CLOB data\&. It also supports the path of the file\&. 
.PP
\fBReturns\fP
.RS 4
bool 
.RE
.PP
TRUE if the process is successful and FALSE for failure\&. 
.SS "cubrid_lob2_new ( $conn_identifier = \fCNULL\fP,  $type = \fC'BLOB'\fP)"
(PHP 5, CUBRID >= 8\&.4\&.1)
.br
 Create a lob object\&. \fBresource $conn_identifier [optional] \fP Connection identifier\&. If the connection identifier is not specified, the last connection opened by \fBcubrid_connect()\fP or \fBcubrid_connect_with_url()\fP is assumed\&. 
.PP
\fBParameters\fP
.RS 4
\fI$type\fP [optional] 
.RE
.PP
It may be 'BLOB' or 'CLOB', it won't be case-sensitive\&. The default value is 'BLOB'\&. 
.PP
\fBReturns\fP
.RS 4
resource 
.RE
.PP
Lob identifier when it is successful\&. FALSE on failure\&. 
.SS "cubrid_lob2_read ( $lob_identifier,  $len)"
(PHP 5, CUBRID >= 8\&.4\&.1)
.br
 Read from BLOB/CLOB data\&. \fBresource $lob_identifier \fP Lob identifier as a result of \fBcubrid_lob2_new()\fP or get from the result set\&. 
.PP
\fBParameters\fP
.RS 4
\fI$len\fP 
.RE
.PP
Length from buffer you want to read from the lob data\&. 
.PP
\fBReturns\fP
.RS 4
string 
.RE
.PP
Returns the contents as a string\&. FALSE when there is no more data\&. NULL on failure\&. 
.SS "cubrid_lob2_seek ( $lob_identifier,  $offset,  $origin = \fC\fBCUBRID_CURSOR_CURRENT\fP\fP)"
(PHP 5, CUBRID >= 8\&.4\&.1)
.br
 Move the cursor of a lob object\&. \fBresource $lob_identifier \fP Lob identifier as a result of \fBcubrid_lob2_new()\fP or get from the result set\&. 
.PP
\fBParameters\fP
.RS 4
\fI$offset\fP 
.RE
.PP
Number of units you want to move the cursor\&. 
.PP
\fBParameters\fP
.RS 4
\fI$origin\fP [optional] 
.RE
.PP
This parameter can be the following values: 
.PP
.PD 0
.IP "\(bu" 2
CUBRID_CURSOR_FIRST: move forward from the first beginning\&. 
.IP "\(bu" 2
CUBRID_CURSOR_CURRENT: move forward or backward from the current position\&. 
.IP "\(bu" 2
CUBRID_CURSOR_LAST: move backward at the end of LOB object\&. 
.PP
\fBReturns\fP
.RS 4
bool 
.RE
.PP
TRUE if the process is successful and FALSE for failure\&. 
.SS "cubrid_lob2_seek64 ( $lob_identifier,  $offset,  $origin = \fC\fBCUBRID_CURSOR_CURRENT\fP\fP)"
(PHP 5, CUBRID >= 8\&.4\&.1)
.br
 Move the cursor of a lob object\&. \fBresource $lob_identifier \fP Lob identifier as a result of \fBcubrid_lob2_new()\fP or get from the result set\&. 
.PP
\fBParameters\fP
.RS 4
\fI$offset\fP 
.RE
.PP
Number of units you want to move the cursor\&. 
.PP
\fBParameters\fP
.RS 4
\fI$origin\fP [optional] 
.RE
.PP
This parameter can be the following values: 
.PP
.PD 0
.IP "\(bu" 2
CUBRID_CURSOR_FIRST: move forward from the first beginning\&. 
.IP "\(bu" 2
CUBRID_CURSOR_CURRENT: move forward or backward from the current position\&. 
.IP "\(bu" 2
CUBRID_CURSOR_LAST: move backward at the end of LOB object\&. 
.PP
\fBReturns\fP
.RS 4
bool 
.RE
.PP
TRUE if the process is successful and FALSE for failure\&. 
.SS "cubrid_lob2_size ( $lob_identifier)"
(PHP 5, CUBRID >= 8\&.4\&.1)
.br
 Get a lob object's size\&. \fBresource $lob_identifier \fP Lob identifier as a result of \fBcubrid_lob2_new()\fP or get from the result set\&. 
.PP
\fBReturns\fP
.RS 4
int 
.RE
.PP
It will return the size of the LOB object as a string when it processes successfully\&. FALSE on failure\&. 
.SS "cubrid_lob2_size64 ( $lob_identifier)"
(PHP 5, CUBRID >= 8\&.4\&.1)
.br
 Get a lob object's size\&. \fBresource $lob_identifier \fP Lob identifier as a result of \fBcubrid_lob2_new()\fP or get from the result set\&. 
.PP
\fBReturns\fP
.RS 4
string 
.RE
.PP
It will return the size of the LOB object as a string when it processes successfully\&. FALSE on failure\&. 
.SS "cubrid_lob2_tell ( $lob_identifier)"
(PHP 5, CUBRID >= 8\&.4\&.1)
.br
 Tell the cursor position of the LOB object\&. \fBresource $lob_identifier \fP Lob identifier as a result of \fBcubrid_lob2_new()\fP or get from the result set\&. 
.PP
\fBReturns\fP
.RS 4
int 
.RE
.PP
It will return the cursor position on the LOB object as a string when it processes successfully\&. FALSE on failure\&. 
.SS "cubrid_lob2_tell64 ( $lob_identifier)"
(PHP 5, CUBRID >= 8\&.4\&.1)
.br
 Tell the cursor position of the LOB object\&. \fBresource $lob_identifier \fP Lob identifier as a result of \fBcubrid_lob2_new()\fP or get from the result set\&. 
.PP
\fBReturns\fP
.RS 4
string 
.RE
.PP
It will return the cursor position on the LOB object as a string when it processes successfully\&. FALSE on failure\&. 
.SS "cubrid_lob_close ( $lob_identifier_array)"
(PHP 5, CUBRID >= 8\&.3\&.1)
.br
 Close BLOB/CLOB data \fBarray $lob_identifier_array \fP LOB identifier array return from \fBcubrid_lob_get()\fP\&. 
.PP
\fBReturns\fP
.RS 4
bool 
.RE
.PP
TRUE, when process is successful\&. FALSE, when process is unsuccessful\&. 
.SS "cubrid_lob_export ( $conn_identifier,  $lob_identifier,  $path_name)"
(PHP 5, CUBRID >= 8\&.3\&.1)
.br
 Export BLOB/CLOB data to file \fBresource $conn_identifier \fP Connection identifier\&. 
.PP
\fBParameters\fP
.RS 4
\fI$lob_identifier\fP 
.RE
.PP
LOB identifier\&. 
.PP
\fBParameters\fP
.RS 4
\fI$path_name\fP 
.RE
.PP
Path name of the file\&. 
.PP
\fBReturns\fP
.RS 4
bool 
.RE
.PP
TRUE, when process is successful\&. FALSE, when process is unsuccessful\&. 
.SS "cubrid_lob_get ( $conn_identifier,  $sql)"
(PHP 5, CUBRID >= 8\&.3\&.1)
.br
 \fBcubrid_lob_get()\fP is used to get BLOB/CLOB meta info from CUBRID database\&. CUBRID gets BLOB/CLOB by executing the SQL statement, and returns all LOBs as a resource array\&. Be sure that the SQL retrieves only one column and its data type is BLOB or CLOB\&. Remember to use \fBcubrid_lob_close()\fP to release the LOBs if you don't need it any more\&. \fBresource $conn_identifier \fP Connection identifier\&. 
.PP
\fBParameters\fP
.RS 4
\fI$sql\fP 
.RE
.PP
SQL statement to be executed\&. 
.PP
\fBReturns\fP
.RS 4
array 
.RE
.PP
Return an array of LOB resources, when process is successful\&. FALSE, when process is unsuccessful\&. 
.SS "cubrid_lob_send ( $conn_identifier,  $lob_identifier)"
(PHP 5, CUBRID >= 8\&.3\&.1)
.br
 Read BLOB/CLOB data and send straight to browser \fBresource $conn_identifier \fP Connection identifier\&. 
.PP
\fBParameters\fP
.RS 4
\fI$lob_identifier\fP 
.RE
.PP
LOB identifier\&. 
.PP
\fBReturns\fP
.RS 4
bool 
.RE
.PP
TRUE, when process is successful\&. FALSE, when process is unsuccessful\&. 
.SS "cubrid_lob_size ( $lob_identifier)"
(PHP 5, CUBRID >= 8\&.3\&.1)
.br
 Get BLOB/CLOB data size \fBresource $lob_identifier \fP LOB identifier\&. 
.PP
\fBReturns\fP
.RS 4
string 
.RE
.PP
\fBA\fP string representing LOB data size, when process is successful\&. FALSE, when process is unsuccessful\&. 
.SS "cubrid_lock_read ( $conn_identifier,  $oid)"
(PHP 5, CUBRID >= 8\&.3\&.0)
.br
 Set a read lock on the given OID \fBresource $conn_identifier \fP Connection identifier\&. 
.PP
\fBParameters\fP
.RS 4
\fI$oid\fP 
.RE
.PP
OID of the instance that you want to put read lock on\&. 
.PP
\fBReturns\fP
.RS 4
bool 
.RE
.PP
TRUE, when process is successful\&. FALSE, when process is unsuccessful\&. 
.SS "cubrid_lock_write ( $conn_identifier,  $oid)"
(PHP 5, CUBRID >= 8\&.3\&.0)
.br
 Set a write lock on the given OID \fBresource $conn_identifier \fP Connection identifier\&. 
.PP
\fBParameters\fP
.RS 4
\fI$oid\fP 
.RE
.PP
OID of the instance that you want to put write lock on\&. 
.PP
\fBReturns\fP
.RS 4
bool 
.RE
.PP
TRUE, when process is successful\&. FALSE, when process is unsuccessful\&. 
.SS "cubrid_move_cursor ( $req_identifier,  $offset,  $origin = \fC\fBCUBRID_CURSOR_CURRENT\fP\fP)"
(PHP 5, CUBRID >= 8\&.3\&.0)
.br
 Move the cursor in the result \fBresource $req_identifier \fP Request identifier\&. 
.PP
\fBParameters\fP
.RS 4
\fI$offset\fP 
.RE
.PP
Number of units you want to move the cursor\&. 
.PP
\fBParameters\fP
.RS 4
\fI$origin\fP [optional] 
.RE
.PP
Location where you want to move the cursor from CUBRID_CURSOR_FIRST, CUBRID_CURSOR_CURRENT, CUBRID_CURSOR_LAST\&. 
.PP
\fBReturns\fP
.RS 4
int 
.RE
.PP
CUBRID_CURSOR_SUCCESS, when process is successful\&. CUBRID_NO_MORE_DATA, when it is not a valid cursor location\&. CUBRID_CURSOR_ERROR, in case of error\&. 
.SS "cubrid_next_result ( $result)"
(PHP 5, CUBRID >= 8\&.4\&.0)
.br
 Get result of next query when executing multiple SQL statements \fBresource $result \fP result comes from a call to \fBcubrid_execute()\fP\&. 
.PP
\fBReturns\fP
.RS 4
bool 
.RE
.PP
TRUE, when process is successful\&. FALSE, when process is unsuccessful\&. 
.SS "cubrid_num_cols ( $result)"
(PHP 5, CUBRID >= 8\&.3\&.0)
.br
 Get number of columns in the result set \fBresource $result \fP Result\&. 
.PP
\fBReturns\fP
.RS 4
int 
.RE
.PP
Number of columns, when process is successful\&. FALSE, if SQL statement is not SELECT\&. 
.SS "cubrid_num_fields ( $result)"
(PHP 5, CUBRID >= 8\&.3\&.0)
.br
 Get number of fields in the result set \fBresource $result \fP result comes from a call to \fBcubrid_execute()\fP, \fBcubrid_query()\fP and \fBcubrid_prepare()\fP 
.PP
\fBReturns\fP
.RS 4
int 
.RE
.PP
Number of columns, on success\&. -1 if SQL sentence is not SELECT\&. FALSE when process is unsuccessful\&. 
.SS "cubrid_num_rows ( $result)"
(PHP 5, CUBRID >= 8\&.3\&.0)
.br
 Get number of rows in result \fBresource $result \fP result comes from a call to \fBcubrid_execute()\fP, \fBcubrid_query()\fP and \fBcubrid_prepare()\fP 
.PP
\fBReturns\fP
.RS 4
int 
.RE
.PP
Number of rows, when process is successful\&. 0 when the query was done in async mode\&. -1, if SQL statement is not SELECT\&. FALSE when process is unsuccessful\&. 
.SS "cubrid_pconnect ( $host,  $port,  $dbname,  $userid = \fC'PUBLIC'\fP,  $passwd = \fC''\fP)"
(PHP 5, CUBRID >= 8\&.3\&.1)
.br
 Open a persistent connection to a CUBRID server \fBstring $host \fP Host name or IP address of CUBRID CAS server\&. 
.PP
\fBParameters\fP
.RS 4
\fI$port\fP 
.RE
.PP
Port number of CUBRID CAS server (BROKER_PORT configured in $CUBRID/conf/cubrid_broker\&.conf)\&. 
.PP
\fBParameters\fP
.RS 4
\fI$dbname\fP 
.RE
.PP
Name of database\&. 
.PP
\fBParameters\fP
.RS 4
\fI$userid\fP [optional] 
.RE
.PP
User name for the database\&. Default value is 'PUBLIC'\&. 
.PP
\fBParameters\fP
.RS 4
\fI$passwd\fP [optional] 
.RE
.PP
User password\&. Default value is empty string, i\&.e\&. no password is defined\&. 
.PP
\fBReturns\fP
.RS 4
resource 
.RE
.PP
Connection identifier, when process is successful\&. FALSE, when process is unsuccessful\&. 
.SS "cubrid_pconnect_with_url ( $conn_url,  $userid = \fC'PUBLIC'\fP,  $passwd = \fC''\fP)"
(PHP 5, CUBRID >= 8\&.3\&.1)
.br
 Open a persistent connection to CUBRID server \fBstring $conn_url \fP \fBA\fP character string that contains server connection information\&.
.br
 Syntax: 'CUBRID:>host<:>port<:>dbname<:>username<:>password<:?>params<'\&.
.br
 E\&.g\&. CUBRID:127\&.0\&.0\&.1:33088:demodb:dba:123456:?autocommit=off&althost=10\&.34\&.63\&.132:33088&rctime=100 
.PP
\fBParameters\fP
.RS 4
\fI$userid\fP [optional] 
.RE
.PP
User name for the database\&. Default value is 'PUBLIC'\&. 
.PP
\fBParameters\fP
.RS 4
\fI$passwd\fP [optional] 
.RE
.PP
User password\&. Default value is empty string, i\&.e\&. no password is defined\&. 
.PP
\fBReturns\fP
.RS 4
resource 
.RE
.PP
Connection identifier, when process is successful\&. FALSE, when process is unsuccessful\&. 
.SS "cubrid_ping ( $conn_identifier = \fC\fBnull\fP\fP)"
(PHP 5, CUBRID >= 8\&.3\&.1)
.br
 Ping a server connection or reconnect if there is no connection \fBresource $conn_identifier [optional] \fP The CUBRID connection identifier\&. If the connection identifier is not specified, the last connection opened by \fBcubrid_connect()\fP is assumed\&. 
.PP
\fBReturns\fP
.RS 4
bool 
.RE
.PP
true if the connection to the server is working, otherwise false\&. 
.SS "cubrid_prepare ( $conn_identifier,  $prepare_stmt,  $option = \fC0\fP)"
(PHP 5, CUBRID >= 8\&.3\&.0)
.br
 Prepare an SQL statement for execution \fBresource $conn_identifier \fP Connection identifier\&. 
.PP
\fBParameters\fP
.RS 4
\fI$prepare_stmt\fP 
.RE
.PP
Prepare query\&. 
.PP
\fBParameters\fP
.RS 4
\fI$option\fP [optional] 
.RE
.PP
OID return option CUBRID_INCLUDE_OID\&. 
.PP
\fBReturns\fP
.RS 4
resource 
.RE
.PP
Request identifier, if process is successful; FALSE, if process is unsuccessful\&. 
.SS "cubrid_put ( $conn_identifier,  $oid,  $attr = \fC\fBnull\fP\fP,  $value)"
(PHP 5, CUBRID >= 8\&.3\&.0)
.br
 Update a column using OID \fBresource $conn_identifier \fP Connection identifier\&. 
.PP
\fBParameters\fP
.RS 4
\fI$oid\fP 
.RE
.PP
OID of the instance that you want to update\&. 
.PP
\fBParameters\fP
.RS 4
\fI$attr\fP [optional] 
.RE
.PP
Name of the attribute that you want to update\&. 
.PP
\fBParameters\fP
.RS 4
\fI$value\fP 
.RE
.PP
New value that you want to assign to the attribute\&. 
.PP
\fBReturns\fP
.RS 4
bool 
.RE
.PP
TRUE, when process is successful\&. FALSE, when process is unsuccessful\&. 
.SS "cubrid_query ( $query,  $conn_identifier = \fC\fBnull\fP\fP)"
(PHP 5, CUBRID >= 8\&.3\&.1)
.br
 Send a CUBRID query \fBstring $query \fP \fBA\fP SQL query\&. Data inside the query should be properly escaped\&. 
.PP
\fBParameters\fP
.RS 4
\fI$conn_identifier\fP [optional] 
.RE
.PP
The CUBRID connection\&. If the connection identifier is not specified, the last connection opened by \fBcubrid_connect()\fP is assumed\&. 
.PP
\fBReturns\fP
.RS 4
resource 
.PD 0

.IP "\(bu" 2
For SELECT, SHOW, DESCRIBE, EXPLAIN and other statements returning resultset, \fBcubrid_query()\fP returns a resource on success, or false on error\&.  
.IP "\(bu" 2
For other type of SQL statements, INSERT, UPDATE, DELETE, DROP, etc, \fBcubrid_query()\fP returns true on success or false on error\&.  
.PP
The returned result resource should be passed to \fBcubrid_fetch_array()\fP, and other functions for dealing with result tables, to access the returned data\&. 
.PP
.PP
Use \fBcubrid_num_rows()\fP to find out how many rows were returned for a SELECT statement\&. 
.PP
.PP
Use \fBcubrid_affected_rows()\fP to find out how many rows were affected by a DELETE, INSERT, REPLACE, or UPDATE statement\&. 
.PP

.IP "\(bu" 2
\fBcubrid_query()\fP will also fail and return false if the user does not have permission to access the table(s) referenced by the query\&.  
.PP
.RE
.PP

.SS "cubrid_real_escape_string ( $unescaped_string,  $conn_identifier = \fC\fBnull\fP\fP)"
(PHP 5, CUBRID >= 8\&.3\&.0)
.br
 Escapes special characters in a string for use in a SQL statement \fBstring $unescaped_string \fP The string that is to be escaped\&. 
.PP
\fBParameters\fP
.RS 4
\fI$conn_identifier\fP [optional] 
.RE
.PP
The CUBRID connection\&. If the connection identifier is not specified, the last connection opened by \fBcubrid_connect()\fP is assumed\&. 
.PP
\fBReturns\fP
.RS 4
string 
.RE
.PP
Escaped string version of the given string, on success\&. FALSE on failure\&. 
.SS "cubrid_result ( $result,  $row,  $field = \fC0\fP)"
(PHP 5, CUBRID >= 8\&.3\&.0)
.br
 Return the value of a specific field in a specific row \fBresource $result  int $row \fP The row number from the result that's being retrieved\&. Row numbers start at 0\&. 
.PP
\fBParameters\fP
.RS 4
\fI$field\fP [optional] 
.RE
.PP
The name or offset of the field being retrieved\&. 
.PP
It can be the field's offset, the field's name, or the field's table dot field name (tablename\&.fieldname)\&. If the column name has been aliased ('select foo as bar from\&.\&.\&.'), use the alias instead of the column name\&. If undefined, the first field is retrieved\&. 
.PP
\fBReturns\fP
.RS 4
string 
.RE
.PP
Value of a specific field, on success (NULL if value if null)\&. FALSE on failure\&. 
.SS "cubrid_rollback ( $conn_identifier)"
(PHP 5, CUBRID >= 8\&.3\&.0)
.br
 Roll back a transaction \fBresource $conn_identifier \fP Connection identifier\&. 
.PP
\fBReturns\fP
.RS 4
bool 
.RE
.PP
TRUE, when process is successful\&. FALSE, when process is unsuccessful\&. 
.SS "cubrid_schema ( $conn_identifier,  $schema_type,  $class_name = \fC\fBnull\fP\fP,  $attr_name = \fC\fBnull\fP\fP)"
(PHP 5, CUBRID >= 8\&.3\&.0)
.br
 Get the requested schema information \fBresource $conn_identifier \fP Connection identifier\&. 
.PP
\fBParameters\fP
.RS 4
\fI$schema_type\fP 
.RE
.PP
Schema data that you want to know\&. 
.PP
\fBParameters\fP
.RS 4
\fI$class_name\fP [optional] 
.RE
.PP
Table you want to know the schema of\&. 
.PP
\fBParameters\fP
.RS 4
\fI$attr_name\fP [optional] 
.RE
.PP
Attribute you want to know the schema of\&. 
.PP
\fBReturns\fP
.RS 4
array 
.RE
.PP
Array containing the schema information, when process is successful; FALSE, when process is unsuccessful\&. 
.SS "cubrid_seq_add ( $conn_identifier,  $oid,  $attr_name,  $seq_element)"
(PHP 5, CUBRID >= 8\&.3\&.0)
.br
 Insert a single element to set type column using OID \fBresource $conn_identifier \fP Connection identifier\&. 
.PP
\fBParameters\fP
.RS 4
\fI$oid\fP 
.RE
.PP
OID of the instance you want to work with\&. 
.PP
\fBParameters\fP
.RS 4
\fI$attr_name\fP 
.RE
.PP
Name of the attribute you want to insert an element\&. 
.PP
\fBParameters\fP
.RS 4
\fI$seq_element\fP 
.RE
.PP
Content of the element that you want to insert\&. 
.PP
\fBReturns\fP
.RS 4
bool 
.RE
.PP
TRUE, when process is successful\&. FALSE, when process is unsuccessful\&. 
.SS "cubrid_seq_drop ( $conn_identifier,  $oid,  $attr_name,  $index)"
(PHP 5, CUBRID >= 8\&.3\&.0)
.br
 Delete an element from sequence type column using OID \fBresource $conn_identifier \fP Connection identifier\&. 
.PP
\fBParameters\fP
.RS 4
\fI$oid\fP 
.RE
.PP
OID of the instance you want to work with\&. 
.PP
\fBParameters\fP
.RS 4
\fI$attr_name\fP 
.RE
.PP
Name of the attribute that you want to delete an element from\&. 
.PP
\fBParameters\fP
.RS 4
\fI$index\fP 
.RE
.PP
Index of the element that you want to delete (1-based)\&. 
.PP
\fBReturns\fP
.RS 4
bool 
.RE
.PP
TRUE, when process is successful\&. FALSE, when process is unsuccessful\&. 
.SS "cubrid_seq_insert ( $conn_identifier,  $oid,  $attr_name,  $index,  $seq_element)"
(PHP 5, CUBRID >= 8\&.3\&.0)
.br
 Insert an element to a sequence type column using OID \fBresource $conn_identifier \fP Connection identifier\&. 
.PP
\fBParameters\fP
.RS 4
\fI$oid\fP 
.RE
.PP
OID of the instance you want to work with\&. 
.PP
\fBParameters\fP
.RS 4
\fI$attr_name\fP 
.RE
.PP
Name of the attribute you want to insert an instance to\&. 
.PP
\fBParameters\fP
.RS 4
\fI$index\fP 
.RE
.PP
Location of the element, you want to insert the element to (1-based)\&. 
.PP
\fBParameters\fP
.RS 4
\fI$seq_element\fP 
.RE
.PP
Content of the element that you want to insert\&. 
.PP
\fBReturns\fP
.RS 4
bool 
.RE
.PP
TRUE, when process is successful\&. FALSE, when process is unsuccessful\&. 
.SS "cubrid_seq_put ( $conn_identifier,  $oid,  $attr_name,  $index,  $seq_element)"
(PHP 5, CUBRID >= 8\&.3\&.0)
.br
 Update the element value of sequence type column using OID \fBresource $conn_identifier \fP Connection identifier\&. 
.PP
\fBParameters\fP
.RS 4
\fI$oid\fP 
.RE
.PP
OID of the instance you want to work with\&. 
.PP
\fBParameters\fP
.RS 4
\fI$attr_name\fP 
.RE
.PP
Name of the attribute that you want to update an element\&. 
.PP
\fBParameters\fP
.RS 4
\fI$index\fP 
.RE
.PP
Index of the element that you want to delete (1-based)\&. 
.PP
\fBParameters\fP
.RS 4
\fI$seq_element\fP 
.RE
.PP
New content that you want to use for the update\&. 
.PP
\fBReturns\fP
.RS 4
bool 
.RE
.PP
TRUE, when process is successful\&. FALSE, when process is unsuccessful\&. 
.SS "cubrid_set_add ( $conn_identifier,  $oid,  $attr_name,  $set_element)"
(PHP 5, CUBRID >= 8\&.3\&.0)
.br
 Insert a single element to set type column using OID \fBresource $conn_identifier \fP Connection identifier\&. 
.PP
\fBParameters\fP
.RS 4
\fI$oid\fP 
.RE
.PP
OID of the instance you want to work with\&. 
.PP
\fBParameters\fP
.RS 4
\fI$attr_name\fP 
.RE
.PP
Name of the attribute you want to insert an element\&. 
.PP
\fBParameters\fP
.RS 4
\fI$set_element\fP 
.RE
.PP
Content of the element you want to insert\&. 
.PP
\fBReturns\fP
.RS 4
bool 
.RE
.PP
TRUE, when process is successful\&. FALSE, when process is unsuccessful\&. 
.SS "cubrid_set_autocommit ( $conn_identifier,  $mode)"
(PHP 5, CUBRID >= 8\&.4\&.0)
.br
 Get auto-commit mode of the connection \fBresource $conn_identifier \fP Connection identifier\&. 
.PP
\fBParameters\fP
.RS 4
\fI$mode\fP 
.RE
.PP
Auto-commit mode\&. The following constants can be used: CUBRID_AUTOCOMMIT_FALSE, CUBRID_AUTOCOMMIT_TRUE 
.PP
\fBReturns\fP
.RS 4
bool 
.RE
.PP
TRUE, when process is successful\&. FALSE, when process is unsuccessful\&. 
.SS "cubrid_set_db_parameter ( $conn_identifier,  $param_type,  $param_value)"
(PHP 5, CUBRID >= 8\&.4\&.0)
.br
 Sets the CUBRID database parameters \fBresource $conn_identifier \fP The CUBRID connection\&. If the connection identifier is not specified, the last link opened by \fBcubrid_connect()\fP is assumed\&. 
.PP
\fBParameters\fP
.RS 4
\fI$param_type\fP 
.RE
.PP
Database parameter type\&. Can be PARAM_ISOLATION_LEVEL, or PARAM_LOCK_TIMEOUT\&. 
.PP
\fBParameters\fP
.RS 4
\fI$param_value\fP 
.RE
.PP
Isolation level value (1-6) or lock timeout (in seconds) value\&. 
.PP
\fBReturns\fP
.RS 4
bool 
.RE
.PP
TRUE on success\&. FALSE on failure\&. 
.SS "cubrid_set_drop ( $conn_identifier,  $oid,  $attr_name,  $set_element)"
(PHP 5, CUBRID >= 8\&.3\&.0)
.br
 Delete an element from set type column using OID \fBresource $conn_identifier \fP Connection identifier\&. 
.PP
\fBParameters\fP
.RS 4
\fI$oid\fP 
.RE
.PP
OID of the instance you want to work with\&. 
.PP
\fBParameters\fP
.RS 4
\fI$attr_name\fP 
.RE
.PP
Name of the attribute you want to delete an element from\&. 
.PP
\fBParameters\fP
.RS 4
\fI$set_element\fP 
.RE
.PP
Content of the element you want to delete\&. 
.PP
\fBReturns\fP
.RS 4
bool 
.RE
.PP
TRUE, when process is successful\&. FALSE, when process is unsuccessful\&. 
.SS "cubrid_set_query_timeout ( $req_identifier,  $timeout)"
(PHP 5, CUBRID >= 8\&.4\&.1)
.br
 Get the query timeout value of the request \fBresource $req_identifier \fP Request identifier\&. 
.PP
\fBParameters\fP
.RS 4
\fI$timeout\fP 
.RE
.PP
Timeout time, unit of msec\&. 
.PP
\fBReturns\fP
.RS 4
bool 
.RE
.PP
TRUE, when process is successful\&. FALSE, when process is unsuccessful\&. 
.SS "cubrid_unbuffered_query ( $query,  $conn_identifier = \fC\fBnull\fP\fP)"
(PHP 5, CUBRID >= 8\&.3\&.0)
.br
 Perform a query without fetching the results into memory \fBstring $query \fP The SQL query to execute\&. 
.PP
\fBParameters\fP
.RS 4
\fI$conn_identifier\fP [optional] 
.RE
.PP
The CUBRID connection\&. If the connection identifier is not specified, the last connection opened by \fBcubrid_connect()\fP is assumed\&. 
.PP
\fBReturns\fP
.RS 4
resource 
.RE
.PP
For SELECT, SHOW, DESCRIBE or EXPLAIN statements, \fBcubrid_unbuffered_query()\fP returns a resource on success, or false on error\&. 
.PP
For other type of SQL statements, UPDATE, DELETE, DROP, etc, cubrid_unbuffered_query returns true on success or false on error\&. 
.SS "cubrid_version ()"
(PHP 5, CUBRID >= 8\&.3\&.0)
.br
 Get the CUBRID PHP module's version \fBstring \fP Version information (eg\&. '8\&.4\&.1\&.0001')\&. 
.SH "Variable Documentation"
.PP 
.SS "const CUBRID_ASSOC 2"
Columns are returned into the array having the fieldname as the array index\&. \fBhttps://php\&.net/manual/en/cubrid\&.constants\&.php\fP
.SS "const CUBRID_ASYNC 2"
Execute the query in asynchronous mode\&. \fBhttps://php\&.net/manual/en/cubrid\&.constants\&.php\fP
.SS "const CUBRID_AUTOCOMMIT_FALSE 0"
Disable the auto-commit mode\&. \fBhttps://php\&.net/manual/en/cubrid\&.constants\&.php\fP
.SS "const CUBRID_AUTOCOMMIT_TRUE 1"
Enable the auto-commit mode\&. \fBhttps://php\&.net/manual/en/cubrid\&.constants\&.php\fP
.SS "const CUBRID_BOTH 3"
Columns are returned into the array having both a numerical index and the fieldname as the array index\&. \fBhttps://php\&.net/manual/en/cubrid\&.constants\&.php\fP
.SS "const CUBRID_CURSOR_CURRENT 1"
Move current cursor as a default value if the origin is not specified\&. \fBhttps://php\&.net/manual/en/cubrid\&.constants\&.php\fP
.SS "const CUBRID_CURSOR_ERROR \-1"
Returned value of \fBcubrid_move_cursor()\fP function in case of failure\&. \fBhttps://php\&.net/manual/en/cubrid\&.constants\&.php\fP
.SS "const CUBRID_CURSOR_FIRST 0"
Move current cursor to the first position in the result\&. \fBhttps://php\&.net/manual/en/cubrid\&.constants\&.php\fP
.SS "const CUBRID_CURSOR_LAST 2"
Move current cursor to the last position in the result\&. \fBhttps://php\&.net/manual/en/cubrid\&.constants\&.php\fP
.SS "const CUBRID_CURSOR_SUCCESS 1"
Returned value of \fBcubrid_move_cursor()\fP function in case of success\&. \fBhttps://php\&.net/manual/en/cubrid\&.constants\&.php\fP
.SS "const CUBRID_EXEC_QUERY_ALL 4"
Execute the query in synchronous mode\&. This flag must be set when executing multiple SQL statements\&. \fBhttps://php\&.net/manual/en/cubrid\&.constants\&.php\fP
.SS "const CUBRID_INCLUDE_OID 1"
Determine whether to get OID during query execution\&. \fBhttps://php\&.net/manual/en/cubrid\&.constants\&.php\fP
.SS "const CUBRID_NO_MORE_DATA 0"
Returned value of \fBcubrid_move_cursor()\fP function in case of failure\&. \fBhttps://php\&.net/manual/en/cubrid\&.constants\&.php\fP
.SS "const CUBRID_NUM 1"
Columns are returned into the array having a numerical index to the fields\&. This index starts with 0, the first field in the result\&. \fBhttps://php\&.net/manual/en/cubrid\&.constants\&.php\fP
.SS "const CUBRID_OBJECT 4"
Get query result as an object\&. \fBhttps://php\&.net/manual/en/cubrid\&.constants\&.php\fP
.SH "Author"
.PP 
Generated automatically by Doxygen for Safaricom SDP from the source code\&.
