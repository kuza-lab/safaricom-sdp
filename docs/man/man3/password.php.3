.TH "vendor/jetbrains/phpstorm-stubs/standard/password.php" 3 "Sat Sep 26 2020" "Safaricom SDP" \" -*- nroff -*-
.ad l
.nh
.SH NAME
vendor/jetbrains/phpstorm-stubs/standard/password.php
.SH SYNOPSIS
.br
.PP
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBpassword_get_info\fP ($\fBhash\fP)"
.br
.ti -1c
.RI "\fBpassword_hash\fP ($password, $algo, $options=\fBnull\fP)"
.br
.ti -1c
.RI "\fBpassword_needs_rehash\fP ($\fBhash\fP, $algo, $options=\fBnull\fP)"
.br
.ti -1c
.RI "\fBpassword_verify\fP ($password, $\fBhash\fP)"
.br
.ti -1c
.RI "\fBpassword_algos\fP ()"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "const \fBPASSWORD_DEFAULT\fP ''"
.br
.ti -1c
.RI "const \fBPASSWORD_BCRYPT_DEFAULT_COST\fP 10"
.br
.ti -1c
.RI "const \fBPASSWORD_BCRYPT\fP '2y'"
.br
.ti -1c
.RI "const \fBPASSWORD_ARGON2I\fP 'argon2i'"
.br
.ti -1c
.RI "const \fBPASSWORD_ARGON2ID\fP 'argon2id'"
.br
.ti -1c
.RI "const \fBPASSWORD_ARGON2_DEFAULT_MEMORY_COST\fP 65536"
.br
.ti -1c
.RI "const \fBPASSWORD_ARGON2_DEFAULT_TIME_COST\fP 4"
.br
.ti -1c
.RI "const \fBPASSWORD_ARGON2_DEFAULT_THREADS\fP 1"
.br
.ti -1c
.RI "const \fBPASSWORD_ARGON2_PROVIDER\fP 'standard'"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "password_algos ()"
Return a complete list of all registered password hashing algorithms\&. 
.PP
\fBReturns\fP
.RS 4
string[] 
.RE
.PP
\fBSince\fP
.RS 4
7\&.4 
.RE
.PP

.SS "password_get_info ( $hash)"
(PHP 5 >= 5\&.5\&.0, PHP 5)
.br
.PP
Returns information about the given hash \fBstring $hash A hash created by password_hash()\&.  array Returns an associative array with three elements: \fP  \fIalgo\fP, which will match a \fBpassword algorithm constant\fP   \fIalgoName\fP, which has the human readable name of the algorithm   \fIoptions\fP, which includes the options provided when calling \fBpassword_hash() \fP  
.PP
\fBSince\fP
.RS 4
5\&.5 
.RE
.PP

.SS "password_hash ( $password,  $algo,  $options = \fC\fBnull\fP\fP)"
(PHP 5 >= 5\&.5\&.0, PHP 5)
.br
.PP
Creates a password hash\&. \fBstring $password The user's password\&.  int $algo A \fPpassword algorithm constant denoting the algorithm to use when hashing the password\&. 
.PP
\fBParameters\fP
.RS 4
\fI$options\fP [optional] 
.RE
.PP
An associative array containing options\&. See the \fCpassword algorithm constants\fP for documentation on the supported options for each algorithm\&. If omitted, a random salt will be created and the default cost will be used\&. \fBWarning\fB \fP\fP
.PP
\fB\fB The salt option has been deprecated as of PHP 7\&.0\&.0\&. It is now preferred to simply use the salt that is generated by default\&. \fP\fP
.PP
\fB\fB 
.PP
\fBReturns\fP
.RS 4
string|false|null Returns the hashed password, or FALSE on failure, or null if the algorithm is invalid 
.RE
.PP
\fBSince\fP
.RS 4
5\&.5 
.RE
.PP
\fP\fP
.SS "password_needs_rehash ( $hash,  $algo,  $options = \fC\fBnull\fP\fP)"
(PHP 5 >= 5\&.5\&.0, PHP 5)
.br
.PP
Checks if the given hash matches the given options\&. \fBstring $hash A hash created by password_hash()\&.  int $algo A \fPpassword algorithm constant denoting the algorithm to use when hashing the password\&. 
.PP
\fBParameters\fP
.RS 4
\fI$options\fP [optional] 
.RE
.PP
An associative array containing options\&. See the password algorithm constants for documentation on the supported options for each algorithm\&. 
.PP
\fBReturns\fP
.RS 4
bool Returns TRUE if the hash should be rehashed to match the given algo and options, or FALSE otherwise\&. 
.RE
.PP
\fBSince\fP
.RS 4
5\&.5 
.RE
.PP

.SS "password_verify ( $password,  $hash)"
(PHP 5 >= 5\&.5\&.0, PHP 5)
.br
.PP
Checks if the given hash matches the given options\&. \fBstring $password The user's password\&.  string $hash A hash created by password_hash()\&.  bool Returns TRUE if the password and hash match, or FALSE otherwise\&.  5\&.5 \fP
.SH "Variable Documentation"
.PP 
.SS "const PASSWORD_ARGON2_DEFAULT_MEMORY_COST 65536"
Default amount of memory in bytes that Argon2lib will use while trying to compute a hash\&. Available as of PHP 7\&.2\&.0\&. 
.PP
\fBSince\fP
.RS 4
7\&.2 
.RE
.PP

.SS "const PASSWORD_ARGON2_DEFAULT_THREADS 1"
Default number of threads that Argon2lib will use\&. Available as of PHP 7\&.2\&.0\&. 
.PP
\fBSince\fP
.RS 4
7\&.2 
.RE
.PP

.SS "const PASSWORD_ARGON2_DEFAULT_TIME_COST 4"
Default amount of time that Argon2lib will spend trying to compute a hash\&. Available as of PHP 7\&.2\&.0\&. 
.PP
\fBSince\fP
.RS 4
7\&.2 
.RE
.PP

.SS "const PASSWORD_ARGON2_PROVIDER 'standard'"

.PP
\fBSince\fP
.RS 4
7\&.4 
.RE
.PP

.SS "const PASSWORD_ARGON2I 'argon2i'"
PASSWORD_ARGON2I is used to create new password hashes using the Argon2i algorithm\&.
.PP
Supported Options: 
.PD 0

.IP "\(bu" 2
memory_cost (integer) - Maximum memory (in bytes) that may be used to compute the Argon2 hash\&. Defaults to PASSWORD_ARGON2_DEFAULT_MEMORY_COST\&.
.PP

.IP "\(bu" 2
time_cost (integer) - Maximum amount of time it may take to compute the Argon2 hash\&. Defaults to PASSWORD_ARGON2_DEFAULT_TIME_COST\&.
.PP

.IP "\(bu" 2
threads (integer) - Number of threads to use for computing the Argon2 hash\&. Defaults to PASSWORD_ARGON2_DEFAULT_THREADS\&. 
.PP
Available as of PHP 7\&.2\&.0\&. 
.PP
\fBSince\fP
.RS 4
7\&.2 
.RE
.PP

.SS "const PASSWORD_ARGON2ID 'argon2id'"
PASSWORD_ARGON2ID is used to create new password hashes using the Argon2id algorithm\&.
.PP
Supported Options: 
.PD 0

.IP "\(bu" 2
memory_cost (integer) - Maximum memory (in bytes) that may be used to compute the Argon2 hash\&. Defaults to PASSWORD_ARGON2_DEFAULT_MEMORY_COST\&.
.PP

.IP "\(bu" 2
time_cost (integer) - Maximum amount of time it may take to compute the Argon2 hash\&. Defaults to PASSWORD_ARGON2_DEFAULT_TIME_COST\&.
.PP

.IP "\(bu" 2
threads (integer) - Number of threads to use for computing the Argon2 hash\&. Defaults to PASSWORD_ARGON2_DEFAULT_THREADS\&. 
.PP
Available as of PHP 7\&.3\&.0\&. 
.PP
\fBSince\fP
.RS 4
7\&.3 
.RE
.PP

.SS "const PASSWORD_BCRYPT '2y'"
The default algorithm to use for hashing if no algorithm is provided\&. This may change in newer PHP releases when newer, stronger hashing algorithms are supported\&. 
.PP
It is worth noting that over time this constant can (and likely will) change\&. Therefore you should be aware that the length of the resulting hash can change\&. Therefore, if you use \fBPASSWORD_DEFAULT\fP you should store the resulting hash in a way that can store more than 60 characters (255 is the recomended width)\&. 
.PP
Values for this constant: 
.PP
.PD 0
.IP "\(bu" 2
PHP 5\&.5\&.0 - \fBPASSWORD_BCRYPT\fP  
.PP

.SS "const PASSWORD_BCRYPT_DEFAULT_COST 10"
The default cost used for the BCRYPT hashing algorithm\&. 
.PP
Values for this constant: 
.PP
.PD 0
.IP "\(bu" 2
PHP 5\&.6\&.0 - \fBPASSWORD_BCRYPT_DEFAULT_COST\fP  
.PP

.SS "const PASSWORD_DEFAULT ''"
\fBPASSWORD_BCRYPT\fP is used to create new password hashes using the \fBCRYPT_BLOWFISH\fP algorithm\&. 
.PP
This will always result in a hash using the '$2y$' crypt format, which is always 60 characters wide\&. 
.PP
Supported Options: 
.PP
.PD 0
.IP "\(bu" 2
.PP
\fIsalt\fP - to manually provide a salt to use when hashing the password\&. Note that this will override and prevent a salt from being automatically generated\&. 
.PP
.PP
If omitted, a random salt will be generated by \fBpassword_hash()\fP for each password hashed\&. This is the intended mode of operation\&. 
.PP

.IP "\(bu" 2
.PP
\fIcost\fP - which denotes the algorithmic cost that should be used\&. Examples of these values can be found on the \fBcrypt()"\fP page\&. 
.PP
.PP
If ommitted, a default value of \fI10\fP will be used\&. This is a good baseline cost, but you may want to consider increasing it depending on your hardware\&. 
.PP

.PP
\fBhttps://secure\&.php\&.net/manual/en/password\&.constants\&.php\fP
.SH "Author"
.PP 
Generated automatically by Doxygen for Safaricom SDP from the source code\&.
