.TH "vendor/jetbrains/phpstorm-stubs/win32service/win32service.php" 3 "Sat Sep 26 2020" "Safaricom SDP" \" -*- nroff -*-
.ad l
.nh
.SH NAME
vendor/jetbrains/phpstorm-stubs/win32service/win32service.php
.SH SYNOPSIS
.br
.PP
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBwin32_continue_service\fP ( $serviceName, $machine='')"
.br
.ti -1c
.RI "\fBwin32_create_service\fP ( $details, $machine='')"
.br
.ti -1c
.RI "\fBwin32_delete_service\fP ( $serviceName, $machine='')"
.br
.ti -1c
.RI "\fBwin32_get_last_control_message\fP ()"
.br
.ti -1c
.RI "\fBwin32_pause_service\fP ( $serviceName, $machine='')"
.br
.ti -1c
.RI "\fBwin32_query_service_status\fP ( $serviceName, $machine='')"
.br
.ti -1c
.RI "\fBwin32_set_service_status\fP ( $status, $checkpoint=0)"
.br
.ti -1c
.RI "\fBwin32_start_service_ctrl_dispatcher\fP ( $name)"
.br
.ti -1c
.RI "\fBwin32_start_service\fP ( $serviceName, $machine='')"
.br
.ti -1c
.RI "\fBwin32_stop_service\fP ( $serviceName, $machine='')"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "const \fBWIN32_SERVICE_WIN32_OWN_PROCESS\fP 0x00000010"
.br
.ti -1c
.RI "const \fBWIN32_SERVICE_INTERACTIVE_PROCESS\fP 0x00000100"
.br
.ti -1c
.RI "const \fBWIN32_SERVICE_WIN32_OWN_PROCESS_INTERACTIVE\fP 0x00000110"
.br
.ti -1c
.RI "const \fBWIN32_SERVICE_CONTINUE_PENDING\fP 0x00000005"
.br
.ti -1c
.RI "const \fBWIN32_SERVICE_PAUSE_PENDING\fP 0x00000006"
.br
.ti -1c
.RI "const \fBWIN32_SERVICE_PAUSED\fP 0x00000007"
.br
.ti -1c
.RI "const \fBWIN32_SERVICE_RUNNING\fP 0x00000004"
.br
.ti -1c
.RI "const \fBWIN32_SERVICE_START_PENDING\fP 0x00000002"
.br
.ti -1c
.RI "const \fBWIN32_SERVICE_STOP_PENDING\fP 0x00000003"
.br
.ti -1c
.RI "const \fBWIN32_SERVICE_STOPPED\fP 0x00000001"
.br
.ti -1c
.RI "const \fBWIN32_SERVICE_CONTROL_CONTINUE\fP 0x00000003"
.br
.ti -1c
.RI "const \fBWIN32_SERVICE_CONTROL_INTERROGATE\fP 0x00000004"
.br
.ti -1c
.RI "const \fBWIN32_SERVICE_CONTROL_PAUSE\fP 0x00000002"
.br
.ti -1c
.RI "const \fBWIN32_SERVICE_CONTROL_PRESHUTDOWN\fP 0x0000000F"
.br
.ti -1c
.RI "const \fBWIN32_SERVICE_CONTROL_SHUTDOWN\fP 0x00000005"
.br
.ti -1c
.RI "const \fBWIN32_SERVICE_CONTROL_STOP\fP 0x00000001"
.br
.ti -1c
.RI "const \fBWIN32_SERVICE_ACCEPT_PAUSE_CONTINUE\fP 0x00000002"
.br
.ti -1c
.RI "const \fBWIN32_SERVICE_ACCEPT_PRESHUTDOWN\fP 0x00000100"
.br
.ti -1c
.RI "const \fBWIN32_SERVICE_ACCEPT_SHUTDOWN\fP 0x00000004"
.br
.ti -1c
.RI "const \fBWIN32_SERVICE_ACCEPT_STOP\fP 0x00000001"
.br
.ti -1c
.RI "const \fBWIN32_SERVICE_AUTO_START\fP 0x00000002"
.br
.ti -1c
.RI "const \fBWIN32_SERVICE_DEMAND_START\fP 0x00000003"
.br
.ti -1c
.RI "const \fBWIN32_SERVICE_DISABLED\fP 0x00000004"
.br
.ti -1c
.RI "const \fBWIN32_SERVICE_ERROR_IGNORE\fP 0x00000000"
.br
.ti -1c
.RI "const \fBWIN32_SERVICE_ERROR_NORMAL\fP 0x00000001"
.br
.ti -1c
.RI "const \fBWIN32_SERVICE_RUNS_IN_SYSTEM_PROCESS\fP 0x00000001"
.br
.ti -1c
.RI "const \fBWIN32_ERROR_ACCESS_DENIED\fP 0x00000005"
.br
.ti -1c
.RI "const \fBWIN32_ERROR_CIRCULAR_DEPENDENCY\fP 0x00000423"
.br
.ti -1c
.RI "const \fBWIN32_ERROR_DATABASE_DOES_NOT_EXIST\fP 0x00000429"
.br
.ti -1c
.RI "const \fBWIN32_ERROR_DEPENDENT_SERVICES_RUNNING\fP 0x0000041B"
.br
.ti -1c
.RI "const \fBWIN32_ERROR_DUPLICATE_SERVICE_NAME\fP 0x00000436"
.br
.ti -1c
.RI "const \fBWIN32_ERROR_FAILED_SERVICE_CONTROLLER_CONNECT\fP 0x00000427"
.br
.ti -1c
.RI "const \fBWIN32_ERROR_INSUFFICIENT_BUFFER\fP 0x0000007A"
.br
.ti -1c
.RI "const \fBWIN32_ERROR_INVALID_DATA\fP 0x0000000D"
.br
.ti -1c
.RI "const \fBWIN32_ERROR_INVALID_HANDLE\fP 0x00000006"
.br
.ti -1c
.RI "const \fBWIN32_ERROR_INVALID_LEVEL\fP 0x0000007C"
.br
.ti -1c
.RI "const \fBWIN32_ERROR_INVALID_NAME\fP 0x0000007B"
.br
.ti -1c
.RI "const \fBWIN32_ERROR_INVALID_PARAMETER\fP 0x00000057"
.br
.ti -1c
.RI "const \fBWIN32_ERROR_INVALID_SERVICE_ACCOUNT\fP 0x00000421"
.br
.ti -1c
.RI "const \fBWIN32_ERROR_INVALID_SERVICE_CONTROL\fP 0x0000041C"
.br
.ti -1c
.RI "const \fBWIN32_ERROR_PATH_NOT_FOUND\fP 0x00000003"
.br
.ti -1c
.RI "const \fBWIN32_ERROR_SERVICE_ALREADY_RUNNING\fP 0x00000420"
.br
.ti -1c
.RI "const \fBWIN32_ERROR_SERVICE_CANNOT_ACCEPT_CTRL\fP 0x00000425"
.br
.ti -1c
.RI "const \fBWIN32_ERROR_SERVICE_DATABASE_LOCKED\fP 0x0000041F"
.br
.ti -1c
.RI "const \fBWIN32_ERROR_SERVICE_DEPENDENCY_DELETED\fP 0x00000433"
.br
.ti -1c
.RI "const \fBWIN32_ERROR_SERVICE_DEPENDENCY_FAIL\fP 0x0000042C"
.br
.ti -1c
.RI "const \fBWIN32_ERROR_SERVICE_DISABLED\fP 0x00000422"
.br
.ti -1c
.RI "const \fBWIN32_ERROR_SERVICE_DOES_NOT_EXIST\fP 0x00000424"
.br
.ti -1c
.RI "const \fBWIN32_ERROR_SERVICE_EXISTS\fP 0x00000431"
.br
.ti -1c
.RI "const \fBWIN32_ERROR_SERVICE_LOGON_FAILED\fP 0x0000042D"
.br
.ti -1c
.RI "const \fBWIN32_ERROR_SERVICE_MARKED_FOR_DELETE\fP 0x00000430"
.br
.ti -1c
.RI "const \fBWIN32_ERROR_SERVICE_NO_THREAD\fP 0x0000041E"
.br
.ti -1c
.RI "const \fBWIN32_ERROR_SERVICE_NOT_ACTIVE\fP 0x00000426"
.br
.ti -1c
.RI "const \fBWIN32_ERROR_SERVICE_REQUEST_TIMEOUT\fP 0x0000041D"
.br
.ti -1c
.RI "const \fBWIN32_ERROR_SHUTDOWN_IN_PROGRESS\fP 0x0000045B"
.br
.ti -1c
.RI "const \fBWIN32_NO_ERROR\fP 0x00000000"
.br
.ti -1c
.RI "const \fBWIN32_ABOVE_NORMAL_PRIORITY_CLASS\fP 0x00008000"
.br
.ti -1c
.RI "const \fBWIN32_BELOW_NORMAL_PRIORITY_CLASS\fP 0x00004000"
.br
.ti -1c
.RI "const \fBWIN32_HIGH_PRIORITY_CLASS\fP 0x00000080"
.br
.ti -1c
.RI "const \fBWIN32_IDLE_PRIORITY_CLASS\fP 0x00000040"
.br
.ti -1c
.RI "const \fBWIN32_NORMAL_PRIORITY_CLASS\fP 0x00000020"
.br
.ti -1c
.RI "const \fBWIN32_REALTIME_PRIORITY_CLASS\fP 0x00000100"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "win32_continue_service ( $serviceName,  $machine = \fC''\fP)"
resumes a paused service
.PP
\fBParameters\fP
.RS 4
\fI$serviceName\fP The short name of the service\&. 
.br
\fI$machine\fP Optional machine name\&. If omitted, the local machine is used\&.
.RE
.PP
\fBReturns\fP
.RS 4
int|false Returns WIN32_NO_ERROR on success, FALSE if there is a problem with the parameters or a Win32 \fBError\fP Code on failure\&. 
.RE
.PP

.SS "win32_create_service ( $details,  $machine = \fC''\fP)"
Creates a new service entry in the SCM database
.PP
\fBParameters\fP
.RS 4
\fI$details\fP 
.PD 0

.IP "\(bu" 2
\fIservice\fP The short name of the service\&. This is the name that you will use to control the service using the net command\&. The service must be unique (no two services can share the same name), and, ideally, should avoid having spaces in the name\&. 
.PP

.IP "\(bu" 2
\fIdisplay\fP The display name of the service\&. This is the name that you will see in the Services Applet\&. 
.PP

.IP "\(bu" 2
\fIdescription\fP The long description of the service\&. This is the description that you will see in the Services Applet\&. 
.PP

.IP "\(bu" 2
\fIuser\fP The name of the user account under which you want the service to run\&. If omitted, the service will run as the LocalSystem account\&. If the username is specified, you must also provide a password\&. 
.PP

.IP "\(bu" 2
\fIpassword\fP The password that corresponds to the user\&. 
.PP

.IP "\(bu" 2
\fIpath\fP The full path to the executable module that will be launched when the service is started\&. If omitted, the path to the current PHP process will be used\&. 
.PP

.IP "\(bu" 2
\fIparams\fP Command line parameters to pass to the service when it starts\&. If you want to run a PHP script as the service, then the first parameter should be the full path to the PHP script that you intend to run\&. If the script name or path contains spaces, then wrap the full path to the PHP script with "\&. 
.PP

.IP "\(bu" 2
\fIload_order\fP Controls the load_order\&. This is not yet fully supported\&. 
.PP

.IP "\(bu" 2
\fIsvc_type\fP Sets the service type\&. If omitted, the default value is WIN32_SERVICE_WIN32_OWN_PROCESS\&. Don't change this unless you know what you're doing\&. 
.PP

.IP "\(bu" 2
\fIstart_type\fP Specifies how the service should be started\&. The default is WIN32_SERVICE_AUTO_START which means the service will be launched when the machine starts up\&. 
.PP

.IP "\(bu" 2
\fIerror_control\fP Informs the SCM what it should do when it detects a problem with the service\&. The default is WIN32_SERVER_ERROR_IGNORE\&. Changing this value is not yet fully supported\&. 
.PP

.IP "\(bu" 2
\fIdelayed_start\fP If delayed_start is set to TRUE, then this will inform the SCM that this service should be started after other auto-start services are started plus a short delay\&.
.PP
Any service can be marked as a delayed auto-start service; however, this setting has no effect unless the service's start_type is WIN32_SERVICE_AUTO_START\&.
.PP
This setting is only applicable on Windows Vista and Windows Server 2008 or greater\&. 
.PP

.IP "\(bu" 2
\fIbase_priority\fP To reduce the impact on processor utilisation, it may be necessary to set a base priority lower than normal\&.
.PP
The base_priority can be set to one of the constants define in Win32 Base Priority Classes\&.  
.PP
.br
\fI$machine\fP The optional machine name on which you want to create a service\&. If omitted, it will use the local machine\&.
.RE
.PP
\fBReturns\fP
.RS 4
int|false Returns WIN32_NO_ERROR on success, FALSE if there is a problem with the parameters or a Win32 \fBError\fP Code on failure\&. 
.RE
.PP

.SS "win32_delete_service ( $serviceName,  $machine = \fC''\fP)"
Deletes a service entry from the SCM database This function really just marks the service for deletion\&. If other processes (such as the Services Applet) are open, then the deletion will be deferred until those applications are closed\&. If a service is marked for deletion, further attempts to delete it will fail, and attempts to create a new service with that name will also fail\&.
.PP
\fBParameters\fP
.RS 4
\fI$serviceName\fP The short name of the service\&. 
.br
\fI$machine\fP Optional machine name\&. If omitted, the local machine is used\&.
.RE
.PP
\fBReturns\fP
.RS 4
int|false Returns WIN32_NO_ERROR on success, FALSE if there is a problem with the parameters or a Win32 \fBError\fP Code on failure\&. 
.RE
.PP

.SS "win32_get_last_control_message ()"
Returns the last control message that was sent to this service When running as a service you should periodically check this to determine if your service needs to stop running\&. 
.PP
\fBCaution\fP Since version 0\&.2\&.0, this function work only in 'cli' SAPI\&. On other SAPI this function is disabled\&. 
.PP
\fBReturns\fP
.RS 4
int Returns a control constant which will be one of the Win32Service Service Control Message Constants: WIN32_SERVICE_CONTROL_CONTINUE, WIN32_SERVICE_CONTROL_INTERROGATE, WIN32_SERVICE_CONTROL_PAUSE, WIN32_SERVICE_CONTROL_PRESHUTDOWN, WIN32_SERVICE_CONTROL_SHUTDOWN, WIN32_SERVICE_CONTROL_STOP\&. 
.RE
.PP

.SS "win32_pause_service ( $serviceName,  $machine = \fC''\fP)"
Pauses a named service\&. Requires administrative privileges\&.
.PP
\fBParameters\fP
.RS 4
\fI$serviceName\fP The short name of the service\&. 
.br
\fI$machine\fP Optional machine name\&. If omitted, the local machine is used\&.
.RE
.PP
\fBReturns\fP
.RS 4
int|false Returns WIN32_NO_ERROR on success, FALSE if there is a problem with the parameters or a Win32 \fBError\fP Code on failure\&. 
.RE
.PP

.SS "win32_query_service_status ( $serviceName,  $machine = \fC''\fP)"
Queries the current status for a service, returning an array of information\&.
.PP
\fBParameters\fP
.RS 4
\fI$serviceName\fP The short name of the service\&. 
.br
\fI$machine\fP Optional machine name\&. If omitted, the local machine is used\&.
.RE
.PP
\fBReturns\fP
.RS 4
array|false Returns an array consisting of the following information on success, FALSE if there is a problem with the parameters or a Win32 \fBError\fP Code on failure\&. 
.PD 0

.IP "\(bu" 2
\fIServiceType\fP The dwServiceType\&. See Win32Service Service Type Bitmasks\&.  
.IP "\(bu" 2
\fICurrentState\fP The dwCurrentState\&. See Win32Service Service Status Constants\&.  
.IP "\(bu" 2
\fIControlsAccepted\fP Which service controls are accepted by the service\&. See Win32Service Service Control Message Accepted Bitmasks\&.  
.IP "\(bu" 2
\fIWin32ExitCode\fP If the service exited, the return code from the process\&.  
.IP "\(bu" 2
\fIServiceSpecificExitCode\fP If the service exited with an error condition, the service specific code that is logged in the event log is visible here\&.  
.IP "\(bu" 2
\fICheckPoint\fP If the service is shutting down, holds the current check point number\&. This is used by the SCM as a kind of heart-beat to detect a wedged service process\&. The value of the check point is best interpreted in conjunction with the WaitHint value\&.  
.IP "\(bu" 2
\fIWaitHint\fP If the service is shutting down it will set WaitHint to a checkpoint value that will indicate 100% completion\&. This can be used to implement a progress indicator\&.  
.IP "\(bu" 2
\fIProcessId\fP The Windows process identifier\&. If 0, the process is not running\&.  
.IP "\(bu" 2
\fIServiceFlags\fP The dwServiceFlags\&. See Win32Service Service Service Flag Constants\&.  
.PP
.RE
.PP

.SS "win32_set_service_status ( $status,  $checkpoint = \fC0\fP)"
Update the service status Informs the SCM of the current status of a running service\&. This call is only valid for a running service process\&. 
.PP
\fBCaution\fP Since version 0\&.2\&.0, this function work only in 'cli' SAPI\&. On other SAPI this function is disabled\&. 
.PP
\fBParameters\fP
.RS 4
\fI$status\fP The service status code, one of WIN32_SERVICE_RUNNING, WIN32_SERVICE_STOPPED, WIN32_SERVICE_STOP_PENDING, WIN32_SERVICE_START_PENDING, WIN32_SERVICE_CONTINUE_PENDING, WIN32_SERVICE_PAUSE_PENDING, WIN32_SERVICE_PAUSED\&. 
.br
\fI$checkpoint\fP The checkpoint value the service increments periodically to report its progress during a lengthy start, stop, pause, or continue operation\&. For example, the service should increment this value as it completes each step of its initialization when it is starting up\&. The checkpoint is only valid when the status is one of WIN32_SERVICE_STOP_PENDING, WIN32_SERVICE_START_PENDING, WIN32_SERVICE_CONTINUE_PENDING or WIN32_SERVICE_PAUSE_PENDING\&.
.RE
.PP
\fBReturns\fP
.RS 4
mixed Returns TRUE on success, FALSE if there is a problem with the parameters or a Win32 \fBError\fP Code on failure\&. 
.RE
.PP

.SS "win32_start_service ( $serviceName,  $machine = \fC''\fP)"
Starts a service Attempts to start the named service\&. Usually requires administrative privileges\&.
.PP
\fBParameters\fP
.RS 4
\fI$serviceName\fP The short name of the service\&. 
.br
\fI$machine\fP Optional machine name\&. If omitted, the local machine is used\&.
.RE
.PP
\fBReturns\fP
.RS 4
int|false Returns WIN32_NO_ERROR on success, FALSE if there is a problem with the parameters or a Win32 \fBError\fP Code on failure\&. 
.RE
.PP

.SS "win32_start_service_ctrl_dispatcher ( $name)"
Registers the script with the SCM, so that it can act as the service with the given name When launched via the Service Control Manager, a service process is required to 'check-in' with it to establish service monitoring and communication facilities\&. This function performs the check-in by spawning a thread to handle the lower-level communication with the service control manager\&.
.PP
Once started, the service process should do 2 things\&. The first is to tell the Service Control Manager that the service is running\&. This is achieved by calling \fBwin32_set_service_status()\fP with the WIN32_SERVICE_RUNNING constant\&. If you need to perform some lengthy process before the service is actually running, then you can use the WIN32_SERVICE_START_PENDING constant\&. The second is to continue to check-in with the service control manager so that it can determine if it should terminate\&. This is achieved by periodically calling \fBwin32_get_last_control_message()\fP and handling the return code appropriately\&. 
.PP
\fBCaution\fP Since version 0\&.2\&.0, this function work only in 'cli' SAPI\&. On other SAPI this function is disabled\&. 
.PP
\fBParameters\fP
.RS 4
\fI$name\fP The short-name of the service, as registered by \fBwin32_create_service()\fP\&.
.RE
.PP
\fBReturns\fP
.RS 4
mixed Returns TRUE on success, FALSE if there is a problem with the parameters or a Win32 \fBError\fP Code on failure\&. 
.RE
.PP

.SS "win32_stop_service ( $serviceName,  $machine = \fC''\fP)"
Stops a named service\&. Requires administrative privileges\&.
.PP
\fBParameters\fP
.RS 4
\fI$serviceName\fP The short name of the service\&. 
.br
\fI$machine\fP Optional machine name\&. If omitted, the local machine is used\&.
.RE
.PP
\fBReturns\fP
.RS 4
int|false Returns WIN32_NO_ERROR on success, FALSE if there is a problem with the parameters or a Win32 \fBError\fP Code on failure\&. 
.RE
.PP

.SH "Variable Documentation"
.PP 
.SS "const WIN32_ABOVE_NORMAL_PRIORITY_CLASS 0x00008000"
Process that has priority above WIN32_NORMAL_PRIORITY_CLASS but below WIN32_HIGH_PRIORITY_CLASS\&. 
.SS "const WIN32_BELOW_NORMAL_PRIORITY_CLASS 0x00004000"
Process that has priority above WIN32_IDLE_PRIORITY_CLASS but below WIN32_NORMAL_PRIORITY_CLASS\&. 
.SS "const WIN32_ERROR_ACCESS_DENIED 0x00000005"
The handle to the SCM database does not have the appropriate access rights\&. 
.SS "const WIN32_ERROR_CIRCULAR_DEPENDENCY 0x00000423"
\fBA\fP circular service dependency was specified\&. 
.SS "const WIN32_ERROR_DATABASE_DOES_NOT_EXIST 0x00000429"
The specified database does not exist\&. 
.SS "const WIN32_ERROR_DEPENDENT_SERVICES_RUNNING 0x0000041B"
The service cannot be stopped because other running services are dependent on it\&. 
.SS "const WIN32_ERROR_DUPLICATE_SERVICE_NAME 0x00000436"
The display name already exists in the service control manager database either as a service name or as another display name\&. 
.SS "const WIN32_ERROR_FAILED_SERVICE_CONTROLLER_CONNECT 0x00000427"
This error is returned if the program is being run as a console application rather than as a service\&. If the program will be run as a console application for debugging purposes, structure it such that service-specific code is not called\&. 
.SS "const WIN32_ERROR_INSUFFICIENT_BUFFER 0x0000007A"
The buffer is too small for the service status structure\&. Nothing was written to the structure\&. 
.SS "const WIN32_ERROR_INVALID_DATA 0x0000000D"
The specified service status structure is invalid\&. 
.SS "const WIN32_ERROR_INVALID_HANDLE 0x00000006"
The handle to the specified service control manager database is invalid\&. 
.SS "const WIN32_ERROR_INVALID_LEVEL 0x0000007C"
The InfoLevel parameter contains an unsupported value\&. 
.SS "const WIN32_ERROR_INVALID_NAME 0x0000007B"
The specified service name is invalid\&. 
.SS "const WIN32_ERROR_INVALID_PARAMETER 0x00000057"
\fBA\fP parameter that was specified is invalid\&. 
.SS "const WIN32_ERROR_INVALID_SERVICE_ACCOUNT 0x00000421"
The user account name specified in the user parameter does not exist\&. See \fBwin32_create_service()\fP\&. 
.SS "const WIN32_ERROR_INVALID_SERVICE_CONTROL 0x0000041C"
The requested control code is not valid, or it is unacceptable to the service\&. 
.SS "const WIN32_ERROR_PATH_NOT_FOUND 0x00000003"
The service binary file could not be found\&. 
.SS "const WIN32_ERROR_SERVICE_ALREADY_RUNNING 0x00000420"
An instance of the service is already running\&. 
.SS "const WIN32_ERROR_SERVICE_CANNOT_ACCEPT_CTRL 0x00000425"
The requested control code cannot be sent to the service because the state of the service is WIN32_SERVICE_STOPPED, WIN32_SERVICE_START_PENDING, or WIN32_SERVICE_STOP_PENDING\&. 
.SS "const WIN32_ERROR_SERVICE_DATABASE_LOCKED 0x0000041F"
The database is locked\&. 
.SS "const WIN32_ERROR_SERVICE_DEPENDENCY_DELETED 0x00000433"
The service depends on a service that does not exist or has been marked for deletion\&. 
.SS "const WIN32_ERROR_SERVICE_DEPENDENCY_FAIL 0x0000042C"
The service depends on another service that has failed to start\&. 
.SS "const WIN32_ERROR_SERVICE_DISABLED 0x00000422"
The service has been disabled\&. 
.SS "const WIN32_ERROR_SERVICE_DOES_NOT_EXIST 0x00000424"
The specified service does not exist as an installed service\&. 
.SS "const WIN32_ERROR_SERVICE_EXISTS 0x00000431"
The specified service already exists in this database\&. 
.SS "const WIN32_ERROR_SERVICE_LOGON_FAILED 0x0000042D"
The service did not start due to a logon failure\&. This error occurs if the service is configured to run under an account that does not have the 'Log on as a service' right\&. 
.SS "const WIN32_ERROR_SERVICE_MARKED_FOR_DELETE 0x00000430"
The specified service has already been marked for deletion\&. 
.SS "const WIN32_ERROR_SERVICE_NO_THREAD 0x0000041E"
\fBA\fP thread could not be created for the service\&. 
.SS "const WIN32_ERROR_SERVICE_NOT_ACTIVE 0x00000426"
The service has not been started\&. 
.SS "const WIN32_ERROR_SERVICE_REQUEST_TIMEOUT 0x0000041D"
The process for the service was started, but it did not call StartServiceCtrlDispatcher, or the thread that called StartServiceCtrlDispatcher may be blocked in a control handler function\&. 
.SS "const WIN32_ERROR_SHUTDOWN_IN_PROGRESS 0x0000045B"
The system is shutting down; this function cannot be called\&. 
.SS "const WIN32_HIGH_PRIORITY_CLASS 0x00000080"
Process that performs time-critical tasks that must be executed immediately\&. The threads of the process preempt the threads of normal or idle priority class processes\&. An example is the Task List, which must respond quickly when called by the user, regardless of the load on the operating system\&. Use extreme care when using the high-priority class, because a high-priority class application can use nearly all available CPU time\&. 
.SS "const WIN32_IDLE_PRIORITY_CLASS 0x00000040"
Process whose threads run only when the system is idle\&. The threads of the process are preempted by the threads of any process running in a higher priority class\&. An example is a screen saver\&. The idle-priority class is inherited by child processes\&. 
.SS "const WIN32_NO_ERROR 0x00000000"
No error\&. 
.SS "const WIN32_NORMAL_PRIORITY_CLASS 0x00000020"
Process with no special scheduling needs\&. 
.SS "const WIN32_REALTIME_PRIORITY_CLASS 0x00000100"
Process that has the highest possible priority\&. The threads of the process preempt the threads of all other processes, including operating system processes performing important tasks\&. For example, a real-time process that executes for more than a very brief interval can cause disk caches not to flush or cause the mouse to be unresponsive\&. 
.SS "const WIN32_SERVICE_ACCEPT_PAUSE_CONTINUE 0x00000002"
The service can be paused and continued\&. This control code allows the service to receive WIN32_SERVICE_CONTROL_PAUSE and WIN32_SERVICE_CONTROL_CONTINUE notifications\&. 
.SS "const WIN32_SERVICE_ACCEPT_PRESHUTDOWN 0x00000100"
The service can perform preshutdown tasks\&. This control code enables the service to receive WIN32_SERVICE_CONTROL_PRESHUTDOWN notifications\&. This value is not supported by Windows Server 2003 and Windows XP/2000\&. 
.SS "const WIN32_SERVICE_ACCEPT_SHUTDOWN 0x00000004"
The service is notified when system shutdown occurs\&. This control code allows the service to receive WIN32_SERVICE_CONTROL_SHUTDOWN notifications\&. 
.SS "const WIN32_SERVICE_ACCEPT_STOP 0x00000001"
The service can be stopped\&. This control code allows the service to receive WIN32_SERVICE_CONTROL_STOP notifications\&. 
.SS "const WIN32_SERVICE_AUTO_START 0x00000002"
\fBA\fP service started automatically by the service control manager during system startup\&. 
.SS "const WIN32_SERVICE_CONTINUE_PENDING 0x00000005"
The service continue is pending\&. 
.SS "const WIN32_SERVICE_CONTROL_CONTINUE 0x00000003"
Notifies a paused service that it should resume\&. 
.SS "const WIN32_SERVICE_CONTROL_INTERROGATE 0x00000004"
Notifies a service that it should report its current status information to the service control manager\&. 
.SS "const WIN32_SERVICE_CONTROL_PAUSE 0x00000002"
Notifies a service that it should pause\&. 
.SS "const WIN32_SERVICE_CONTROL_PRESHUTDOWN 0x0000000F"
Notifies a service that the system will be shutting down\&. \fBA\fP service that handles this notification blocks system shutdown until the service stops or the preshutdown time-out interval expires\&. This value is not supported by Windows Server 2003 and Windows XP/2000\&. 
.SS "const WIN32_SERVICE_CONTROL_SHUTDOWN 0x00000005"
Notifies a service that the system is shutting down so the service can perform cleanup tasks\&. If a service accepts this control code, it must stop after it performs its cleanup tasks\&. After the SCM sends this control code, it will not send other control codes to the service\&. 
.SS "const WIN32_SERVICE_CONTROL_STOP 0x00000001"
Notifies a service that it should stop\&. 
.SS "const WIN32_SERVICE_DEMAND_START 0x00000003"
\fBA\fP service started by the service control manager when a process calls the StartService function\&. 
.SS "const WIN32_SERVICE_DISABLED 0x00000004"
\fBA\fP service that cannot be started\&. Attempts to start the service result in the error code WIN32_ERROR_SERVICE_DISABLED\&. 
.SS "const WIN32_SERVICE_ERROR_IGNORE 0x00000000"
The startup program ignores the error and continues the startup operation\&. 
.SS "const WIN32_SERVICE_ERROR_NORMAL 0x00000001"
The startup program logs the error in the event log but continues the startup operation\&. 
.SS "const WIN32_SERVICE_INTERACTIVE_PROCESS 0x00000100"
The service can interact with the desktop\&. This option is not available on Windows Vista or later\&. 
.SS "const WIN32_SERVICE_PAUSE_PENDING 0x00000006"
The service pause is pending\&. 
.SS "const WIN32_SERVICE_PAUSED 0x00000007"
The service is paused\&. 
.SS "const WIN32_SERVICE_RUNNING 0x00000004"
The service is running\&. 
.SS "const WIN32_SERVICE_RUNS_IN_SYSTEM_PROCESS 0x00000001"
The service runs in a system process that must always be running\&. 
.SS "const WIN32_SERVICE_START_PENDING 0x00000002"
The service is starting\&. 
.SS "const WIN32_SERVICE_STOP_PENDING 0x00000003"
The service is stopping\&. 
.SS "const WIN32_SERVICE_STOPPED 0x00000001"
The service is not running\&. 
.SS "const WIN32_SERVICE_WIN32_OWN_PROCESS 0x00000010"
The service runs in its own process\&. 
.SS "const WIN32_SERVICE_WIN32_OWN_PROCESS_INTERACTIVE 0x00000110"
The service runs in its own process and can interact with the desktop\&. This option is not available on Windows Vista or later\&. 
.SH "Author"
.PP 
Generated automatically by Doxygen for Safaricom SDP from the source code\&.
