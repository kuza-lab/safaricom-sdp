{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\comment begin body}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
vendor/jetbrains/phpstorm-stubs/sqlsrv/sqlsrv.php File Reference\par \pard\plain 
{\tc\tcl2 \v vendor/jetbrains/phpstorm-stubs/sqlsrv/sqlsrv.php}
{\xe \v vendor/jetbrains/phpstorm-stubs/sqlsrv/sqlsrv.php}
{\bkmkstart AAAAAAANFN}
{\bkmkend AAAAAAANFN}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b sqlsrv_connect} ($server_name, $connection_info=array())\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b sqlsrv_close} ($conn)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b sqlsrv_commit} ($conn)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b sqlsrv_begin_transaction} ($conn)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b sqlsrv_rollback} ($conn)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b sqlsrv_errors} ($errorsAndOrWarnings={\b SQLSRV_ERR_ALL})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b sqlsrv_configure} ($setting, $value)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b sqlsrv_get_config} ($setting)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b sqlsrv_prepare} ($conn, $tsql, $params=array(), $options=array())\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b sqlsrv_execute} ($stmt)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b sqlsrv_query} ($conn, $tsql, $params=array(), $options=array())\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b sqlsrv_fetch} ($stmt, $row={\b null}, $offset={\b null})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b sqlsrv_get_field} ($stmt, $field_index, $get_as_type)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b sqlsrv_fetch_array} ($stmt, $fetch_type={\b null}, $row={\b null}, $offset={\b null})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b sqlsrv_fetch_object} ($stmt, $class_name={\b null}, $ctor_params={\b null}, $row={\b null}, $offset={\b null})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b sqlsrv_has_rows} ($stmt)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b sqlsrv_num_fields} ($stmt)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b sqlsrv_next_result} ($stmt)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b sqlsrv_num_rows} ($stmt)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b sqlsrv_rows_affected} ($stmt)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b sqlsrv_client_info} ($conn)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b sqlsrv_server_info} ($conn)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b sqlsrv_cancel} ($stmt)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b sqlsrv_free_stmt} ($stmt)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b sqlsrv_field_metadata} ($stmt)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b sqlsrv_send_stream_data} ($stmt)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b SQLSRV_PHPTYPE_STREAM} ($encoding)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b SQLSRV_PHPTYPE_STRING} ($encoding)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b SQLSRV_SQLTYPE_BINARY} ($byteCount)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b SQLSRV_SQLTYPE_VARBINARY} ($byteCount)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b SQLSRV_SQLTYPE_VARCHAR} ($charCount)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b SQLSRV_SQLTYPE_CHAR} ($charCount)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b SQLSRV_SQLTYPE_NCHAR} ($charCount)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b SQLSRV_SQLTYPE_NVARCHAR} ($charCount)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b SQLSRV_SQLTYPE_DECIMAL} ($precision, $scale)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b SQLSRV_SQLTYPE_NUMERIC} ($precision, $scale)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b SQLSRV_ERR_ERRORS} 0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b SQLSRV_ERR_WARNINGS} 1\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b SQLSRV_ERR_ALL} 2\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b SQLSRV_LOG_SYSTEM_ALL} -1\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b SQLSRV_LOG_SYSTEM_OFF} 0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b SQLSRV_LOG_SYSTEM_INIT} 1\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b SQLSRV_LOG_SYSTEM_CONN} 2\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b SQLSRV_LOG_SYSTEM_STMT} 4\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b SQLSRV_LOG_SYSTEM_UTIL} 8\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b SQLSRV_LOG_SEVERITY_ALL} -1\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b SQLSRV_LOG_SEVERITY_ERROR} 1\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b SQLSRV_LOG_SEVERITY_NOTICE} 4\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b SQLSRV_LOG_SEVERITY_WARNING} 2\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b SQLSRV_FETCH_NUMERIC} 1\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b SQLSRV_FETCH_ASSOC} 2\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b SQLSRV_FETCH_BOTH} 3\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b SQLSRV_PHPTYPE_NULL} 1\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b SQLSRV_PHPTYPE_INT} 2\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b SQLSRV_PHPTYPE_FLOAT} 3\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b SQLSRV_PHPTYPE_DATETIME} 4\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b SQLSRV_ENC_BINARY} 'binary'\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b SQLSRV_ENC_CHAR} 'char'\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b SQLSRV_NULLABLE_NO} 0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b SQLSRV_NULLABLE_YES} 1\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b SQLSRV_NULLABLE_UNKNOWN} 2\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b SQLSRV_SQLTYPE_BIGINT} -5\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b SQLSRV_SQLTYPE_BIT} -7\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b SQLSRV_SQLTYPE_DATETIME} 25177693\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b SQLSRV_SQLTYPE_FLOAT} 6\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b SQLSRV_SQLTYPE_IMAGE} -4\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b SQLSRV_SQLTYPE_INT} 4\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b SQLSRV_SQLTYPE_MONEY} 33564163\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b SQLSRV_SQLTYPE_NTEXT} -10\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b SQLSRV_SQLTYPE_TEXT} -1\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b SQLSRV_SQLTYPE_REAL} 7\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b SQLSRV_SQLTYPE_SMALLDATETIME} 8285\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b SQLSRV_SQLTYPE_SMALLINT} 5\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b SQLSRV_SQLTYPE_SMALLMONEY} 33559555\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b SQLSRV_SQLTYPE_TIMESTAMP} 4606\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b SQLSRV_SQLTYPE_TINYINT} -6\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b SQLSRV_SQLTYPE_UDT} -151\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b SQLSRV_SQLTYPE_UNIQUEIDENTIFIER} -11\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b SQLSRV_SQLTYPE_XML} -152\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b SQLSRV_SQLTYPE_DATE} 5211\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b SQLSRV_SQLTYPE_TIME} 58728806\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b SQLSRV_SQLTYPE_DATETIMEOFFSET} 58738021\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b SQLSRV_SQLTYPE_DATETIME2} 58734173\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b SQLSRV_PARAM_IN} 1\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b SQLSRV_PARAM_INOUT} 2\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b SQLSRV_PARAM_OUT} 4\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b SQLSRV_TXN_READ_UNCOMMITTED} 1\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b SQLSRV_TXN_READ_COMMITTED} 2\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b SQLSRV_TXN_REPEATABLE_READ} 4\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b SQLSRV_TXN_SERIALIZABLE} 8\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b SQLSRV_TXN_SNAPSHOT} 32\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b SQLSRV_SCROLL_NEXT} 1\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b SQLSRV_SCROLL_PRIOR} 4\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b SQLSRV_SCROLL_FIRST} 2\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b SQLSRV_SCROLL_LAST} 3\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b SQLSRV_SCROLL_ABSOLUTE} 5\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b SQLSRV_SCROLL_RELATIVE} 6\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b SQLSRV_CURSOR_FORWARD} 'forward'\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b SQLSRV_CURSOR_STATIC} 'static'\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b SQLSRV_CURSOR_DYNAMIC} 'dynamic'\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b SQLSRV_CURSOR_KEYSET} 'keyset'\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b SQLSRV_CURSOR_CLIENT_BUFFERED} 'buffered'\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v sqlsrv_begin_transaction\:sqlsrv.php}
{\xe \v sqlsrv.php\:sqlsrv_begin_transaction}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
sqlsrv_begin_transaction (  {\i $conn})}}
\par
{\bkmkstart AAAAAAANFO}
{\bkmkend AAAAAAANFO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Begins a transaction.\par
\par
Begins a transaction on a specified connection. The current transaction includes all statements on the specified connection that were executed after the call to sqlsrv_begin_transaction and before any calls to sqlsrv_rollback or sqlsrv_commit.\par
The Microsoft Drivers for PHP for SQL Server is in auto-commit mode by default. This means that all queries are automatically committed upon success unless they have been designated as part of an explicit transaction by using sqlsrv_begin_transaction.\par
If sqlsrv_begin_transaction is called after a transaction has already been initiated on the connection but not completed by calling either sqlsrv_commit or sqlsrv_rollback, the call returns false and an Already in Transaction error is added to the error collection.\par
Do not use embedded Transact-SQL to perform transactions. For example, do not execute a statement with "BEGIN TRANSACTION" as the Transact-SQL query to begin a transaction. The expected transactional behavior cannot be guaranteed when using embedded Transact-SQL to perform transactions.\par
Additional Information at {\b How to Perform Transactions} and {\b SQLSRV Driver API Reference}\par
 {\b resource $conn The connection with which the transaction is associated.  bool A Boolean value: true if the transaction was successfully begun. Otherwise, false. }\par
}}
{\xe \v sqlsrv_cancel\:sqlsrv.php}
{\xe \v sqlsrv.php\:sqlsrv_cancel}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
sqlsrv_cancel (  {\i $stmt})}}
\par
{\bkmkstart AAAAAAANFP}
{\bkmkend AAAAAAANFP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Cancels a statement; discards any pending results for the statement.\par
\par
Cancels a statement. This means that any pending results for the statement are discarded. After this function is called, the statement can be re-executed if it was prepared with {\b sqlsrv_prepare}. Calling this function is not necessary if all the results associated with the statement have been consumed.\par
{\b A} statement that is prepared and executed using the combination of {\b sqlsrv_prepare} and {\b sqlsrv_execute} can be re-executed with {\b sqlsrv_execute} after calling sqlsrv_cancel. {\b A} statement that is executed with {\b sqlsrv_query} cannot be re-executed after calling sqlsrv_cancel.\par
Additional Information at {\b SQLSRV Driver API Reference}\par
{\b resource $stmt The statement to be canceled.  bool A Boolean value: true if the operation was successful. Otherwise, false. }\par
}}
{\xe \v sqlsrv_client_info\:sqlsrv.php}
{\xe \v sqlsrv.php\:sqlsrv_client_info}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
sqlsrv_client_info (  {\i $conn})}}
\par
{\bkmkstart AAAAAAANFQ}
{\bkmkend AAAAAAANFQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Provides information about the client.\par
\par
Returns information about the connection and client stack.\par
Additional Information at {\b SQLSRV Driver API Reference}\par
{\b resource $conn The connection resource by which the client is connected.  array|false An associative array with keys described in the table below, or false if the connection resource is null.} {
\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
DriverDllName - SQLNCLI10.DLL (Microsoft Drivers for PHP for SQL Server version 2.0) \par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
DriverODBCVer - ODBC version (xx.yy) \par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
DriverVer - SQL Server Native Client DLL version: 10.50.xxx (Microsoft Drivers for PHP for SQL Server version 2.0) \par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
ExtensionVer - php_sqlsrv.dll version: 2.0.xxxx.x(Microsoft Drivers for PHP for SQL Server version 2.0)\par}
}}
{\xe \v sqlsrv_close\:sqlsrv.php}
{\xe \v sqlsrv.php\:sqlsrv_close}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
sqlsrv_close (  {\i $conn})}}
\par
{\bkmkstart AAAAAAANFR}
{\bkmkend AAAAAAANFR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Closes a connection. Frees all resources associated with the connection.\par
\par
Null is a valid parameter for this function. This allows the function to be called multiple times in a script. For example, if you close a connection in an error condition and close it again at the end of the script, the second call to sqlsrv_close will return true because the first call to sqlsrv_close (in the error condition) sets the connection resource to null.\par
Additional Information at {\b SQLSRV Driver API Reference}\par
 {\b resource|null $conn The connection to be closed.  bool The Boolean value true unless the function is called with an invalid parameter. If the function is called with an invalid parameter, false is returned. }\par
}}
{\xe \v sqlsrv_commit\:sqlsrv.php}
{\xe \v sqlsrv.php\:sqlsrv_commit}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
sqlsrv_commit (  {\i $conn})}}
\par
{\bkmkstart AAAAAAANFS}
{\bkmkend AAAAAAANFS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Commits a transaction.\par
\par
Commits the current transaction on the specified connection and returns the connection to the auto-commit mode. The current transaction includes all statements on the specified connection that were executed after the call to sqlsrv_begin_transaction and before any calls to sqlsrv_rollback or sqlsrv_commit.\par
The Microsoft Drivers for PHP for SQL Server is in auto-commit mode by default. This means that all queries are automatically committed upon success unless they have been designated as part of an explicit transaction by using sqlsrv_begin_transaction.\par
If sqlsrv_commit is called on a connection that is not in an active transaction and that was initiated with sqlsrv_begin_transaction, the call returns false and a Not in Transaction error is added to the error collection.\par
Additional Information at {\b SQLSRV Driver API Reference}\par
 {\b resource $conn The connection on which the transaction is active.  bool A Boolean value: true if the transaction was successfully committed. Otherwise, false. }\par
}}
{\xe \v sqlsrv_configure\:sqlsrv.php}
{\xe \v sqlsrv.php\:sqlsrv_configure}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
sqlsrv_configure (  {\i $setting},   {\i $value})}}
\par
{\bkmkstart AAAAAAANFT}
{\bkmkend AAAAAAANFT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Changes error handling and logging configurations.\par
\par
Changes the settings for error handling and logging options.\par
Additional Information at {\b SQLSRV Driver API Reference}\par
 {\b string $setting The name of the setting to be configured. See table below for list of settings.  mixed $value The value to be applied to the setting specified in the $setting parameter. The possible values for this parameter depend on which setting is specified. The following table lists the possible combinations.} ClientBufferMaxKBSize (Default: 10240)\par
 For more information about client-side queries, see {\b Cursor Types (SQLSRV Driver)}. {
\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b A} non negative number up to the PHP memory limit. \par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Zero (0) means no limit to the buffer size. \par}
LogSeverity (Default: SQLSRV_LOG_SEVERITY_ERROR )\par
 For more information about logging activity, see {\b Logging Activity}. {
\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
SQLSRV_LOG_SEVERITY_ALL (-1) \par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
SQLSRV_LOG_SEVERITY_ERROR (1) \par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
SQLSRV_LOG_SEVERITY_NOTICE (4) \par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
SQLSRV_LOG_SEVERITY_WARNING (2)\par}
WarningsReturnAsErrors (Default: true )\par
 For more information about configuring error and warning handling, see {\b How to: Configure Error and Warning Handling Using the SQLSRV Driver}. {
\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
true (1) \par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
false (0)\par}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
bool If sqlsrv_configure is called with an unsupported setting or value, the function returns false. Otherwise, the function returns true. \par
}}}}
{\xe \v sqlsrv_connect\:sqlsrv.php}
{\xe \v sqlsrv.php\:sqlsrv_connect}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
sqlsrv_connect (  {\i $server_name},   {\i $connection_info} = {\f2 array()})}}
\par
{\bkmkstart AAAAAAANFU}
{\bkmkend AAAAAAANFU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Creates and opens a connection.\par
\par
Creates a connection resource and opens a connection. By default, the connection is attempted using Windows Authentication.\par
If values for the UID and PWD keys are not specified in the optional $connectionInfo parameter, the connection will be attempted using Windows Authentication. For more information about connecting to the server, see {\b How to: Connect Using Windows Authentication} and {\b How to: Connect Using SQL Server Authentication.}\par
Additional Information at {\b SQLSRV Driver API Reference}\par
 {\b string $server_name A string specifying the name of the server to which a connection is being established. An instance name (for example, "myServer\\instanceName") or port number (for example, "myServer, 1521") can be included as part of this string. For a complete description of the options available for this parameter, see the Server keyword in the ODBC Driver Connection String Keywords section of  {\f2 http://go.microsoft.com/fwlink/?LinkId=105504} Using Connection String Keywords with SQL Native Client\}.}\par
Beginning in version 3.0 of the Microsoft Drivers for PHP for SQL Server, you can also specify a LocalDB instance with "(localdb)\\instancename". For more information, see {\b PHP Driver for SQL Server Support for LocalDB} .\par
Also beginning in version 3.0 of the Microsoft Drivers for PHP for SQL Server, you can specify a virtual network name, to connect to an AlwaysOn availability group. For more information about Microsoft Drivers for PHP for SQL Server support for AlwaysOn Availability Groups, see {\b PHP Driver for SQL Server Support for High Availability, Disaster Recovery}. {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{array\cell }{{\i $connection_info} \cell }{[optional] An associative array that contains connection attributes (for example, array("Database" => "AdventureWorks")). See {\b Connection Options} for a list of the supported keys for the array. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
resource|false {\b A} PHP connection resource. If a connection cannot be successfully created and opened, false is returned. \par
}}}}
{\xe \v sqlsrv_errors\:sqlsrv.php}
{\xe \v sqlsrv.php\:sqlsrv_errors}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
sqlsrv_errors (  {\i $errorsAndOrWarnings} = {\f2 {\b SQLSRV_ERR_ALL}})}}
\par
{\bkmkstart AAAAAAANFV}
{\bkmkend AAAAAAANFV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Returns error and/or warning information about the last operation.\par
\par
Returns extended error and/or warning information about the last sqlsrv operation performed. \par
The sqlsrv_errors function can return error and/or warning information by calling it with one of the parameter values specified in the Parameters section below. \par
By default, warnings generated on a call to any sqlsrv function are treated as errors; if a warning occurs on a call to a sqlsrv function, the function returns false. However, warnings that correspond to SQLSTATE values 01000, 01001, 01003, and 01S02 are never treated as errors. \par
The following line of code turns off the behavior mentioned above; a warning generated by a call to a sqlsrv function does not cause the function to return false: \par
{\f2 {\b sqlsrv_configure}("WarningsReturnAsErrors", 0);} \par
The following line of code reinstates the default behavior; warnings (with exceptions, noted above) are treated as errors: \par
{\f2 {\b sqlsrv_configure}("WarningsReturnAsErrors", 1);} \par
Regardless of the setting, warnings can only be retrieved by calling sqlsrv_errors with either the SQLSRV_ERR_ALL or SQLSRV_ERR_WARNINGS parameter value (see Parameters section below for details). \par
Additional Information at {\b SQLSRV Driver API Reference}\par
 {\b int $errorsAndOrWarnings [optional] A predefined constant. This parameter can take one of the values in the following list: SQLSRV_ERR_ALL, SQLSRV_ERR_ERRORS, SQLSRV_ERR_WARNINGS. If no parameter value is supplied, both errors and warnings generated by the last sqlsrv function call are returned.  array|null An array of arrays, or null. Each array in the returned array contains three key-value pairs. The following table lists each key and its description: } SQLSTATE: {
\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
For errors that originate from the ODBC driver, the SQLSTATE returned by ODBC.For information about SQLSTATE values for ODBC, see {\b ODBC Error Codes}. \par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
For errors that originate from the Microsoft Drivers for PHP for SQL Server, a SQLSTATE of IMSSP. \par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
For warnings that originate from the Microsoft Drivers for PHP for SQL Server, a SQLSTATE of 01SSP. \par}
code: {
\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
For errors that originate from SQL Server, the native SQL Server error code. \par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
For errors that originate from the ODBC driver, the error code returned by ODBC. \par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
For errors that originate from the Microsoft Drivers for PHP for SQL Server, the Microsoft Drivers for PHP for SQL Server error code. For more information, see {\b Handling Errors and Warnings}. \par}
message: {\b A} description of the error.\par
The array values can also be accessed with numeric keys 0, 1, and 2.\par
\par
If no errors or warnings occur, null is returned.\par
 \par
}}
{\xe \v sqlsrv_execute\:sqlsrv.php}
{\xe \v sqlsrv.php\:sqlsrv_execute}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
sqlsrv_execute (  {\i $stmt})}}
\par
{\bkmkstart AAAAAAANFW}
{\bkmkend AAAAAAANFW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Executes a prepared statement.\par
\par
Executes a previously prepared statement. See {\b sqlsrv_prepare} for information on preparing a statement for execution.\par
This function is ideal for executing a prepared statement multiple times with different parameter values.\par
For additional Information see: {
\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b sqlsrv_query} \par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b How to: Perform Parameterized Queries} \par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b SQLSRV Driver API Reference}\par}
{\b resource $stmt A resource specifying the statement to be executed. For more information about how to create a statement resource, see  sqlsrv_prepare() sqlsrv_prepare\}.  bool A Boolean value: true if the statement was successfully executed. Otherwise, false. }\par
}}
{\xe \v sqlsrv_fetch\:sqlsrv.php}
{\xe \v sqlsrv.php\:sqlsrv_fetch}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
sqlsrv_fetch (  {\i $stmt},   {\i $row} = {\f2 {\b null}},   {\i $offset} = {\f2 {\b null}})}}
\par
{\bkmkstart AAAAAAANFX}
{\bkmkend AAAAAAANFX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Makes the next row of data available for reading.\par
\par
Makes the next row of a result set available for reading. Use {\b sqlsrv_get_field} to read fields of the row.\par
{\b A} statement must be executed before results can be retrieved. For information on executing a statement, see {\b sqlsrv_query} and {\b sqlsrv_execute}.\par
Additional Information at {\b SQLSRV Driver API Reference}\par
 {\b resource|null $stmt A statement resource corresponding to an executed statement.  int|null $row [optional]: One of the following values, specifying the row to access in a result set that uses a scrollable cursor: SQLSRV_SCROLL_NEXT, SQLSRV_SCROLL_PRIOR, SQLSRV_SCROLL_FIRST, SQLSRV_SCROLL_LAST, SQLSRV_SCROLL_ABSOLUTE, SQLSRV_SCROLL_RELATIVE. }\par
For more information on these values, see {\b Specifying a Cursor Type and Selecting Rows}. {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{int | null\cell }{{\i $offset} \cell }{[optional] Used with SQLSRV_SCROLL_ABSOLUTE and SQLSRV_SCROLL_RELATIVE to specify the row to retrieve. The first record in the result set is 0. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
bool|null If the next row of the result set was successfully retrieved, true is returned. If there are no more results in the result set, null is returned. If an error occurred, false is returned. \par
}}}}
{\xe \v sqlsrv_fetch_array\:sqlsrv.php}
{\xe \v sqlsrv.php\:sqlsrv_fetch_array}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
sqlsrv_fetch_array (  {\i $stmt},   {\i $fetch_type} = {\f2 {\b null}},   {\i $row} = {\f2 {\b null}},   {\i $offset} = {\f2 {\b null}})}}
\par
{\bkmkstart AAAAAAANFY}
{\bkmkend AAAAAAANFY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Retrieves the next row of data as a numerically indexed array, an associative array, or both.\par
\par
If a column with no name is returned, the associative key for the array element will be an empty string (""). For example, consider this Transact-SQL statement that inserts a value into a database table and retrieves the server-generated primary key: {\f2  INSERT INTO Production.ProductPhoto (LargePhoto) VALUES (?); SELECT SCOPE_IDENTITY()}  If the result set returned by the SELECT SCOPE_IDENTITY() portion of this statement is retrieved as an associative array, the key for the returned value will be an empty string ("") because the returned column has no name. To avoid this, you can retrieve the result as a numeric array, or you can specify a name for the returned column in the Transact-SQL statement. The following is one way to specify a column name in Transact-SQL: {\f2 SELECT SCOPE_IDENTITY() AS PictureID}  If a result set contains multiple columns without names, the value of the last unnamed column will be assigned to the empty string ("") key.\par
The sqlsrv_fetch_array function always returns data according to the {\b Default PHP Data Types}. For information about how to specify the PHP data type, see {\b How to: Specify PHP Data Types}.\par
If a field with no name is retrieved, the associative key for the array element will be an empty string (""). For more information, see {\b sqlsrv_fetch_array}.\par
Additional Information at {\b Retrieving Data} and {\b SQLSRV Driver API Reference}\par
{\b resource|null $stmt A statement resource corresponding to an executed statement.  int $fetch_type [optional] A predefined constant. This parameter can take on one of the values listed in the following table: }SQLSRV_FETCH_NUMERIC - The next row of data is returned as a numeric array. SQLSRV_FETCH_ASSOC - The next row of data is returned as an associative array. The array keys are the column names in the result set. SQLSRV_FETCH_BOTH - The next row of data is returned as both a numeric array and an associative array. This is the default value.  {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{int | null\cell }{{\i $row} \cell }{[optional]: One of the following values, specifying the row to access in a result set that uses a scrollable cursor: SQLSRV_SCROLL_NEXT, SQLSRV_SCROLL_PRIOR, SQLSRV_SCROLL_FIRST, SQLSRV_SCROLL_LAST, SQLSRV_SCROLL_ABSOLUTE, SQLSRV_SCROLL_RELATIVE. \par
\cell }
{\row }
}
For more information on these values, see {\b Specifying a Cursor Type and Selecting Rows}. {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{int | null\cell }{{\i $offset} \cell }{[optional] Used with SQLSRV_SCROLL_ABSOLUTE and SQLSRV_SCROLL_RELATIVE to specify the row to retrieve. The first record in the result set is 0. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
array|null|false If a row of data is retrieved, an array is returned. If there are no more rows to retrieve, null is returned. If an error occurs, false is returned. \par
}}}}
{\xe \v sqlsrv_fetch_object\:sqlsrv.php}
{\xe \v sqlsrv.php\:sqlsrv_fetch_object}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
sqlsrv_fetch_object (  {\i $stmt},   {\i $class_name} = {\f2 {\b null}},   {\i $ctor_params} = {\f2 {\b null}},   {\i $row} = {\f2 {\b null}},   {\i $offset} = {\f2 {\b null}})}}
\par
{\bkmkstart AAAAAAANFZ}
{\bkmkend AAAAAAANFZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Retrieves the next row of data as an object.\par
\par
Retrieves the next row of data as a PHP object.\par
Additional Information at {\b Retrieving Data} and {\b SQLSRV Driver API Reference}\par
{\b resource $stmt A statement resource corresponding to an executed statement.  string|null $class_name [optional] A string specifying the name of the class to instantiate. If a value for the $className parameter is not specified, an instance of the PHP  stdClass\} is instantiated.  array|null $ctor_params [optional] An array that contains values passed to the constructor of the class specified with the $className parameter. If the constructor of the specified class accepts parameter values, the $ctorParams parameter must be used when calling sqlsrv_fetch_object.  int|null $row [optional] One of the following values, specifying the row to access in a result set that uses a scrollable cursor: SQLSRV_SCROLL_NEXT, SQLSRV_SCROLL_PRIOR, SQLSRV_SCROLL_FIRST, SQLSRV_SCROLL_LAST, SQLSRV_SCROLL_ABSOLUTE, SQLSRV_SCROLL_RELATIVE. }\par
For more information on these values, see {\b Specifying a Cursor Type and Selecting Rows}. {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{int | null\cell }{{\i $offset} \cell }{[optional] Used with SQLSRV_SCROLL_ABSOLUTE and SQLSRV_SCROLL_RELATIVE to specify the row to retrieve. The first record in the result set is 0. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
object|false|null {\b A} PHP object with properties that correspond to result set field names. Property values are populated with the corresponding result set field values. If the class specified with the optional $className parameter does not exist or if there is no active result set associated with the specified statement, false is returned. If there are no more rows to retrieve, null is returned.\par
\par
}}The data type of a value in the returned object will be the default PHP data type. For information on default PHP data types, see {\b Default PHP Data Types}.\par
 \par
}}
{\xe \v sqlsrv_field_metadata\:sqlsrv.php}
{\xe \v sqlsrv.php\:sqlsrv_field_metadata}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
sqlsrv_field_metadata (  {\i $stmt})}}
\par
{\bkmkstart AAAAAAANGA}
{\bkmkend AAAAAAANGA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Returns field metadata.\par
\par
Retrieves metadata for the fields of a prepared statement. For information about preparing a statement, see {\b sqlsrv_query} or {\b sqlsrv_prepare}. Note that sqlsrv_field_metadata can be called on any prepared statement, pre- or post-execution.\par
Additional Information at {\b sqlsrv_cancel} and {\b SQLSRV Driver API Reference}\par
{\b resource $stmt A statement resource for which field metadata is sought.  array|false An array of arrays or false. The array consists of one array for each field in the result set. Each sub-array has keys as described in the table below. If there is an error in retrieving field metadata, false is returned. }Name - Name of the column to which the field corresponds. Type - Numeric value that corresponds to a SQL type. Size - Number of characters for fields of character type (char(n), varchar(n), nchar(n), nvarchar(n), XML). Number of bytes for fields of binary type (binary(n), varbinary(n), UDT). NULL for other SQL Server data types. Precision - The precision for types of variable precision (real, numeric, decimal, datetime2, datetimeoffset, and time). NULL for other SQL Server data types. Scale - The scale for types of variable scale (numeric, decimal, datetime2, datetimeoffset, and time). NULL for other SQL Server data types. Nullable - An enumerated value indicating whether the column is nullable (SQLSRV_NULLABLE_YES), the column is not nullable (SQLSRV_NULLABLE_NO), or it is not known if the column is nullable (SQLSRV_NULLABLE_UNKNOWN). See the {\b function documentation} for more information on the keys for each sub-array. \par
}}
{\xe \v sqlsrv_free_stmt\:sqlsrv.php}
{\xe \v sqlsrv.php\:sqlsrv_free_stmt}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
sqlsrv_free_stmt (  {\i $stmt})}}
\par
{\bkmkstart AAAAAAANGB}
{\bkmkend AAAAAAANGB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Closes a statement. Frees all resources associated with the statement.\par
\par
Frees all resources associated with the specified statement. The statement cannot be used again after this function has been called.\par
Null is a valid parameter for this function. This allows the function to be called multiple times in a script. For example, if you free a statement in an error condition and free it again at the end of the script, the second call to sqlsrv_free_stmt will return true because the first call to sqlsrv_free_stmt (in the error condition) sets the statement resource to null.\par
Additional Information at {\b sqlsrv_cancel} and {\b SQLSRV Driver API Reference}\par
{\b resource|null $stmt The statement to be closed.  bool The Boolean value true unless the function is called with an invalid parameter. If the function is called with an invalid parameter, false is returned. }\par
}}
{\xe \v sqlsrv_get_config\:sqlsrv.php}
{\xe \v sqlsrv.php\:sqlsrv_get_config}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
sqlsrv_get_config (  {\i $setting})}}
\par
{\bkmkstart AAAAAAANGC}
{\bkmkend AAAAAAANGC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Returns the current value of the specified configuration setting.\par
\par
If false is returned by sqlsrv_get_config, you must call {\b sqlsrv_errors} to determine if an error occurred or if false is the value of the setting specified by the $setting parameter.\par
For a list of configurable settings, see {\b sqlsrv_configure}.\par
Additional Information at {\b SQLSRV Driver API Reference}\par
 {\b string $setting The configuration setting for which the value is returned.  mixed The value of the setting specified by the $setting parameter. If an invalid setting is specified, false is returned and an error is added to the error collection. }\par
}}
{\xe \v sqlsrv_get_field\:sqlsrv.php}
{\xe \v sqlsrv.php\:sqlsrv_get_field}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
sqlsrv_get_field (  {\i $stmt},   {\i $field_index},   {\i $get_as_type})}}
\par
{\bkmkstart AAAAAAANGD}
{\bkmkend AAAAAAANGD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Retrieves a field in the current row by index. The PHP return type can be specified.\par
\par
Retrieves data from the specified field of the current row. Field data must be accessed in order. For example, data from the first field cannot be accessed after data from the second field has been accessed.\par
The combination of {\b sqlsrv_fetch} and {\b sqlsrv_get_field} provides forward-only access to data.\par
The combination of {\b sqlsrv_fetch} and {\b sqlsrv_get_field} loads only one field of a result set row into script memory and allows PHP return type specification. (For information about how to specify the PHP return type, see {\b How to: Specify PHP Data Types}.) This combination of functions also allows data to be retrieved as a stream. (For information about retrieving data as a stream, see {\b Retrieving Data as a Stream Using the SQLSRV Driver}.)\par
Additional Information at {\b SQLSRV Driver API Reference}\par
{\b resource $stmt A statement resource corresponding to an executed statement.  int $field_index The index of the field to be retrieved. Indexes begin at zero.  int $get_as_type [optional] A SQLSRV constant (SQLSRV_PHPTYPE_*) that determines the PHP data type for the returned data. For information about supported data types, see  {\f2 https://docs.microsoft.com/en-us/sql/connect/php/constants-microsoft-drivers-for-php-for-sql-server} Constants (Microsoft Drivers for PHP for SQL Server)\}. If no return type is specified, a default PHP type will be returned. For information about default PHP types, see  {\f2 http://msdn.microsoft.com/en-us/library/cc296193.aspx} Default PHP Data Types\}. For information about specifying PHP data types, see  {\f2 http://msdn.microsoft.com/en-us/library/cc296208.aspx} How to: Specify PHP Data Types\}.  mixed The field data. You can specify the PHP data type of the returned data by using the $getAsType parameter. If no return data type is specified, the default PHP data type will be returned. For information about default PHP types, see  {\f2 http://msdn.microsoft.com/en-us/library/cc296193.aspx} Default PHP Data Types\}. For information about specifying PHP data types, see  {\f2 http://msdn.microsoft.com/en-us/library/cc296208.aspx} How to: Specify PHP Data Types\}. }\par
}}
{\xe \v sqlsrv_has_rows\:sqlsrv.php}
{\xe \v sqlsrv.php\:sqlsrv_has_rows}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
sqlsrv_has_rows (  {\i $stmt})}}
\par
{\bkmkstart AAAAAAANGE}
{\bkmkend AAAAAAANGE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Detects if a result set has one or more rows.\par
\par
Indicates if the result set has one or more rows.\par
Additional Information at {\b SQLSRV Driver API Reference}\par
{\b resource $stmt The executed statement.  bool If there are rows in the result set, the return value will be true. If there are no rows, or if the function call fails, the return value will be false. }\par
}}
{\xe \v sqlsrv_next_result\:sqlsrv.php}
{\xe \v sqlsrv.php\:sqlsrv_next_result}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
sqlsrv_next_result (  {\i $stmt})}}
\par
{\bkmkstart AAAAAAANGF}
{\bkmkend AAAAAAANGF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Makes the next result available for processing.\par
\par
Makes the next result (result set, row count, or output parameter) of the specified statement active.\par
The first (or only) result returned by a batch query or stored procedure is active without a call to sqlsrv_next_result.\par
Additional Information at {\b Updating Data (Microsoft Drivers for PHP for SQL Server)} and {\b SQLSRV Driver API Reference}\par
{\b resource $stmt The executed statement on which the next result is made active.  bool|null If the next result was successfully made active, the Boolean value true is returned. If an error occurred in making the next result active, false is returned. If no more results are available, null is returned. }\par
}}
{\xe \v sqlsrv_num_fields\:sqlsrv.php}
{\xe \v sqlsrv.php\:sqlsrv_num_fields}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
sqlsrv_num_fields (  {\i $stmt})}}
\par
{\bkmkstart AAAAAAANGG}
{\bkmkend AAAAAAANGG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Retrieves the number of fields in an active result set.\par
\par
Retrieves the number of fields in an active result set. Note that sqlsrv_num_fields can be called on any prepared statement, before or after execution.\par
Additional Information at {\b sqlsrv_field_metadata} and {\b SQLSRV Driver API Reference}\par
{\b resource $stmt The statement on which the targeted result set is active.  int|false An integer value that represents the number of fields in the active result set. If an error occurs, the Boolean value false is returned. }\par
}}
{\xe \v sqlsrv_num_rows\:sqlsrv.php}
{\xe \v sqlsrv.php\:sqlsrv_num_rows}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
sqlsrv_num_rows (  {\i $stmt})}}
\par
{\bkmkstart AAAAAAANGH}
{\bkmkend AAAAAAANGH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reports the number of rows in a result set.\par
\par
sqlsrv_num_rows requires a client-side, static, or keyset cursor, and will return false if you use a forward cursor or a dynamic cursor. ({\b A} forward cursor is the default.) For more information about cursors, see {\b sqlsrv_prepare}, {\b sqlsrv_query} and {\b Cursor Types (SQLSRV Driver)}.\par
Additional Information at {\b SQLSRV Driver API Reference}\par
{\b resource $stmt The result set for which to count the rows.  int|false False if there was an error calculating the number of rows. Otherwise, returns the number of rows in the result set. }\par
}}
{\xe \v SQLSRV_PHPTYPE_STREAM\:sqlsrv.php}
{\xe \v sqlsrv.php\:SQLSRV_PHPTYPE_STREAM}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
SQLSRV_PHPTYPE_STREAM (  {\i $encoding})}}
\par
{\bkmkstart AAAAAAANGI}
{\bkmkend AAAAAAANGI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Specifies the encoding of a stream of data from the server.\par
\par
When specifying the PHP data type of a value being returned from the server, this allows you to specify the encoding used to process the value if the value is a stream.\par
In the documentation this is presented as a constant that accepts an arguement.\par
When you use SQLSRV_PHPTYPE_STREAM, the encoding must be specified. If no parameter is supplied, an error will be returned.\par
Additional Information at: {
\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b How to: Specify PHP Data Types} \par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b How to: Retrieve Character Data as a Stream Using the SQLSRV Driver.} \par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b How to: Send and Retrieve UTF-8 Data Using Built-In UTF-8 Support.} \par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b SQLSRV Driver API Reference}</ui>\par
{\b string $encoding The encoding to use for the stream. The valid options are SQLSRV_ENC_BINARY, SQLSRV_ENC_CHAR or "UTF-8".  int Value to use in any place that accepts a SQLSRV_PHPTYPE_* constant to represent a PHP stream with the given encoding. }\par}
}}
{\xe \v SQLSRV_PHPTYPE_STRING\:sqlsrv.php}
{\xe \v sqlsrv.php\:SQLSRV_PHPTYPE_STRING}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
SQLSRV_PHPTYPE_STRING (  {\i $encoding})}}
\par
{\bkmkstart AAAAAAANGJ}
{\bkmkend AAAAAAANGJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Specifies the encoding of a string being received form the server.\par
\par
When specifying the PHP data type of a value being returned from the server, this allows you to specify the encoding used to process the value if the value is a string.\par
In the documentation this is presented as a constant that accepts an arguement.\par
When you use SQLSRV_PHPTYPE_STRING, the encoding must be specified. If no parameter is supplied, an error will be returned.\par
Additional Information at: {
\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b How to: Specify PHP Data Types} \par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b How to: Retrieve Character Data as a Stream Using the SQLSRV Driver.} \par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b How to: Send and Retrieve UTF-8 Data Using Built-In UTF-8 Support.} \par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b SQLSRV Driver API Reference}</ui>\par
{\b string $encoding The encoding to use for the stream. The valid options are SQLSRV_ENC_BINARY, SQLSRV_ENC_CHAR or "UTF-8".  int Value to use in any place that accepts a SQLSRV_PHPTYPE_* constant to represent a PHP string with the given encoding. }\par}
}}
{\xe \v sqlsrv_prepare\:sqlsrv.php}
{\xe \v sqlsrv.php\:sqlsrv_prepare}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
sqlsrv_prepare (  {\i $conn},   {\i $tsql},   {\i $params} = {\f2 array()},   {\i $options} = {\f2 array()})}}
\par
{\bkmkstart AAAAAAANGK}
{\bkmkend AAAAAAANGK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Prepares a Transact-SQL query without executing it. Implicitly binds parameters.\par
\par
Creates a statement resource associated with the specified connection. This function is useful for execution of multiple queries.\par
Variables passed as query parameters should be passed by reference instead of by value. For example, pass &$myVariable instead of $myVariable. {\b A} PHP warning will be raised when a query with by-value parameters is executed.\par
When you prepare a statement that uses variables as parameters, the variables are bound to the statement. That means that if you update the values of the variables, the next time you execute the statement it will run with updated parameter values.\par
The combination of sqlsrv_prepare and {\b sqlsrv_execute} separates statement preparation and statement execution in to two function calls and can be used to execute parameterized queries. This function is ideal to execute a statement multiple times with different parameter values for each execution.\par
For alternative strategies for writing and reading large amounts of information, see {\b Batches of SQL Statements} and {\b BULK INSERT}.\par
For more information, see {\b How to: Retrieve Output Parameters Using the SQLSRV Driver.}\par
For additional Information see: {
\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Using Directional Parameters} \par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Updating Data (Microsoft Drivers for PHP for SQL Server)} \par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b How to: Perform Parameterized Queries} \par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b How to: Send Data as a Stream} \par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b SQLSRV Driver API Reference}\par}
{\b resource $conn The connection resource associated with the created statement.  string $tsql The Transact-SQL expression that corresponds to the created statement.  array $params [optional]: An array of values that correspond to parameters in a parameterized query. Each element of the array can be one of the following: a literal value, a reference to a PHP variable, or an array with the following structure: {\f2 array(&$value [, $direction [, $phpType [, $sqlType]]])}  The following table describes these array elements: }&$value - {\b A} literal value or a reference to a PHP variable. $direction[optional] - One of the following SQLSRV_PARAM_* constants used to indicate the parameter direction: SQLSRV_PARAM_IN, SQLSRV_PARAM_OUT, SQLSRV_PARAM_INOUT. The default value is SQLSRV_PARAM_IN. For more information about PHP constants, see {\b Constants (Microsoft Drivers for PHP for SQL Server)}. $phpType[optional] - {\b A} SQLSRV_PHPTYPE_* constant that specifies PHP data type of the returned value. $sqlType[optional] - {\b A} SQLSRV_SQLTYPE_* constant that specifies the SQL Server data type of the input value. {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{array\cell }{{\i $options} \cell }{[optional]: An associative array that sets query properties. The table below lists the supported keys and corresponding values:\par
\cell }
{\row }
}
QueryTimeout (int) - Sets the query timeout in seconds. By default, the driver will wait indefinitely for results. Any positive integer value.\par
SendStreamParamsAtExec (bool) - Configures the driver to send all stream data at execution (true), or to send stream data in chunks (false). By default, the value is set to true. For more information, see {\b sqlsrv_send_stream_data}.\par
Scrollable - For more information about these values, see {\b Specifying a Cursor Type and Selecting Rows}. {
\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
SQLSRV_CURSOR_FORWARD \par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
SQLSRV_CURSOR_STATIC \par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
SQLSRV_CURSOR_DYNAMIC \par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
SQLSRV_CURSOR_KEYSET \par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
SQLSRV_CURSOR_CLIENT_BUFFERED\par}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
resource|false {\b A} statement resource. If the statement resource cannot be created, false is returned. \par
}}}}
{\xe \v sqlsrv_query\:sqlsrv.php}
{\xe \v sqlsrv.php\:sqlsrv_query}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
sqlsrv_query (  {\i $conn},   {\i $tsql},   {\i $params} = {\f2 array()},   {\i $options} = {\f2 array()})}}
\par
{\bkmkstart AAAAAAANGL}
{\bkmkend AAAAAAANGL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Prepares and executes a Transact-SQL query.\par
\par
Prepares and executes a statement.\par
The sqlsrv_query function is well-suited for one-time queries and should be the default choice to execute queries unless special circumstances apply. This function provides a streamlined method to execute a query with a minimum amount of code. The sqlsrv_query function does both statement preparation and statement execution, and can be used to execute parameterized queries.\par
For more information, see {\b How to: Retrieve Output Parameters Using the SQLSRV Driver.}\par
For additional Information see: {
\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Using Directional Parameters} \par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Updating Data (Microsoft Drivers for PHP for SQL Server)} \par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b How to: Perform Parameterized Queries} \par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b How to: Send Data as a Stream} \par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b SQLSRV Driver API Reference}\par}
{\b resource $conn The connection resource associated with the prepared statement.  string $tsql The Transact-SQL expression that corresponds to the prepared statement.  array $params [optional]: An array of values that correspond to parameters in a parameterized query. Each element of the array can be one of the following: a literal value, a reference to a PHP variable, or an array with the following structure: {\f2 array($value [, $direction [, $phpType [, $sqlType]]])}  The following table describes these array elements: }&$value - {\b A} literal value, a PHP variable, or a PHP by-reference variable. $direction[optional] - One of the following SQLSRV_PARAM_* constants used to indicate the parameter direction: SQLSRV_PARAM_IN, SQLSRV_PARAM_OUT, SQLSRV_PARAM_INOUT. The default value is SQLSRV_PARAM_IN. For more information about PHP constants, see {\b Constants (Microsoft Drivers for PHP for SQL Server)}. $phpType[optional] - {\b A} SQLSRV_PHPTYPE_* constant that specifies PHP data type of the returned value. $sqlType[optional] - {\b A} SQLSRV_SQLTYPE_* constant that specifies the SQL Server data type of the input value. {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{array\cell }{{\i $options} \cell }{[optional]: An associative array that sets query properties. The table below lists the supported keys and corresponding values:\par
\cell }
{\row }
}
QueryTimeout (int) - Sets the query timeout in seconds. By default, the driver will wait indefinitely for results. Any positive integer value.\par
SendStreamParamsAtExec (bool) - Configures the driver to send all stream data at execution (true), or to send stream data in chunks (false). By default, the value is set to true. For more information, see {\b sqlsrv_send_stream_data}.\par
Scrollable - For more information about these values, see {\b Specifying a Cursor Type and Selecting Rows}. {
\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
SQLSRV_CURSOR_FORWARD \par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
SQLSRV_CURSOR_STATIC \par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
SQLSRV_CURSOR_DYNAMIC \par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
SQLSRV_CURSOR_KEYSET \par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
SQLSRV_CURSOR_CLIENT_BUFFERED\par}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
resource|false {\b A} statement resource. If the statement cannot be created and/or executed, false is returned. \par
}}}}
{\xe \v sqlsrv_rollback\:sqlsrv.php}
{\xe \v sqlsrv.php\:sqlsrv_rollback}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
sqlsrv_rollback (  {\i $conn})}}
\par
{\bkmkstart AAAAAAANGM}
{\bkmkend AAAAAAANGM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Rolls back a transaction.\par
\par
Rolls back the current transaction on the specified connection and returns the connection to the auto-commit mode. The current transaction includes all statements on the specified connection that were executed after the call to sqlsrv_begin_transaction and before any calls to {\b sqlsrv_rollback} or {\b sqlsrv_commit}.\par
The Microsoft Drivers for PHP for SQL Server is in auto-commit mode by default. This means that all queries are automatically committed upon success unless they have been designated as part of an explicit transaction by using {\b sqlsrv_begin_transaction}.\par
If sqlsrv_rollback is called on a connection that is not in an active transaction that was initiated with {\b sqlsrv_begin_transaction}, the call returns false and a Not in Transaction error is added to the error collection.\par
Additional Information at {\b How to Perform Transactions} and {\b SQLSRV Driver API Reference}\par
 {\b resource $conn The connection on which the transaction is active.  bool A Boolean value: true if the transaction was successfully rolled back. Otherwise, false. }\par
}}
{\xe \v sqlsrv_rows_affected\:sqlsrv.php}
{\xe \v sqlsrv.php\:sqlsrv_rows_affected}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
sqlsrv_rows_affected (  {\i $stmt})}}
\par
{\bkmkstart AAAAAAANGN}
{\bkmkend AAAAAAANGN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Returns the number of modified rows.\par
\par
Returns the number of rows modified by the last statement executed. This function does not return the number of rows returned by a SELECT statement.\par
Additional Information at {\b SQLSRV Driver API Reference}\par
{\b resource $stmt A statement resource corresponding to an executed statement.  int|false An integer indicating the number of rows modified by the last executed statement. If no rows were modified, zero (0) is returned. If no information about the number of modified rows is available, negative one (-1) is returned. If an error occurred in retrieving the number of modified rows, false is returned. }\par
}}
{\xe \v sqlsrv_send_stream_data\:sqlsrv.php}
{\xe \v sqlsrv.php\:sqlsrv_send_stream_data}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
sqlsrv_send_stream_data (  {\i $stmt})}}
\par
{\bkmkstart AAAAAAANGO}
{\bkmkend AAAAAAANGO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Sends up to eight kilobytes (8 KB) of data to the server with each call to the function.\par
\par
Sends data from parameter streams to the server. Up to eight kilobytes (8K) of data is sent with each call to sqlsrv_send_stream_data.\par
By default, all stream data is sent to the server when a query is executed. If this default behavior is not changed, you do not have to use sqlsrv_send_stream_data to send stream data to the server. For information about changing the default behavior, see the Parameters section of {\b sqlsrv_query} or {\b sqlsrv_prepare}.\par
Additional Information at {\b SQLSRV Driver API Reference}\par
{\b resource $stmt A statement resource corresponding to an executed statement.  bool Boolean : true if there is more data to be sent. Otherwise, false. }\par
}}
{\xe \v sqlsrv_server_info\:sqlsrv.php}
{\xe \v sqlsrv.php\:sqlsrv_server_info}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
sqlsrv_server_info (  {\i $conn})}}
\par
{\bkmkstart AAAAAAANGP}
{\bkmkend AAAAAAANGP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Provides information about the server.\par
\par
Returns information about the server. {\b A} connection must be established before calling this function.\par
Additional Information at {\b SQLSRV Driver API Reference}\par
{\b resource $conn The connection resource by which the client and server are connected.  array An associative array with the following keys: }CurrentDatabase - The database currently being targeted. SQLServerVersion - The version of SQL Server. SQLServerName - The name of the server. \par
}}
{\xe \v SQLSRV_SQLTYPE_BINARY\:sqlsrv.php}
{\xe \v sqlsrv.php\:SQLSRV_SQLTYPE_BINARY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
SQLSRV_SQLTYPE_BINARY (  {\i $byteCount})}}
\par
{\bkmkstart AAAAAAANGQ}
{\bkmkend AAAAAAANGQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Specifies a SQL Server binary field.\par
\par
In the documentation this is presented as a constant that accepts an arguement.\par
Additional Information at {\b SQLSRV Driver API Reference}\par
{\b int $byteCount Must be between 1 and 8000.  int Value to use in any place that accepts a SQLSRV_SQLTYPE_* constant to represent the 'binary' data type. }\par
}}
{\xe \v SQLSRV_SQLTYPE_CHAR\:sqlsrv.php}
{\xe \v sqlsrv.php\:SQLSRV_SQLTYPE_CHAR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
SQLSRV_SQLTYPE_CHAR (  {\i $charCount})}}
\par
{\bkmkstart AAAAAAANGR}
{\bkmkend AAAAAAANGR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Specifies a SQL Server char field.\par
\par
In the documentation this is presented as a constant that accepts an arguement.\par
Additional Information at {\b SQLSRV Driver API Reference}\par
{\b int $charCount Must be between 1 and 8000.  int Value to use in any place that accepts a SQLSRV_SQLTYPE_* constant to represent the char data type. }\par
}}
{\xe \v SQLSRV_SQLTYPE_DECIMAL\:sqlsrv.php}
{\xe \v sqlsrv.php\:SQLSRV_SQLTYPE_DECIMAL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
SQLSRV_SQLTYPE_DECIMAL (  {\i $precision},   {\i $scale})}}
\par
{\bkmkstart AAAAAAANGS}
{\bkmkend AAAAAAANGS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Specifies a SQL Server decimal field.\par
\par
In the documentation this is presented as a constant that accepts an arguement.\par
Additional Information at {\b SQLSRV Driver API Reference}\par
{\b int $precision Must be between 1 and 38.  int $scale Must be between 1 and $precision.  int Value to use in any place that accepts a SQLSRV_SQLTYPE_* constant to represent the decimal data type. }\par
}}
{\xe \v SQLSRV_SQLTYPE_NCHAR\:sqlsrv.php}
{\xe \v sqlsrv.php\:SQLSRV_SQLTYPE_NCHAR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
SQLSRV_SQLTYPE_NCHAR (  {\i $charCount})}}
\par
{\bkmkstart AAAAAAANGT}
{\bkmkend AAAAAAANGT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Specifies a SQL Server nchar field.\par
\par
In the documentation this is presented as a constant that accepts an arguement.\par
Additional Information at {\b SQLSRV Driver API Reference}\par
{\b int $charCount Must be between 1 and 4000.  int Value to use in any place that accepts a SQLSRV_SQLTYPE_* constant to represent the nchar data type. }\par
}}
{\xe \v SQLSRV_SQLTYPE_NUMERIC\:sqlsrv.php}
{\xe \v sqlsrv.php\:SQLSRV_SQLTYPE_NUMERIC}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
SQLSRV_SQLTYPE_NUMERIC (  {\i $precision},   {\i $scale})}}
\par
{\bkmkstart AAAAAAANGU}
{\bkmkend AAAAAAANGU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Specifies a SQL Server numeric field.\par
\par
In the documentation this is presented as a constant that accepts an arguement.\par
Additional Information at {\b SQLSRV Driver API Reference}\par
{\b int $precision Must be between 1 and 38.  int $scale Must be between 1 and $precision.  int Value to use in any place that accepts a SQLSRV_SQLTYPE_* constant to represent the numeric data type. }\par
}}
{\xe \v SQLSRV_SQLTYPE_NVARCHAR\:sqlsrv.php}
{\xe \v sqlsrv.php\:SQLSRV_SQLTYPE_NVARCHAR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
SQLSRV_SQLTYPE_NVARCHAR (  {\i $charCount})}}
\par
{\bkmkstart AAAAAAANGV}
{\bkmkend AAAAAAANGV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Specifies a SQL Server nvarchar field.\par
\par
In the documentation this is presented as a constant that accepts an arguement.\par
Additional Information at {\b SQLSRV Driver API Reference}\par
{\b int|string $charCount Must be between 1 and 4000 or 'max'.  int Value to use in any place that accepts a SQLSRV_SQLTYPE_* constant to represent the nvarchar data type. }\par
}}
{\xe \v SQLSRV_SQLTYPE_VARBINARY\:sqlsrv.php}
{\xe \v sqlsrv.php\:SQLSRV_SQLTYPE_VARBINARY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
SQLSRV_SQLTYPE_VARBINARY (  {\i $byteCount})}}
\par
{\bkmkstart AAAAAAANGW}
{\bkmkend AAAAAAANGW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Specifies a SQL Server varbinary field.\par
\par
In the documentation this is presented as a constant that accepts an arguement.\par
Additional Information at {\b SQLSRV Driver API Reference}\par
{\b int|string $byteCount Must be between 1 and 8000 or 'max'.  int Value to use in any place that accepts a SQLSRV_SQLTYPE_* constant to represent the varbinary data type. }\par
}}
{\xe \v SQLSRV_SQLTYPE_VARCHAR\:sqlsrv.php}
{\xe \v sqlsrv.php\:SQLSRV_SQLTYPE_VARCHAR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
SQLSRV_SQLTYPE_VARCHAR (  {\i $charCount})}}
\par
{\bkmkstart AAAAAAANGX}
{\bkmkend AAAAAAANGX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Specifies a SQL Server varchar filed.\par
\par
In the documentation this is presented as a constant that accepts an arguement.\par
Additional Information at {\b SQLSRV Driver API Reference}\par
{\b int|string $charCount Must be between 1 and 8000 or 'max'.  int Value to use in any place that accepts a SQLSRV_SQLTYPE_* constant to represent the varchar data type. }\par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variable Documentation\par
\pard\plain 
{\xe \v SQLSRV_CURSOR_CLIENT_BUFFERED\:sqlsrv.php}
{\xe \v sqlsrv.php\:SQLSRV_CURSOR_CLIENT_BUFFERED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const SQLSRV_CURSOR_CLIENT_BUFFERED 'buffered'}}
\par
{\bkmkstart AAAAAAANGY}
{\bkmkend AAAAAAANGY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Lets you access rows in any order.\par
\par
Creates a client-side cursor query.\par
Used when calling {\b sqlsrv_query} or {\b sqlsrv_prepare} to specify the kind of cursor that you can use in a result set. For information on using these constants, see {\b Specifying a Cursor Type and Selecting Rows}.\par
Additional Information at {\b SQLSRV Driver API Reference}\par
{\b https://docs.microsoft.com/en-us/sql/connect/php/constants-microsoft-drivers-for-php-for-sql-server}\par
}}
{\xe \v SQLSRV_CURSOR_DYNAMIC\:sqlsrv.php}
{\xe \v sqlsrv.php\:SQLSRV_CURSOR_DYNAMIC}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const SQLSRV_CURSOR_DYNAMIC 'dynamic'}}
\par
{\bkmkstart AAAAAAANGZ}
{\bkmkend AAAAAAANGZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Lets you access rows in any order and will reflect changes in the database.\par
\par
{\b sqlsrv_num_rows} returns an error for result sets created with this cursor type.\par
Used when calling {\b sqlsrv_query} or {\b sqlsrv_prepare} to specify the kind of cursor that you can use in a result set. For information on using these constants, see {\b Specifying a Cursor Type and Selecting Rows}.\par
Additional Information at {\b SQLSRV Driver API Reference}\par
{\b https://docs.microsoft.com/en-us/sql/connect/php/constants-microsoft-drivers-for-php-for-sql-server}\par
}}
{\xe \v SQLSRV_CURSOR_FORWARD\:sqlsrv.php}
{\xe \v sqlsrv.php\:SQLSRV_CURSOR_FORWARD}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const SQLSRV_CURSOR_FORWARD 'forward'}}
\par
{\bkmkstart AAAAAAANHA}
{\bkmkend AAAAAAANHA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Lets you move one row at a time starting at the first row of the result set until you reach the end of the result set.\par
\par
This is the default cursor type.\par
{\b sqlsrv_num_rows} returns an error for result sets created with this cursor type.\par
Used when calling {\b sqlsrv_query} or {\b sqlsrv_prepare} to specify the kind of cursor that you can use in a result set. For information on using these constants, see {\b Specifying a Cursor Type and Selecting Rows}.\par
Additional Information at {\b SQLSRV Driver API Reference}\par
{\b https://docs.microsoft.com/en-us/sql/connect/php/constants-microsoft-drivers-for-php-for-sql-server}\par
}}
{\xe \v SQLSRV_CURSOR_KEYSET\:sqlsrv.php}
{\xe \v sqlsrv.php\:SQLSRV_CURSOR_KEYSET}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const SQLSRV_CURSOR_KEYSET 'keyset'}}
\par
{\bkmkstart AAAAAAANHB}
{\bkmkend AAAAAAANHB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Lets you access rows in any order.\par
\par
However, a keyset cursor does not update the row count if a row is deleted from the table (a deleted row is returned with no values).\par
Used when calling {\b sqlsrv_query} or {\b sqlsrv_prepare} to specify the kind of cursor that you can use in a result set. For information on using these constants, see {\b Specifying a Cursor Type and Selecting Rows}.\par
Additional Information at {\b SQLSRV Driver API Reference}\par
{\b https://docs.microsoft.com/en-us/sql/connect/php/constants-microsoft-drivers-for-php-for-sql-server}\par
}}
{\xe \v SQLSRV_CURSOR_STATIC\:sqlsrv.php}
{\xe \v sqlsrv.php\:SQLSRV_CURSOR_STATIC}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const SQLSRV_CURSOR_STATIC 'static'}}
\par
{\bkmkstart AAAAAAANHC}
{\bkmkend AAAAAAANHC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Lets you access rows in any order but will not reflect changes in the database.\par
\par
Used when calling {\b sqlsrv_query} or {\b sqlsrv_prepare} to specify the kind of cursor that you can use in a result set. For information on using these constants, see {\b Specifying a Cursor Type and Selecting Rows}.\par
Additional Information at {\b SQLSRV Driver API Reference}\par
{\b https://docs.microsoft.com/en-us/sql/connect/php/constants-microsoft-drivers-for-php-for-sql-server}\par
}}
{\xe \v SQLSRV_ENC_BINARY\:sqlsrv.php}
{\xe \v sqlsrv.php\:SQLSRV_ENC_BINARY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const SQLSRV_ENC_BINARY 'binary'}}
\par
{\bkmkstart AAAAAAANHD}
{\bkmkend AAAAAAANHD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Binary Encoding\par
\par
Data is returned as a raw byte stream from the server without performing encoding or translation.\par
Used with {\b sqlsrv_prepare}, {\b sqlsrv_query} and {\b sqlsrv_get_field} to request a field be return as a specific PHP type.\par
This is used with {\b SQLSRV_PHPTYPE_STREAM} and {\b SQLSRV_PHPTYPE_STRING} to specify the encoding of those PHP types types.\par
Additional Information at {\b SQLSRV Driver API Reference}\par
{\b https://docs.microsoft.com/en-us/sql/connect/php/constants-microsoft-drivers-for-php-for-sql-server}\par
}}
{\xe \v SQLSRV_ENC_CHAR\:sqlsrv.php}
{\xe \v sqlsrv.php\:SQLSRV_ENC_CHAR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const SQLSRV_ENC_CHAR 'char'}}
\par
{\bkmkstart AAAAAAANHE}
{\bkmkend AAAAAAANHE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Character Encoding\par
\par
Data is returned in 8-bit characters as specified in the code page of the Windows locale that is set on the system. Any multi-byte characters or characters that do not map into this code page are substituted with a single byte question mark (?) character.\par
This is the default encoding.\par
Used with {\b sqlsrv_prepare}, {\b sqlsrv_query} and {\b sqlsrv_get_field} to request a field be return as a specific PHP type.\par
This is used with {\b SQLSRV_PHPTYPE_STREAM} and {\b SQLSRV_PHPTYPE_STRING} to specify the encoding of those PHP types types.\par
Additional Information at {\b SQLSRV Driver API Reference}\par
{\b https://docs.microsoft.com/en-us/sql/connect/php/constants-microsoft-drivers-for-php-for-sql-server}\par
}}
{\xe \v SQLSRV_ERR_ALL\:sqlsrv.php}
{\xe \v sqlsrv.php\:SQLSRV_ERR_ALL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const SQLSRV_ERR_ALL 2}}
\par
{\bkmkstart AAAAAAANHF}
{\bkmkend AAAAAAANHF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Errors and warnings generated on the last sqlsrv function call are returned.\par
\par
This is the default value.\par
Used to specify if {\b sqlsrv_errors} returns errors, warnings, or both.\par
Additional Information at {\b SQLSRV Driver API Reference}\par
 {\b https://docs.microsoft.com/en-us/sql/connect/php/constants-microsoft-drivers-for-php-for-sql-server}\par
}}
{\xe \v SQLSRV_ERR_ERRORS\:sqlsrv.php}
{\xe \v sqlsrv.php\:SQLSRV_ERR_ERRORS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const SQLSRV_ERR_ERRORS 0}}
\par
{\bkmkstart AAAAAAANHG}
{\bkmkend AAAAAAANHG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
SQLSRV Extension Stub File.\par
Current through version 3.0.1 (rel March 22, 2012) of Microsoft Drivers for PHP for SQL Server.\par
Documentation taken from {\b http://msdn.microsoft.com/en-us/library/ee229547(v=sql.10).aspx} on Mar 22, 2012. Additional information from using {\b Reflection}. Errors generated on the last sqlsrv function call are returned.\par
\par
Used to specify if {\b sqlsrv_errors} returns errors, warnings, or both.\par
Additional Information at {\b SQLSRV Driver API Reference}\par
{\b https://docs.microsoft.com/en-us/sql/connect/php/constants-microsoft-drivers-for-php-for-sql-server}\par
}}
{\xe \v SQLSRV_ERR_WARNINGS\:sqlsrv.php}
{\xe \v sqlsrv.php\:SQLSRV_ERR_WARNINGS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const SQLSRV_ERR_WARNINGS 1}}
\par
{\bkmkstart AAAAAAANHH}
{\bkmkend AAAAAAANHH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Warnings generated on the last sqlsrv function call are returned.\par
\par
Used to specify if {\b sqlsrv_errors} returns errors, warnings, or both.\par
Additional Information at {\b SQLSRV Driver API Reference}\par
 {\b https://docs.microsoft.com/en-us/sql/connect/php/constants-microsoft-drivers-for-php-for-sql-server}\par
}}
{\xe \v SQLSRV_FETCH_ASSOC\:sqlsrv.php}
{\xe \v sqlsrv.php\:SQLSRV_FETCH_ASSOC}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const SQLSRV_FETCH_ASSOC 2}}
\par
{\bkmkstart AAAAAAANHI}
{\bkmkend AAAAAAANHI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Returns an associative array.\par
\par
{\b sqlsrv_fetch_array} returns the next row of data as an associative array.\par
Additional Information at {\b SQLSRV Driver API Reference}\par
 {\b https://docs.microsoft.com/en-us/sql/connect/php/constants-microsoft-drivers-for-php-for-sql-server}\par
}}
{\xe \v SQLSRV_FETCH_BOTH\:sqlsrv.php}
{\xe \v sqlsrv.php\:SQLSRV_FETCH_BOTH}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const SQLSRV_FETCH_BOTH 3}}
\par
{\bkmkstart AAAAAAANHJ}
{\bkmkend AAAAAAANHJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Returns both a numeric and associative array.\par
\par
{\b sqlsrv_fetch_array} returns the next row of data as an array with both numeric and associative keys.\par
This is the default value.\par
Additional Information at {\b SQLSRV Driver API Reference}\par
{\b https://docs.microsoft.com/en-us/sql/connect/php/constants-microsoft-drivers-for-php-for-sql-server}\par
}}
{\xe \v SQLSRV_FETCH_NUMERIC\:sqlsrv.php}
{\xe \v sqlsrv.php\:SQLSRV_FETCH_NUMERIC}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const SQLSRV_FETCH_NUMERIC 1}}
\par
{\bkmkstart AAAAAAANHK}
{\bkmkend AAAAAAANHK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Returns numerically indexed array.\par
\par
{\b sqlsrv_fetch_array} returns the next row of data as a numerically indexed array.\par
Additional Information at {\b SQLSRV Driver API Reference}\par
 {\b https://docs.microsoft.com/en-us/sql/connect/php/constants-microsoft-drivers-for-php-for-sql-server}\par
}}
{\xe \v SQLSRV_LOG_SEVERITY_ALL\:sqlsrv.php}
{\xe \v sqlsrv.php\:SQLSRV_LOG_SEVERITY_ALL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const SQLSRV_LOG_SEVERITY_ALL -1}}
\par
{\bkmkstart AAAAAAANHL}
{\bkmkend AAAAAAANHL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Specifies that errors, warnings, and notices will be logged.\par
\par
Used as the value for the LogSeverity setting with {\b sqlsrv_configure}.\par
Additional Information at {\b SQLSRV Driver API Reference}\par
 {\b https://docs.microsoft.com/en-us/sql/connect/php/constants-microsoft-drivers-for-php-for-sql-server}\par
}}
{\xe \v SQLSRV_LOG_SEVERITY_ERROR\:sqlsrv.php}
{\xe \v sqlsrv.php\:SQLSRV_LOG_SEVERITY_ERROR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const SQLSRV_LOG_SEVERITY_ERROR 1}}
\par
{\bkmkstart AAAAAAANHM}
{\bkmkend AAAAAAANHM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Specifies that errors will be logged.\par
\par
Used as the value for the LogSeverity setting with {\b sqlsrv_configure}.\par
Additional Information at {\b SQLSRV Driver API Reference}\par
 {\b https://docs.microsoft.com/en-us/sql/connect/php/constants-microsoft-drivers-for-php-for-sql-server}\par
}}
{\xe \v SQLSRV_LOG_SEVERITY_NOTICE\:sqlsrv.php}
{\xe \v sqlsrv.php\:SQLSRV_LOG_SEVERITY_NOTICE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const SQLSRV_LOG_SEVERITY_NOTICE 4}}
\par
{\bkmkstart AAAAAAANHN}
{\bkmkend AAAAAAANHN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Specifies that notices will be logged.\par
\par
Used as the value for the LogSeverity setting with {\b sqlsrv_configure}.\par
Additional Information at {\b SQLSRV Driver API Reference}\par
 {\b https://docs.microsoft.com/en-us/sql/connect/php/constants-microsoft-drivers-for-php-for-sql-server}\par
}}
{\xe \v SQLSRV_LOG_SEVERITY_WARNING\:sqlsrv.php}
{\xe \v sqlsrv.php\:SQLSRV_LOG_SEVERITY_WARNING}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const SQLSRV_LOG_SEVERITY_WARNING 2}}
\par
{\bkmkstart AAAAAAANHO}
{\bkmkend AAAAAAANHO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Specifies that warnings will be logged.\par
\par
Used as the value for the LogSeverity setting with {\b sqlsrv_configure}.\par
Additional Information at {\b SQLSRV Driver API Reference}\par
 {\b https://docs.microsoft.com/en-us/sql/connect/php/constants-microsoft-drivers-for-php-for-sql-server}\par
}}
{\xe \v SQLSRV_LOG_SYSTEM_ALL\:sqlsrv.php}
{\xe \v sqlsrv.php\:SQLSRV_LOG_SYSTEM_ALL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const SQLSRV_LOG_SYSTEM_ALL -1}}
\par
{\bkmkstart AAAAAAANHP}
{\bkmkend AAAAAAANHP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Turns on logging of all subsystems.\par
\par
Used as the value for the LogSubsystems setting with {\b sqlsrv_configure}.\par
 Additional Information at {\b SQLSRV Driver API Reference}\par
 {\b https://docs.microsoft.com/en-us/sql/connect/php/constants-microsoft-drivers-for-php-for-sql-server}\par
}}
{\xe \v SQLSRV_LOG_SYSTEM_CONN\:sqlsrv.php}
{\xe \v sqlsrv.php\:SQLSRV_LOG_SYSTEM_CONN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const SQLSRV_LOG_SYSTEM_CONN 2}}
\par
{\bkmkstart AAAAAAANHQ}
{\bkmkend AAAAAAANHQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Turns on logging of connection activity.\par
\par
Used as the value for the LogSubsystems setting with {\b sqlsrv_configure}.\par
Additional Information at {\b SQLSRV Driver API Reference}\par
 {\b https://docs.microsoft.com/en-us/sql/connect/php/constants-microsoft-drivers-for-php-for-sql-server}\par
}}
{\xe \v SQLSRV_LOG_SYSTEM_INIT\:sqlsrv.php}
{\xe \v sqlsrv.php\:SQLSRV_LOG_SYSTEM_INIT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const SQLSRV_LOG_SYSTEM_INIT 1}}
\par
{\bkmkstart AAAAAAANHR}
{\bkmkend AAAAAAANHR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Turns on logging of initialization activity.\par
\par
Used as the value for the LogSubsystems setting with {\b sqlsrv_configure}.\par
Additional Information at {\b SQLSRV Driver API Reference}\par
 {\b https://docs.microsoft.com/en-us/sql/connect/php/constants-microsoft-drivers-for-php-for-sql-server}\par
}}
{\xe \v SQLSRV_LOG_SYSTEM_OFF\:sqlsrv.php}
{\xe \v sqlsrv.php\:SQLSRV_LOG_SYSTEM_OFF}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const SQLSRV_LOG_SYSTEM_OFF 0}}
\par
{\bkmkstart AAAAAAANHS}
{\bkmkend AAAAAAANHS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Turns logging off.\par
\par
Used as the value for the LogSubsystems setting with {\b sqlsrv_configure}.\par
Additional Information at {\b SQLSRV Driver API Reference}\par
 {\b https://docs.microsoft.com/en-us/sql/connect/php/constants-microsoft-drivers-for-php-for-sql-server}\par
}}
{\xe \v SQLSRV_LOG_SYSTEM_STMT\:sqlsrv.php}
{\xe \v sqlsrv.php\:SQLSRV_LOG_SYSTEM_STMT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const SQLSRV_LOG_SYSTEM_STMT 4}}
\par
{\bkmkstart AAAAAAANHT}
{\bkmkend AAAAAAANHT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Turns on logging of statement activity.\par
\par
Used as the value for the LogSubsystems setting with {\b sqlsrv_configure}.\par
Additional Information at {\b SQLSRV Driver API Reference}\par
 {\b https://docs.microsoft.com/en-us/sql/connect/php/constants-microsoft-drivers-for-php-for-sql-server}\par
}}
{\xe \v SQLSRV_LOG_SYSTEM_UTIL\:sqlsrv.php}
{\xe \v sqlsrv.php\:SQLSRV_LOG_SYSTEM_UTIL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const SQLSRV_LOG_SYSTEM_UTIL 8}}
\par
{\bkmkstart AAAAAAANHU}
{\bkmkend AAAAAAANHU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Turns on logging of error functions activity (such as handle_error and handle_warning).\par
\par
Used as the value for the LogSubsystems setting with {\b sqlsrv_configure}.\par
Additional Information at {\b SQLSRV Driver API Reference}\par
 {\b https://docs.microsoft.com/en-us/sql/connect/php/constants-microsoft-drivers-for-php-for-sql-server}\par
}}
{\xe \v SQLSRV_NULLABLE_NO\:sqlsrv.php}
{\xe \v sqlsrv.php\:SQLSRV_NULLABLE_NO}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const SQLSRV_NULLABLE_NO 0}}
\par
{\bkmkstart AAAAAAANHV}
{\bkmkend AAAAAAANHV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
The column is not nullable.\par
\par
You can compare the value of the Nullable key that is returned by {\b sqlsrv_field_metadata} to determine the column's nullable status.\par
Additional Information at {\b SQLSRV Driver API Reference}\par
{\b https://docs.microsoft.com/en-us/sql/connect/php/constants-microsoft-drivers-for-php-for-sql-server}\par
}}
{\xe \v SQLSRV_NULLABLE_UNKNOWN\:sqlsrv.php}
{\xe \v sqlsrv.php\:SQLSRV_NULLABLE_UNKNOWN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const SQLSRV_NULLABLE_UNKNOWN 2}}
\par
{\bkmkstart AAAAAAANHW}
{\bkmkend AAAAAAANHW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
It is not known if the column is nullable.\par
\par
You can compare the value of the Nullable key that is returned by {\b sqlsrv_field_metadata} to determine the column's nullable status.\par
Additional Information at {\b SQLSRV Driver API Reference}\par
{\b https://docs.microsoft.com/en-us/sql/connect/php/constants-microsoft-drivers-for-php-for-sql-server}\par
}}
{\xe \v SQLSRV_NULLABLE_YES\:sqlsrv.php}
{\xe \v sqlsrv.php\:SQLSRV_NULLABLE_YES}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const SQLSRV_NULLABLE_YES 1}}
\par
{\bkmkstart AAAAAAANHX}
{\bkmkend AAAAAAANHX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
The column is nullable.\par
\par
You can compare the value of the Nullable key that is returned by {\b sqlsrv_field_metadata} to determine the column's nullable status.\par
Additional Information at {\b SQLSRV Driver API Reference}\par
{\b https://docs.microsoft.com/en-us/sql/connect/php/constants-microsoft-drivers-for-php-for-sql-server}\par
}}
{\xe \v SQLSRV_PARAM_IN\:sqlsrv.php}
{\xe \v sqlsrv.php\:SQLSRV_PARAM_IN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const SQLSRV_PARAM_IN 1}}
\par
{\bkmkstart AAAAAAANHY}
{\bkmkend AAAAAAANHY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Indicates an input parameter.\par
\par
Used for specifying parameter direction when you call {\b sqlsrv_query} or {\b sqlsrv_prepare}.\par
Additional Information at {\b SQLSRV Driver API Reference}\par
 {\b https://docs.microsoft.com/en-us/sql/connect/php/constants-microsoft-drivers-for-php-for-sql-server}\par
}}
{\xe \v SQLSRV_PARAM_INOUT\:sqlsrv.php}
{\xe \v sqlsrv.php\:SQLSRV_PARAM_INOUT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const SQLSRV_PARAM_INOUT 2}}
\par
{\bkmkstart AAAAAAANHZ}
{\bkmkend AAAAAAANHZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Indicates a bidirectional parameter.\par
\par
Used for specifying parameter direction when you call {\b sqlsrv_query} or {\b sqlsrv_prepare}.\par
Additional Information at {\b SQLSRV Driver API Reference}\par
 {\b https://docs.microsoft.com/en-us/sql/connect/php/constants-microsoft-drivers-for-php-for-sql-server}\par
}}
{\xe \v SQLSRV_PARAM_OUT\:sqlsrv.php}
{\xe \v sqlsrv.php\:SQLSRV_PARAM_OUT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const SQLSRV_PARAM_OUT 4}}
\par
{\bkmkstart AAAAAAANIA}
{\bkmkend AAAAAAANIA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Indicates an output parameter.\par
\par
Used for specifying parameter direction when you call {\b sqlsrv_query} or {\b sqlsrv_prepare}.\par
Additional Information at {\b SQLSRV Driver API Reference}\par
 {\b https://docs.microsoft.com/en-us/sql/connect/php/constants-microsoft-drivers-for-php-for-sql-server}\par
}}
{\xe \v SQLSRV_PHPTYPE_DATETIME\:sqlsrv.php}
{\xe \v sqlsrv.php\:SQLSRV_PHPTYPE_DATETIME}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const SQLSRV_PHPTYPE_DATETIME 4}}
\par
{\bkmkstart AAAAAAANIB}
{\bkmkend AAAAAAANIB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Datetime\par
\par
Used with {\b sqlsrv_prepare}, {\b sqlsrv_query} and {\b sqlsrv_get_field} to request a field be return as a specific PHP type.\par
Additional Information at {\b SQLSRV Driver API Reference}\par
 {\b https://docs.microsoft.com/en-us/sql/connect/php/constants-microsoft-drivers-for-php-for-sql-server}\par
}}
{\xe \v SQLSRV_PHPTYPE_FLOAT\:sqlsrv.php}
{\xe \v sqlsrv.php\:SQLSRV_PHPTYPE_FLOAT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const SQLSRV_PHPTYPE_FLOAT 3}}
\par
{\bkmkstart AAAAAAANIC}
{\bkmkend AAAAAAANIC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Float\par
\par
Used with {\b sqlsrv_prepare}, {\b sqlsrv_query} and {\b sqlsrv_get_field} to request a field be return as a specific PHP type.\par
Additional Information at {\b SQLSRV Driver API Reference}\par
 {\b https://docs.microsoft.com/en-us/sql/connect/php/constants-microsoft-drivers-for-php-for-sql-server}\par
}}
{\xe \v SQLSRV_PHPTYPE_INT\:sqlsrv.php}
{\xe \v sqlsrv.php\:SQLSRV_PHPTYPE_INT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const SQLSRV_PHPTYPE_INT 2}}
\par
{\bkmkstart AAAAAAANID}
{\bkmkend AAAAAAANID}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Integer\par
\par
Used with {\b sqlsrv_prepare}, {\b sqlsrv_query} and {\b sqlsrv_get_field} to request a field be return as a specific PHP type.\par
Additional Information at {\b SQLSRV Driver API Reference}\par
 {\b https://docs.microsoft.com/en-us/sql/connect/php/constants-microsoft-drivers-for-php-for-sql-server}\par
}}
{\xe \v SQLSRV_PHPTYPE_NULL\:sqlsrv.php}
{\xe \v sqlsrv.php\:SQLSRV_PHPTYPE_NULL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const SQLSRV_PHPTYPE_NULL 1}}
\par
{\bkmkstart AAAAAAANIE}
{\bkmkend AAAAAAANIE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Null\par
\par
Used with {\b sqlsrv_prepare}, {\b sqlsrv_query} and {\b sqlsrv_get_field} to request a field be return as a specific PHP type.\par
Additional Information at {\b SQLSRV Driver API Reference}\par
 {\b https://docs.microsoft.com/en-us/sql/connect/php/constants-microsoft-drivers-for-php-for-sql-server}\par
}}
{\xe \v SQLSRV_SCROLL_ABSOLUTE\:sqlsrv.php}
{\xe \v sqlsrv.php\:SQLSRV_SCROLL_ABSOLUTE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const SQLSRV_SCROLL_ABSOLUTE 5}}
\par
{\bkmkstart AAAAAAANIF}
{\bkmkend AAAAAAANIF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Specifies the row specified with the offset parameter.\par
\par
Used with {\b sqlsrv_fetch}, {\b sqlsrv_fetch_array}, or {\b sqlsrv_fetch_object} to specify a row.\par
Used when calling {\b sqlsrv_query} or {\b sqlsrv_prepare} to specify which row to select in the result set. For information on using these constants, see {\b Specifying a Cursor Type and Selecting Rows}.\par
Additional Information at {\b SQLSRV Driver API Reference}\par
 {\b https://docs.microsoft.com/en-us/sql/connect/php/constants-microsoft-drivers-for-php-for-sql-server}\par
}}
{\xe \v SQLSRV_SCROLL_FIRST\:sqlsrv.php}
{\xe \v sqlsrv.php\:SQLSRV_SCROLL_FIRST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const SQLSRV_SCROLL_FIRST 2}}
\par
{\bkmkstart AAAAAAANIG}
{\bkmkend AAAAAAANIG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Specifies the first row in the result set.\par
\par
Used with {\b sqlsrv_fetch}, {\b sqlsrv_fetch_array}, or {\b sqlsrv_fetch_object} to specify a row.\par
Used when calling {\b sqlsrv_query} or {\b sqlsrv_prepare} to specify which row to select in the result set. For information on using these constants, see {\b Specifying a Cursor Type and Selecting Rows}.\par
Additional Information at {\b SQLSRV Driver API Reference}\par
{\b https://docs.microsoft.com/en-us/sql/connect/php/constants-microsoft-drivers-for-php-for-sql-server}\par
}}
{\xe \v SQLSRV_SCROLL_LAST\:sqlsrv.php}
{\xe \v sqlsrv.php\:SQLSRV_SCROLL_LAST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const SQLSRV_SCROLL_LAST 3}}
\par
{\bkmkstart AAAAAAANIH}
{\bkmkend AAAAAAANIH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Specifies the last row in the result set.\par
\par
Used with {\b sqlsrv_fetch}, {\b sqlsrv_fetch_array}, or {\b sqlsrv_fetch_object} to specify a row.\par
Used when calling {\b sqlsrv_query} or {\b sqlsrv_prepare} to specify which row to select in the result set. For information on using these constants, see {\b Specifying a Cursor Type and Selecting Rows}.\par
Additional Information at {\b SQLSRV Driver API Reference}\par
{\b https://docs.microsoft.com/en-us/sql/connect/php/constants-microsoft-drivers-for-php-for-sql-server}\par
}}
{\xe \v SQLSRV_SCROLL_NEXT\:sqlsrv.php}
{\xe \v sqlsrv.php\:SQLSRV_SCROLL_NEXT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const SQLSRV_SCROLL_NEXT 1}}
\par
{\bkmkstart AAAAAAANII}
{\bkmkend AAAAAAANII}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Specifies the next row.\par
\par
This is the default value, if you do not specify the row parameter for a scrollable result set.\par
Used with {\b sqlsrv_fetch}, {\b sqlsrv_fetch_array}, or {\b sqlsrv_fetch_object} to specify a row.\par
Used when calling {\b sqlsrv_query} or {\b sqlsrv_prepare} to specify which row to select in the result set. For information on using these constants, see {\b Specifying a Cursor Type and Selecting Rows}.\par
Additional Information at {\b SQLSRV Driver API Reference}\par
{\b https://docs.microsoft.com/en-us/sql/connect/php/constants-microsoft-drivers-for-php-for-sql-server}\par
}}
{\xe \v SQLSRV_SCROLL_PRIOR\:sqlsrv.php}
{\xe \v sqlsrv.php\:SQLSRV_SCROLL_PRIOR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const SQLSRV_SCROLL_PRIOR 4}}
\par
{\bkmkstart AAAAAAANIJ}
{\bkmkend AAAAAAANIJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Specifies the row before the current row.\par
\par
Used with {\b sqlsrv_fetch}, {\b sqlsrv_fetch_array}, or {\b sqlsrv_fetch_object} to specify a row.\par
Used when calling {\b sqlsrv_query} or {\b sqlsrv_prepare} to specify which row to select in the result set. For information on using these constants, see {\b Specifying a Cursor Type and Selecting Rows}.\par
Additional Information at {\b SQLSRV Driver API Reference}\par
{\b https://docs.microsoft.com/en-us/sql/connect/php/constants-microsoft-drivers-for-php-for-sql-server}\par
}}
{\xe \v SQLSRV_SCROLL_RELATIVE\:sqlsrv.php}
{\xe \v sqlsrv.php\:SQLSRV_SCROLL_RELATIVE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const SQLSRV_SCROLL_RELATIVE 6}}
\par
{\bkmkstart AAAAAAANIK}
{\bkmkend AAAAAAANIK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Specifies the row specified with the offset parameter from the current row.\par
\par
Used with {\b sqlsrv_fetch}, {\b sqlsrv_fetch_array}, or {\b sqlsrv_fetch_object} to specify a row.\par
Used when calling {\b sqlsrv_query} or {\b sqlsrv_prepare} to specify which row to select in the result set. For information on using these constants, see {\b Specifying a Cursor Type and Selecting Rows}.\par
Additional Information at {\b SQLSRV Driver API Reference}\par
{\b https://docs.microsoft.com/en-us/sql/connect/php/constants-microsoft-drivers-for-php-for-sql-server}\par
}}
{\xe \v SQLSRV_SQLTYPE_BIGINT\:sqlsrv.php}
{\xe \v sqlsrv.php\:SQLSRV_SQLTYPE_BIGINT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const SQLSRV_SQLTYPE_BIGINT -5}}
\par
{\bkmkstart AAAAAAANIL}
{\bkmkend AAAAAAANIL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
bigint.\par
\par
Used when calling {\b sqlsrv_query} or {\b sqlsrv_prepare} to specify the SQL Server data type of a parameter.\par
Additional Information at {\b SQLSRV Driver API Reference}\par
 {\b https://docs.microsoft.com/en-us/sql/connect/php/constants-microsoft-drivers-for-php-for-sql-server}\par
}}
{\xe \v SQLSRV_SQLTYPE_BIT\:sqlsrv.php}
{\xe \v sqlsrv.php\:SQLSRV_SQLTYPE_BIT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const SQLSRV_SQLTYPE_BIT -7}}
\par
{\bkmkstart AAAAAAANIM}
{\bkmkend AAAAAAANIM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
bit.\par
\par
Used when calling {\b sqlsrv_query} or {\b sqlsrv_prepare} to specify the SQL Server data type of a parameter.\par
Additional Information at {\b SQLSRV Driver API Reference}\par
{\b https://docs.microsoft.com/en-us/sql/connect/php/constants-microsoft-drivers-for-php-for-sql-server}\par
}}
{\xe \v SQLSRV_SQLTYPE_DATE\:sqlsrv.php}
{\xe \v sqlsrv.php\:SQLSRV_SQLTYPE_DATE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const SQLSRV_SQLTYPE_DATE 5211}}
\par
{\bkmkstart AAAAAAANIN}
{\bkmkend AAAAAAANIN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
date.\par
\par
Used when calling {\b sqlsrv_query} or {\b sqlsrv_prepare} to specify the SQL Server data type of a parameter.\par
Additional Information at {\b SQLSRV Driver API Reference}\par
 {\b https://docs.microsoft.com/en-us/sql/connect/php/constants-microsoft-drivers-for-php-for-sql-server}\par
}}
{\xe \v SQLSRV_SQLTYPE_DATETIME\:sqlsrv.php}
{\xe \v sqlsrv.php\:SQLSRV_SQLTYPE_DATETIME}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const SQLSRV_SQLTYPE_DATETIME 25177693}}
\par
{\bkmkstart AAAAAAANIO}
{\bkmkend AAAAAAANIO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
datetime.\par
\par
Used when calling {\b sqlsrv_query} or {\b sqlsrv_prepare} to specify the SQL Server data type of a parameter.\par
Additional Information at {\b SQLSRV Driver API Reference}\par
 {\b https://docs.microsoft.com/en-us/sql/connect/php/constants-microsoft-drivers-for-php-for-sql-server}\par
}}
{\xe \v SQLSRV_SQLTYPE_DATETIME2\:sqlsrv.php}
{\xe \v sqlsrv.php\:SQLSRV_SQLTYPE_DATETIME2}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const SQLSRV_SQLTYPE_DATETIME2 58734173}}
\par
{\bkmkstart AAAAAAANIP}
{\bkmkend AAAAAAANIP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
datetime2.\par
\par
Used when calling {\b sqlsrv_query} or {\b sqlsrv_prepare} to specify the SQL Server data type of a parameter.\par
Additional Information at {\b SQLSRV Driver API Reference}\par
 {\b https://docs.microsoft.com/en-us/sql/connect/php/constants-microsoft-drivers-for-php-for-sql-server}\par
}}
{\xe \v SQLSRV_SQLTYPE_DATETIMEOFFSET\:sqlsrv.php}
{\xe \v sqlsrv.php\:SQLSRV_SQLTYPE_DATETIMEOFFSET}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const SQLSRV_SQLTYPE_DATETIMEOFFSET 58738021}}
\par
{\bkmkstart AAAAAAANIQ}
{\bkmkend AAAAAAANIQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
datetimeoffset.\par
\par
Used when calling {\b sqlsrv_query} or {\b sqlsrv_prepare} to specify the SQL Server data type of a parameter.\par
Additional Information at {\b SQLSRV Driver API Reference}\par
 {\b https://docs.microsoft.com/en-us/sql/connect/php/constants-microsoft-drivers-for-php-for-sql-server}\par
}}
{\xe \v SQLSRV_SQLTYPE_FLOAT\:sqlsrv.php}
{\xe \v sqlsrv.php\:SQLSRV_SQLTYPE_FLOAT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const SQLSRV_SQLTYPE_FLOAT 6}}
\par
{\bkmkstart AAAAAAANIR}
{\bkmkend AAAAAAANIR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
float.\par
\par
Used when calling {\b sqlsrv_query} or {\b sqlsrv_prepare} to specify the SQL Server data type of a parameter.\par
Additional Information at {\b SQLSRV Driver API Reference}\par
 {\b https://docs.microsoft.com/en-us/sql/connect/php/constants-microsoft-drivers-for-php-for-sql-server}\par
}}
{\xe \v SQLSRV_SQLTYPE_IMAGE\:sqlsrv.php}
{\xe \v sqlsrv.php\:SQLSRV_SQLTYPE_IMAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const SQLSRV_SQLTYPE_IMAGE -4}}
\par
{\bkmkstart AAAAAAANIS}
{\bkmkend AAAAAAANIS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
image.\par
\par
Used when calling {\b sqlsrv_query} or {\b sqlsrv_prepare} to specify the SQL Server data type of a parameter.\par
Additional Information at {\b SQLSRV Driver API Reference}\par
 {\b https://docs.microsoft.com/en-us/sql/connect/php/constants-microsoft-drivers-for-php-for-sql-server}\par
}}
{\xe \v SQLSRV_SQLTYPE_INT\:sqlsrv.php}
{\xe \v sqlsrv.php\:SQLSRV_SQLTYPE_INT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const SQLSRV_SQLTYPE_INT 4}}
\par
{\bkmkstart AAAAAAANIT}
{\bkmkend AAAAAAANIT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
int.\par
\par
Used when calling {\b sqlsrv_query} or {\b sqlsrv_prepare} to specify the SQL Server data type of a parameter.\par
Additional Information at {\b SQLSRV Driver API Reference}\par
 {\b https://docs.microsoft.com/en-us/sql/connect/php/constants-microsoft-drivers-for-php-for-sql-server}\par
}}
{\xe \v SQLSRV_SQLTYPE_MONEY\:sqlsrv.php}
{\xe \v sqlsrv.php\:SQLSRV_SQLTYPE_MONEY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const SQLSRV_SQLTYPE_MONEY 33564163}}
\par
{\bkmkstart AAAAAAANIU}
{\bkmkend AAAAAAANIU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
money.\par
\par
Used when calling {\b sqlsrv_query} or {\b sqlsrv_prepare} to specify the SQL Server data type of a parameter.\par
Additional Information at {\b SQLSRV Driver API Reference}\par
 {\b https://docs.microsoft.com/en-us/sql/connect/php/constants-microsoft-drivers-for-php-for-sql-server}\par
}}
{\xe \v SQLSRV_SQLTYPE_NTEXT\:sqlsrv.php}
{\xe \v sqlsrv.php\:SQLSRV_SQLTYPE_NTEXT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const SQLSRV_SQLTYPE_NTEXT -10}}
\par
{\bkmkstart AAAAAAANIV}
{\bkmkend AAAAAAANIV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
ntext.\par
\par
Used when calling {\b sqlsrv_query} or {\b sqlsrv_prepare} to specify the SQL Server data type of a parameter.\par
Additional Information at {\b SQLSRV Driver API Reference}\par
 {\b https://docs.microsoft.com/en-us/sql/connect/php/constants-microsoft-drivers-for-php-for-sql-server}\par
}}
{\xe \v SQLSRV_SQLTYPE_REAL\:sqlsrv.php}
{\xe \v sqlsrv.php\:SQLSRV_SQLTYPE_REAL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const SQLSRV_SQLTYPE_REAL 7}}
\par
{\bkmkstart AAAAAAANIW}
{\bkmkend AAAAAAANIW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
real.\par
\par
Used when calling {\b sqlsrv_query} or {\b sqlsrv_prepare} to specify the SQL Server data type of a parameter.\par
Additional Information at {\b SQLSRV Driver API Reference}\par
 {\b https://docs.microsoft.com/en-us/sql/connect/php/constants-microsoft-drivers-for-php-for-sql-server}\par
}}
{\xe \v SQLSRV_SQLTYPE_SMALLDATETIME\:sqlsrv.php}
{\xe \v sqlsrv.php\:SQLSRV_SQLTYPE_SMALLDATETIME}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const SQLSRV_SQLTYPE_SMALLDATETIME 8285}}
\par
{\bkmkstart AAAAAAANIX}
{\bkmkend AAAAAAANIX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
smalldatetime.\par
\par
Used when calling {\b sqlsrv_query} or {\b sqlsrv_prepare} to specify the SQL Server data type of a parameter.\par
Additional Information at {\b SQLSRV Driver API Reference}\par
 {\b https://docs.microsoft.com/en-us/sql/connect/php/constants-microsoft-drivers-for-php-for-sql-server}\par
}}
{\xe \v SQLSRV_SQLTYPE_SMALLINT\:sqlsrv.php}
{\xe \v sqlsrv.php\:SQLSRV_SQLTYPE_SMALLINT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const SQLSRV_SQLTYPE_SMALLINT 5}}
\par
{\bkmkstart AAAAAAANIY}
{\bkmkend AAAAAAANIY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
smallint.\par
\par
Used when calling {\b sqlsrv_query} or {\b sqlsrv_prepare} to specify the SQL Server data type of a parameter.\par
Additional Information at {\b SQLSRV Driver API Reference}\par
 {\b https://docs.microsoft.com/en-us/sql/connect/php/constants-microsoft-drivers-for-php-for-sql-server}\par
}}
{\xe \v SQLSRV_SQLTYPE_SMALLMONEY\:sqlsrv.php}
{\xe \v sqlsrv.php\:SQLSRV_SQLTYPE_SMALLMONEY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const SQLSRV_SQLTYPE_SMALLMONEY 33559555}}
\par
{\bkmkstart AAAAAAANIZ}
{\bkmkend AAAAAAANIZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
smallmoney.\par
\par
Used when calling {\b sqlsrv_query} or {\b sqlsrv_prepare} to specify the SQL Server data type of a parameter.\par
Additional Information at {\b SQLSRV Driver API Reference}\par
 {\b https://docs.microsoft.com/en-us/sql/connect/php/constants-microsoft-drivers-for-php-for-sql-server}\par
}}
{\xe \v SQLSRV_SQLTYPE_TEXT\:sqlsrv.php}
{\xe \v sqlsrv.php\:SQLSRV_SQLTYPE_TEXT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const SQLSRV_SQLTYPE_TEXT -1}}
\par
{\bkmkstart AAAAAAANJA}
{\bkmkend AAAAAAANJA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
text.\par
\par
Used when calling {\b sqlsrv_query} or {\b sqlsrv_prepare} to specify the SQL Server data type of a parameter.\par
Additional Information at {\b SQLSRV Driver API Reference}\par
 {\b https://docs.microsoft.com/en-us/sql/connect/php/constants-microsoft-drivers-for-php-for-sql-server}\par
}}
{\xe \v SQLSRV_SQLTYPE_TIME\:sqlsrv.php}
{\xe \v sqlsrv.php\:SQLSRV_SQLTYPE_TIME}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const SQLSRV_SQLTYPE_TIME 58728806}}
\par
{\bkmkstart AAAAAAANJB}
{\bkmkend AAAAAAANJB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
time.\par
\par
Used when calling {\b sqlsrv_query} or {\b sqlsrv_prepare} to specify the SQL Server data type of a parameter.\par
Additional Information at {\b SQLSRV Driver API Reference}\par
 {\b https://docs.microsoft.com/en-us/sql/connect/php/constants-microsoft-drivers-for-php-for-sql-server}\par
}}
{\xe \v SQLSRV_SQLTYPE_TIMESTAMP\:sqlsrv.php}
{\xe \v sqlsrv.php\:SQLSRV_SQLTYPE_TIMESTAMP}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const SQLSRV_SQLTYPE_TIMESTAMP 4606}}
\par
{\bkmkstart AAAAAAANJC}
{\bkmkend AAAAAAANJC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
timestamp.\par
\par
Used when calling {\b sqlsrv_query} or {\b sqlsrv_prepare} to specify the SQL Server data type of a parameter.\par
Additional Information at {\b SQLSRV Driver API Reference}\par
 {\b https://docs.microsoft.com/en-us/sql/connect/php/constants-microsoft-drivers-for-php-for-sql-server}\par
}}
{\xe \v SQLSRV_SQLTYPE_TINYINT\:sqlsrv.php}
{\xe \v sqlsrv.php\:SQLSRV_SQLTYPE_TINYINT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const SQLSRV_SQLTYPE_TINYINT -6}}
\par
{\bkmkstart AAAAAAANJD}
{\bkmkend AAAAAAANJD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
tinyint.\par
\par
Used when calling {\b sqlsrv_query} or {\b sqlsrv_prepare} to specify the SQL Server data type of a parameter.\par
Additional Information at {\b SQLSRV Driver API Reference}\par
 {\b https://docs.microsoft.com/en-us/sql/connect/php/constants-microsoft-drivers-for-php-for-sql-server}\par
}}
{\xe \v SQLSRV_SQLTYPE_UDT\:sqlsrv.php}
{\xe \v sqlsrv.php\:SQLSRV_SQLTYPE_UDT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const SQLSRV_SQLTYPE_UDT -151}}
\par
{\bkmkstart AAAAAAANJE}
{\bkmkend AAAAAAANJE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
udt.\par
\par
Used when calling {\b sqlsrv_query} or {\b sqlsrv_prepare} to specify the SQL Server data type of a parameter.\par
Additional Information at {\b SQLSRV Driver API Reference}\par
 {\b https://docs.microsoft.com/en-us/sql/connect/php/constants-microsoft-drivers-for-php-for-sql-server}\par
}}
{\xe \v SQLSRV_SQLTYPE_UNIQUEIDENTIFIER\:sqlsrv.php}
{\xe \v sqlsrv.php\:SQLSRV_SQLTYPE_UNIQUEIDENTIFIER}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const SQLSRV_SQLTYPE_UNIQUEIDENTIFIER -11}}
\par
{\bkmkstart AAAAAAANJF}
{\bkmkend AAAAAAANJF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
uniqueidentifier.\par
\par
Used when calling {\b sqlsrv_query} or {\b sqlsrv_prepare} to specify the SQL Server data type of a parameter.\par
Additional Information at {\b SQLSRV Driver API Reference}\par
 {\b https://docs.microsoft.com/en-us/sql/connect/php/constants-microsoft-drivers-for-php-for-sql-server}\par
}}
{\xe \v SQLSRV_SQLTYPE_XML\:sqlsrv.php}
{\xe \v sqlsrv.php\:SQLSRV_SQLTYPE_XML}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const SQLSRV_SQLTYPE_XML -152}}
\par
{\bkmkstart AAAAAAANJG}
{\bkmkend AAAAAAANJG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
xml.\par
\par
Used when calling {\b sqlsrv_query} or {\b sqlsrv_prepare} to specify the SQL Server data type of a parameter.\par
Additional Information at {\b SQLSRV Driver API Reference}\par
 {\b https://docs.microsoft.com/en-us/sql/connect/php/constants-microsoft-drivers-for-php-for-sql-server}\par
}}
{\xe \v SQLSRV_TXN_READ_COMMITTED\:sqlsrv.php}
{\xe \v sqlsrv.php\:SQLSRV_TXN_READ_COMMITTED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const SQLSRV_TXN_READ_COMMITTED 2}}
\par
{\bkmkstart AAAAAAANJH}
{\bkmkend AAAAAAANJH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Read Committed.\par
\par
Specifies that statements cannot read data that has been modified but not committed by other transactions. This prevents dirty reads. Data can be changed by other transactions between individual statements within the current transaction, resulting in nonrepeatable reads or phantom data. This option is the SQL Server default.\par
The behavior of READ COMMITTED depends on the setting of the READ_COMMITTED_SNAPSHOT database option.\par
Used with the TransactionIsolation key when calling {\b sqlsrv_connect}. For information on using these constants, see {\b SET TRANSACTION ISOLATION LEVEL (Transact-SQL)}.\par
Additional Information at {\b SQLSRV Driver API Reference}\par
 {\b https://docs.microsoft.com/en-us/sql/connect/php/constants-microsoft-drivers-for-php-for-sql-server}\par
}}
{\xe \v SQLSRV_TXN_READ_UNCOMMITTED\:sqlsrv.php}
{\xe \v sqlsrv.php\:SQLSRV_TXN_READ_UNCOMMITTED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const SQLSRV_TXN_READ_UNCOMMITTED 1}}
\par
{\bkmkstart AAAAAAANJI}
{\bkmkend AAAAAAANJI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Read Uncommitted.\par
\par
Specifies that statements can read rows that have been modified by other transactions but not yet committed.\par
Transactions running at the READ UNCOMMITTED level do not issue shared locks to prevent other transactions from modifying data read by the current transaction. READ UNCOMMITTED transactions are also not blocked by exclusive locks that would prevent the current transaction from reading rows that have been modified but not committed by other transactions. When this option is set, it is possible to read uncommitted modifications, which are called dirty reads. Values in the data can be changed and rows can appear or disappear in the data set before the end of the transaction. This option has the same effect as setting NOLOCK on all tables in all SELECT statements in a transaction. This is the least restrictive of the isolation levels.\par
Used with the TransactionIsolation key when calling {\b sqlsrv_connect}. For information on using these constants, see {\b SET TRANSACTION ISOLATION LEVEL (Transact-SQL)}.\par
Additional Information at {\b SQLSRV Driver API Reference}\par
 {\b https://docs.microsoft.com/en-us/sql/connect/php/constants-microsoft-drivers-for-php-for-sql-server}\par
}}
{\xe \v SQLSRV_TXN_REPEATABLE_READ\:sqlsrv.php}
{\xe \v sqlsrv.php\:SQLSRV_TXN_REPEATABLE_READ}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const SQLSRV_TXN_REPEATABLE_READ 4}}
\par
{\bkmkstart AAAAAAANJJ}
{\bkmkend AAAAAAANJJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Repeatable Read.\par
\par
Specifies that statements cannot read data that has been modified but not yet committed by other transactions and that no other transactions can modify data that has been read by the current transaction until the current transaction completes.\par
Shared locks are placed on all data read by each statement in the transaction and are held until the transaction completes. This prevents other transactions from modifying any rows that have been read by the current transaction. {\b Other} transactions can insert new rows that match the search conditions of statements issued by the current transaction. If the current transaction then retries the statement it will retrieve the new rows, which results in phantom reads. Because shared locks are held to the end of a transaction instead of being released at the end of each statement, concurrency is lower than the default READ COMMITTED isolation level.\par
Use this option only when necessary.\par
Used with the TransactionIsolation key when calling {\b sqlsrv_connect}. For information on using these constants, see {\b SET TRANSACTION ISOLATION LEVEL (Transact-SQL)}.\par
Additional Information at {\b SQLSRV Driver API Reference}\par
 {\b https://docs.microsoft.com/en-us/sql/connect/php/constants-microsoft-drivers-for-php-for-sql-server}\par
}}
{\xe \v SQLSRV_TXN_SERIALIZABLE\:sqlsrv.php}
{\xe \v sqlsrv.php\:SQLSRV_TXN_SERIALIZABLE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const SQLSRV_TXN_SERIALIZABLE 8}}
\par
{\bkmkstart AAAAAAANJK}
{\bkmkend AAAAAAANJK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\b Serializable}.\par
\par
Specifies the following: {
\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Statements cannot read data that has been modified but not yet committed by other transactions. \par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
No other transactions can modify data that has been read by the current transaction until the current transaction completes. \par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Other} transactions cannot insert new rows with key values that would fall in the range of keys read by any statements in the current transaction until the current transaction completes.\par}
Range locks are placed in the range of key values that match the search conditions of each statement executed in a transaction. This blocks other transactions from updating or inserting any rows that would qualify for any of the statements executed by the current transaction. This means that if any of the statements in a transaction are executed a second time, they will read the same set of rows. The range locks are held until the transaction completes. This is the most restrictive of the isolation levels because it locks entire ranges of keys and holds the locks until the transaction completes. Because concurrency is lower, use this option only when necessary. This option has the same effect as setting HOLDLOCK on all tables in all SELECT statements in a transaction.\par
Used with the TransactionIsolation key when calling {\b sqlsrv_connect}. For information on using these constants, see {\b SET TRANSACTION ISOLATION LEVEL (Transact-SQL)}.\par
Additional Information at {\b SQLSRV Driver API Reference}\par
 {\b https://docs.microsoft.com/en-us/sql/connect/php/constants-microsoft-drivers-for-php-for-sql-server}\par
}}
{\xe \v SQLSRV_TXN_SNAPSHOT\:sqlsrv.php}
{\xe \v sqlsrv.php\:SQLSRV_TXN_SNAPSHOT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const SQLSRV_TXN_SNAPSHOT 32}}
\par
{\bkmkstart AAAAAAANJL}
{\bkmkend AAAAAAANJL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Snapshot.\par
\par
Specifies that data read by any statement in a transaction will be the transactionally consistent version of the data that existed at the start of the transaction. The transaction can only recognize data modifications that were committed before the start of the transaction. Data modifications made by other transactions after the start of the current transaction are not visible to statements executing in the current transaction. The effect is as if the statements in a transaction get a snapshot of the committed data as it existed at the start of the transaction.\par
Except when a database is being recovered, SNAPSHOT transactions do not request locks when reading data. SNAPSHOT transactions reading data do not block other transactions from writing data. Transactions writing data do not block SNAPSHOT transactions from reading data.\par
During the roll-back phase of a database recovery, SNAPSHOT transactions will request a lock if an attempt is made to read data that is locked by another transaction that is being rolled back. The SNAPSHOT transaction is blocked until that transaction has been rolled back. The lock is released immediately after it has been granted.\par
The ALLOW_SNAPSHOT_ISOLATION database option must be set to ON before you can start a transaction that uses the SNAPSHOT isolation level. If a transaction using the SNAPSHOT isolation level accesses data in multiple databases, ALLOW_SNAPSHOT_ISOLATION must be set to ON in each database.\par
{\b A} transaction cannot be set to SNAPSHOT isolation level that started with another isolation level; doing so will cause the transaction to abort. If a transaction starts in the SNAPSHOT isolation level, you can change it to another isolation level and then back to SNAPSHOT. {\b A} transaction starts the first time it accesses data.\par
{\b A} transaction running under SNAPSHOT isolation level can view changes made by that transaction. For example, if the transaction performs an UPDATE on a table and then issues a SELECT statement against the same table, the modified data will be included in the result set.\par
Used with the TransactionIsolation key when calling {\b sqlsrv_connect}. For information on using these constants, see {\b SET TRANSACTION ISOLATION LEVEL (Transact-SQL)}.\par
Additional Information at {\b SQLSRV Driver API Reference}\par
 {\b https://docs.microsoft.com/en-us/sql/connect/php/constants-microsoft-drivers-for-php-for-sql-server}\par
}}
}