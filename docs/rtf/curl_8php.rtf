{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\comment begin body}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
vendor/jetbrains/phpstorm-stubs/curl/curl.php File Reference\par \pard\plain 
{\tc\tcl2 \v vendor/jetbrains/phpstorm-stubs/curl/curl.php}
{\xe \v vendor/jetbrains/phpstorm-stubs/curl/curl.php}
{\bkmkstart AAAAAAABYA}
{\bkmkend AAAAAAABYA}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Data Structures\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b CURLFile}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b curl_init} ($url={\b null})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b curl_copy_handle} ($ch)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b curl_version} ($age={\b null})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b curl_setopt} ($ch, $option, $value)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b curl_setopt_array} ($ch, array $options)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b curl_share_close} ($sh)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b curl_share_init} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b curl_share_setopt} ($sh, $option, $value)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b curl_strerror} ($errornum)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b curl_unescape} ($ch, $str)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b curl_exec} ($ch)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b curl_getinfo} ($ch, $opt={\b null})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b curl_error} ($ch)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b curl_errno} ($ch)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b curl_escape} ($ch, $str)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b curl_file_create} ($filename, $mimetype, $postname)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b curl_close} ($ch)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b curl_multi_init} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b curl_multi_add_handle} ($mh, $ch)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b curl_multi_remove_handle} ($mh, $ch)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b curl_multi_select} ($mh, $timeout=1.0)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b curl_multi_setopt} ($mh, $option, $value)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b curl_multi_strerror} ($errornum)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b curl_pause} ($ch, $bitmask)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b curl_reset} ($ch)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b curl_multi_exec} ($mh, &$still_running)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b curl_multi_getcontent} ($ch)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b curl_multi_info_read} ($mh, &$msgs_in_queue={\b null})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b curl_multi_close} ($mh)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b curl_multi_errno} ($mh)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b curl_share_errno} ($rh)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b curl_share_strerror} ($errno)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v curl_close\:curl.php}
{\xe \v curl.php\:curl_close}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
curl_close (  {\i $ch})}}
\par
{\bkmkstart AAAAAAABYB}
{\bkmkend AAAAAAABYB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Close a cURL session {\b resource $ch  void  4.0.2  5.0 }\par
}}
{\xe \v curl_copy_handle\:curl.php}
{\xe \v curl.php\:curl_copy_handle}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
curl_copy_handle (  {\i $ch})}}
\par
{\bkmkstart AAAAAAABYC}
{\bkmkend AAAAAAABYC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Copy a cURL handle along with all of its preferences {\b resource $ch  resource a new cURL handle.  5.0 }\par
}}
{\xe \v curl_errno\:curl.php}
{\xe \v curl.php\:curl_errno}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
curl_errno (  {\i $ch})}}
\par
{\bkmkstart AAAAAAABYD}
{\bkmkend AAAAAAABYD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Return the last error number {\b resource $ch  int the error number or 0 (zero) if no error occurred.  4.0.3  5.0 }\par
}}
{\xe \v curl_error\:curl.php}
{\xe \v curl.php\:curl_error}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
curl_error (  {\i $ch})}}
\par
{\bkmkstart AAAAAAABYE}
{\bkmkend AAAAAAABYE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Return a string containing the last error for the current session {\b resource $ch  string the error message or '' (the empty string) if no error occurred.  4.0.3  5.0 }\par
}}
{\xe \v curl_escape\:curl.php}
{\xe \v curl.php\:curl_escape}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
curl_escape (  {\i $ch},   {\i $str})}}
\par
{\bkmkstart AAAAAAABYF}
{\bkmkend AAAAAAABYF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
URL encodes the given string {\b resource $ch } {\b A} cURL handle returned by {\b curl_init()}.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{string\cell }{{\i $str} \cell }{\cell }
{\row }
}
The string to be encoded.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
string|false Returns escaped string or FALSE on failure. \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Since\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
5.5 \par
}}}}
{\xe \v curl_exec\:curl.php}
{\xe \v curl.php\:curl_exec}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
curl_exec (  {\i $ch})}}
\par
{\bkmkstart AAAAAAABYG}
{\bkmkend AAAAAAABYG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Perform a cURL session {\b resource $ch  string|bool true on success or false on failure. However, if the CURLOPT_RETURNTRANSFER option is set, it will return the result on success, false on failure.  4.0.2  5.0 }\par
}}
{\xe \v curl_file_create\:curl.php}
{\xe \v curl.php\:curl_file_create}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
curl_file_create (  {\i $filename},   {\i $mimetype},   {\i $postname})}}
\par
{\bkmkstart AAAAAAABYH}
{\bkmkend AAAAAAABYH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
(PHP 5 >= 5.5.0) \par
 Create a {\b CURLFile} object {\b string $filename } Path to the file which will be uploaded.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{string\cell }{{\i $mimetype} \cell }{[optional] \cell }
{\row }
}
Mimetype of the file.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{string\cell }{{\i $postname} \cell }{[optional] \cell }
{\row }
}
Name of the file.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
{\b CURLFile} Returns a {\b CURLFile} object. \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Since\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
5.5 \par
}}}}
{\xe \v curl_getinfo\:curl.php}
{\xe \v curl.php\:curl_getinfo}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
curl_getinfo (  {\i $ch},   {\i $opt} = {\f2 {\b null}})}}
\par
{\bkmkstart AAAAAAABYI}
{\bkmkend AAAAAAABYI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get information regarding a specific transfer {\b resource $ch  int $opt [optional] } This may be one of the following constants: CURLINFO_EFFECTIVE_URL - Last effective URL \par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
mixed If opt is given, returns its value as a string. Otherwise, returns an associative array with the following elements (which correspond to opt): "url" "content_type" "http_code" "header_size" "request_size" "filetime" "ssl_verify_result" "redirect_count" "total_time" "namelookup_time" "connect_time" "pretransfer_time" "size_upload" "size_download" "speed_download" "speed_upload" "download_content_length" "upload_content_length" "starttransfer_time" "redirect_time" \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Since\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
4.0.4 \par
5.0 \par
}}}}
{\xe \v curl_init\:curl.php}
{\xe \v curl.php\:curl_init}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
curl_init (  {\i $url} = {\f2 {\b null}})}}
\par
{\bkmkstart AAAAAAABYJ}
{\bkmkend AAAAAAABYJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Initialize a cURL session {\b string $url [optional] } If provided, the CURLOPT_URL option will be set to its value. You can manually set this using the curl_setopt function. \par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
resource|false a cURL handle on success, false on errors. \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Since\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
4.0.2 \par
5.0 \par
}}}}
{\xe \v curl_multi_add_handle\:curl.php}
{\xe \v curl.php\:curl_multi_add_handle}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
curl_multi_add_handle (  {\i $mh},   {\i $ch})}}
\par
{\bkmkstart AAAAAAABYK}
{\bkmkend AAAAAAABYK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Add a normal cURL handle to a cURL multi handle {\b resource $mh  resource $ch  int 0 on success, or one of the CURLM_XXX errors code.  5.0 }\par
}}
{\xe \v curl_multi_close\:curl.php}
{\xe \v curl.php\:curl_multi_close}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
curl_multi_close (  {\i $mh})}}
\par
{\bkmkstart AAAAAAABYL}
{\bkmkend AAAAAAABYL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Close a set of cURL handles {\b resource $mh  void  5.0 }\par
}}
{\xe \v curl_multi_errno\:curl.php}
{\xe \v curl.php\:curl_multi_errno}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
curl_multi_errno (  {\i $mh})}}
\par
{\bkmkstart AAAAAAABYM}
{\bkmkend AAAAAAABYM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{resource\cell }{{\i $mh} \cell }{\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Since\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
7.1 \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
int \par
}}}}
{\xe \v curl_multi_exec\:curl.php}
{\xe \v curl.php\:curl_multi_exec}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
curl_multi_exec (  {\i $mh}, &  {\i $still_running})}}
\par
{\bkmkstart AAAAAAABYN}
{\bkmkend AAAAAAABYN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Run the sub-connections of the current cURL handle {\b resource $mh  int $still_running } {\b A} reference to a flag to tell whether the operations are still running. \par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
int {\b A} cURL code defined in the cURL Predefined Constants. \par
}}This only returns errors regarding the whole multi stack. There might still have occurred problems on individual transfers even when this function returns CURLM_OK. \par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Since\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
5.0 \par
}}}}
{\xe \v curl_multi_getcontent\:curl.php}
{\xe \v curl.php\:curl_multi_getcontent}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
curl_multi_getcontent (  {\i $ch})}}
\par
{\bkmkstart AAAAAAABYO}
{\bkmkend AAAAAAABYO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Return the content of a cURL handle if <constant>CURLOPT_RETURNTRANSFER</constant> is set {\b resource $ch  string Return the content of a cURL handle if CURLOPT_RETURNTRANSFER is set.  5.0 }\par
}}
{\xe \v curl_multi_info_read\:curl.php}
{\xe \v curl.php\:curl_multi_info_read}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
curl_multi_info_read (  {\i $mh}, &  {\i $msgs_in_queue} = {\f2 {\b null}})}}
\par
{\bkmkstart AAAAAAABYP}
{\bkmkend AAAAAAABYP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get information about the current transfers {\b resource $mh  int $msgs_in_queue [optional] } Number of messages that are still in the queue \par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
array On success, returns an associative array for the message, false on failure. \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Since\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
5.0 \par
}}}}
{\xe \v curl_multi_init\:curl.php}
{\xe \v curl.php\:curl_multi_init}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
curl_multi_init ()}}
\par
{\bkmkstart AAAAAAABYQ}
{\bkmkend AAAAAAABYQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Returns a new cURL multi handle {\b resource|false a cURL multi handle resource on success, false on failure.  5.0 }\par
}}
{\xe \v curl_multi_remove_handle\:curl.php}
{\xe \v curl.php\:curl_multi_remove_handle}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
curl_multi_remove_handle (  {\i $mh},   {\i $ch})}}
\par
{\bkmkstart AAAAAAABYR}
{\bkmkend AAAAAAABYR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Remove a multi handle from a set of cURL handles {\b resource $mh  resource $ch  int|false On success, returns one of the CURLM_XXX error codes, false on failure.  5.0 }\par
}}
{\xe \v curl_multi_select\:curl.php}
{\xe \v curl.php\:curl_multi_select}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
curl_multi_select (  {\i $mh},   {\i $timeout} = {\f2 1.0})}}
\par
{\bkmkstart AAAAAAABYS}
{\bkmkend AAAAAAABYS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Wait for activity on any curl_multi connection {\b resource $mh  float $timeout [optional] } Time, in seconds, to wait for a response. \par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
int On success, returns the number of descriptors contained in, the descriptor sets. On failure, this function will return -1 on a select failure or timeout (from the underlying select system call). \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Since\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
5.0 \par
}}}}
{\xe \v curl_multi_setopt\:curl.php}
{\xe \v curl.php\:curl_multi_setopt}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
curl_multi_setopt (  {\i $mh},   {\i $option},   {\i $value})}}
\par
{\bkmkstart AAAAAAABYT}
{\bkmkend AAAAAAABYT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
(PHP 5 >=5.5.0)\par
 Set an option for the cURL multi handle {\b resource $mh  int $option } One of the {\b CURLMOPT_*}  constants. \par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{mixed\cell }{{\i $value} \cell }{\cell }
{\row }
}
The value to be set on {\i option} . \par
{\i value}  should be an {\b int} for the following values of the {\i option}  parameter: \par
\pard\plain
\par
Option \par
Set {\i {\f2 value} }  to \par
</thead>\par
<tbody> \par
{\b CURLMOPT_PIPELINING}  \par
Pass 1 to enable or 0 to disable. Enabling pipelining on a multi handle will make it attempt to perform HTTP Pipelining as far as possible for transfers using this handle. This means that if you add a second request that can use an already existing connection, the second request will be "piped" on the same connection rather than being executed in parallel.  \par
{\b CURLMOPT_MAXCONNECTS}  \par
Pass a number that will be used as the maximum amount of simultaneously open connections that libcurl may cache. Default is{
\par
\pard\plain \s141\fi-360\li720\widctlpar\fs20\cgrid 
1.\tab When the cache is full, curl closes the oldest one in the cache to prevent the number of open connections from increasing.   </tbody> \par}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
bool Returns TRUE on success or FALSE on failure. \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Since\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
5.5 \par
}}}}
{\xe \v curl_multi_strerror\:curl.php}
{\xe \v curl.php\:curl_multi_strerror}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
curl_multi_strerror (  {\i $errornum})}}
\par
{\bkmkstart AAAAAAABYU}
{\bkmkend AAAAAAABYU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
(PHP 5 >=5.5.0)\par
 Return string describing error code {\b int $errornum } One of the {\b CURLM error codes} constants. \par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
string|null Returns error string for valid error code, NULL otherwise. \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Since\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
5.5 \par
}}}}
{\xe \v curl_pause\:curl.php}
{\xe \v curl.php\:curl_pause}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
curl_pause (  {\i $ch},   {\i $bitmask})}}
\par
{\bkmkstart AAAAAAABYV}
{\bkmkend AAAAAAABYV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
(PHP 5 >=5.5.0)\par
 Pause and unpause a connection {\b resource $ch }{\b A} cURL handle returned by {\b curl_init()}.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{int\cell }{{\i $bitmask} \cell }{\cell }
{\row }
}
One of {\b CURLPAUSE_*}  constants.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
int Returns an error code ({\b CURLE_OK}  for no error). \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Since\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
5.5 \par
}}}}
{\xe \v curl_reset\:curl.php}
{\xe \v curl.php\:curl_reset}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
curl_reset (  {\i $ch})}}
\par
{\bkmkstart AAAAAAABYW}
{\bkmkend AAAAAAABYW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
(PHP 5 >=5.5.0)\par
 Reset all options of a libcurl session handle {\b resource $ch }{\b A} cURL handle returned by {\b curl_init()}.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
void \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Since\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
5.5 \par
}}}}
{\xe \v curl_setopt\:curl.php}
{\xe \v curl.php\:curl_setopt}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
curl_setopt (  {\i $ch},   {\i $option},   {\i $value})}}
\par
{\bkmkstart AAAAAAABYX}
{\bkmkend AAAAAAABYX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Set an option for a cURL transfer {\b resource $ch  int $option } The CURLOPT_XXX option to set. \par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{mixed | callable\cell }{{\i $value} \cell }{\cell }
{\row }
}
The value to be set on option. \par
value should be a bool for the following values of the option parameter: \par
\pard\plain
\par
Option \par
Set {\i value}  to \par
Notes \par
</thead>\par
<tbody class="tbody"> \par
{\b CURLOPT_AUTOREFERER}  \par
{\b TRUE}  to automatically set the {\i Referer:}  field in requests where it follows a {\i Location:}  redirect.  \par
{\b CURLOPT_BINARYTRANSFER}  \par
{\b TRUE}  to return the raw output when {\b CURLOPT_RETURNTRANSFER}  is used.  \par
From PHP 5.1.3, this option has no effect: the raw output will always be returned when {\b CURLOPT_RETURNTRANSFER}  is used.  \par
{\b CURLOPT_COOKIESESSION}  \par
{\b TRUE}  to mark this as a new cookie "session". It will force libcurl to ignore all cookies it is about to load that are "session cookies" from the previous session. By default, libcurl always stores and loads all cookies, independent if they are session cookies or not. Session cookies are cookies without expiry date and they are meant to be alive and existing for this "session" only.  \par
{\b CURLOPT_CERTINFO}  \par
{\b TRUE}  to output SSL certification information to {\i STDERR}  on secure transfers.  \par
Added in cURL 7.19.1. Available since PHP 5.3.2. Requires {\b CURLOPT_VERBOSE}  to be on to have an effect.  \par
{\b CURLOPT_CONNECT_ONLY}  \par
{\b TRUE}  tells the library to perform all the required proxy authentication and connection setup, but no data transfer. This option is implemented for HTTP, SMTP and POP3.  \par
Added in 7.15.2. Available since PHP 5.5.0.  \par
{\b CURLOPT_CRLF}  \par
{\b TRUE}  to convert Unix newlines to CRLF newlines on transfers.  \par
{\b CURLOPT_DNS_USE_GLOBAL_CACHE}  \par
{\b TRUE}  to use a global DNS cache. This option is not thread-safe and is enabled by default.  \par
{\b CURLOPT_FAILONERROR}  \par
{\b TRUE}  to fail verbosely if the HTTP code returned is greater than or equal to 400. The default behavior is to return the page normally, ignoring the code.  \par
{\b CURLOPT_FILETIME}  \par
{\b TRUE}  to attempt to retrieve the modification date of the remote document. This value can be retrieved using the {\b CURLINFO_FILETIME}  option with \{\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
See also\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
{\b curl_getinfo()}\}.  \par
}}\par
  \par
\par
 \par
{\b CURLOPT_FOLLOWLOCATION}  \par
 {\b TRUE}  to follow any {\i "Location: "}  header that the server sends as part of the HTTP header (note this is recursive, PHP will follow as many {\i "Location: "}  headers that it is sent, unless {\b CURLOPT_MAXREDIRS}  is set).  \par
  \par
\par
 \par
{\b CURLOPT_FORBID_REUSE}  \par
 {\b TRUE}  to force the connection to explicitly close when it has finished processing, and not be pooled for reuse.  \par
  \par
\par
 \par
{\b CURLOPT_FRESH_CONNECT}  \par
 {\b TRUE}  to force the use of a new connection instead of a cached one.  \par
  \par
\par
 \par
{\b CURLOPT_FTP_USE_EPRT}  \par
 {\b TRUE}  to use EPRT (and LPRT) when doing active FTP downloads. Use {\b FALSE}  to disable EPRT and LPRT and use PORT only.  \par
  \par
\par
 \par
{\b CURLOPT_FTP_USE_EPSV}  \par
 {\b TRUE}  to first try an EPSV command for FTP transfers before reverting back to PASV. Set to {\b FALSE}  to disable EPSV.  \par
  \par
\par
 \par
{\b CURLOPT_FTP_CREATE_MISSING_DIRS}  \par
 {\b TRUE}  to create missing directories when an FTP operation encounters a path that currently doesn't exist.  \par
  \par
\par
 \par
{\b CURLOPT_FTPAPPEND}  \par
 {\b TRUE}  to append to the remote file instead of overwriting it.  \par
  \par
\par
 \par
{\b CURLOPT_TCP_NODELAY}  \par
 {\b TRUE}  to disable TCP's Nagle algorithm, which tries to minimize the number of small packets on the network.  \par
 Available since PHP 5.2.1 for versions compiled with libcurl 7.11.2 or greater.  \par
\par
 \par
{\b CURLOPT_FTPASCII}  \par
 An alias of {\b CURLOPT_TRANSFERTEXT} . Use that instead.  \par
  \par
\par
 \par
{\b CURLOPT_FTPLISTONLY}  \par
 {\b TRUE}  to only list the names of an FTP directory.  \par
  \par
\par
 \par
{\b CURLOPT_HEADER}  \par
 {\b TRUE}  to include the header in the output.  \par
  \par
\par
 \par
{\b CURLINFO_HEADER_OUT}  \par
 {\b TRUE}  to track the handle's request string.  \par
 Available since PHP 5.1.3. The {\b CURLINFO_}  prefix is intentional.  \par
\par
 \par
{\b CURLOPT_HTTPGET}  \par
 {\b TRUE}  to reset the HTTP request method to GET. Since GET is the default, this is only necessary if the request method has been changed.  \par
  \par
\par
 \par
{\b CURLOPT_HTTPPROXYTUNNEL}  \par
 {\b TRUE}  to tunnel through a given HTTP proxy.  \par
  \par
\par
 \par
{\b CURLOPT_MUTE}  \par
 {\b TRUE}  to be completely silent with regards to the cURL functions.  \par
 Removed in cURL 7.15.5 (You can use CURLOPT_RETURNTRANSFER instead)  \par
\par
 \par
{\b CURLOPT_NETRC}  \par
 {\b TRUE}  to scan the {\i ~/.netrc}  file to find a username and password for the remote site that a connection is being established with.  \par
  \par
\par
 \par
{\b CURLOPT_NOBODY}  \par
 {\b TRUE}  to exclude the body from the output. Request method is then set to HEAD. Changing this to {\b FALSE}  does not change it to GET.  \par
  \par
\par
 \par
{\b CURLOPT_NOPROGRESS}  \par
\par
 {\b TRUE}  to disable the progress meter for cURL transfers. \par
\par
{\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid \par
{\b Note} : \par
PHP automatically sets this option to {\b TRUE} , this should only be changed for debugging purposes. \par
}\par
  \par
\par
 \par
{\b CURLOPT_NOSIGNAL}  \par
 {\b TRUE}  to ignore any cURL function that causes a signal to be sent to the PHP process. This is turned on by default in multi-threaded SAPIs so timeout options can still be used.  \par
 Added in cURL 7.10.  \par
\par
 \par
{\b CURLOPT_POST}  \par
 {\b TRUE}  to do a regular HTTP POST. This POST is the normal {\i application/x-www-form-urlencoded}  kind, most commonly used by HTML forms.  \par
  \par
\par
 \par
{\b CURLOPT_PUT}  \par
 {\b TRUE}  to HTTP PUT a file. The file to PUT must be set with {\b CURLOPT_INFILE}  and {\b CURLOPT_INFILESIZE} .  \par
  \par
\par
 \par
{\b CURLOPT_RETURNTRANSFER}  \par
 {\b TRUE}  to return the transfer as a string of the return value of \{\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
See also\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
{\b curl_exec()}\} instead of outputting it out directly.  \par
}}\par
  \par
\par
 \par
{\b CURLOPT_SAFE_UPLOAD}  \par
 {\b TRUE}  to disable support for the {\i </em> prefix for uploading files in {\b CURLOPT_POSTFIELDS} , which means that values starting with {\i </em> can be safely passed as fields. \{\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
See also\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
{\b CURLFile}\} may be used for uploads instead.  \par
}}} } \par
{\i {\i  Added in PHP 5.5.0 with {\b FALSE}  as the default value. PHP 5.6.0 changes the default value to {\b TRUE} .  } } \par
{\i {\i } } \par
{\i {\i  } } \par
{\i {\i {\b CURLOPT_SSL_VERIFYPEER}  } } \par
{\i {\i  {\b FALSE}  to stop cURL from verifying the peer's certificate. Alternate certificates to verify against can be specified with the {\b CURLOPT_CAINFO}  option or a certificate directory can be specified with the {\b CURLOPT_CAPATH}  option.  } } \par
{\i {\i  {\b TRUE}  by default as of cURL 7.10. Default bundle installed as of cURL 7.10.  } } \par
{\i {\i } } \par
{\i {\i  } } \par
{\i {\i {\b CURLOPT_TRANSFERTEXT}  } } \par
{\i {\i  {\b TRUE}  to use ASCII mode for FTP transfers. For LDAP, it retrieves data in plain text instead of HTML. On Windows systems, it will not set {\i STDOUT}  to binary mode.  } } \par
{\i {\i   } } \par
{\i {\i } } \par
{\i {\i  } } \par
{\i {\i {\b CURLOPT_UNRESTRICTED_AUTH}  } } \par
{\i {\i  {\b TRUE}  to keep sending the username and password when following locations (using {\b CURLOPT_FOLLOWLOCATION} ), even when the hostname has changed.  } } \par
{\i {\i   } } \par
{\i {\i } } \par
{\i {\i  } } \par
{\i {\i {\b CURLOPT_UPLOAD}  } } \par
{\i {\i  {\b TRUE}  to prepare for an upload.  } } \par
{\i {\i   } } \par
{\i {\i } } \par
{\i {\i  } } \par
{\i {\i {\b CURLOPT_VERBOSE}  } } \par
{\i {\i  {\b TRUE}  to output verbose information. Writes output to {\i STDERR} , or the file specified using {\b CURLOPT_STDERR} .  } } \par
{\i {\i   } } \par
{\i {\i </tbody>} } \par
{\i {\i } } \par
{\i {\i } } \par
{\i {\i value should be an integer for the following values of the option parameter: \par
\pard\plain
\par
} } \par
{\i {\i  } } \par
{\i {\i Option } } \par
{\i {\i Set {\i value}  to } } \par
{\i {\i Notes } } \par
{\i {\i </thead>} } \par
{\i {\i <tbody class="tbody"> } } \par
{\i {\i  } } \par
{\i {\i {\b CURLOPT_BUFFERSIZE}  } } \par
{\i {\i  The size of the buffer to use for each read. There is no guarantee this request will be fulfilled, however.  } } \par
{\i {\i  Added in cURL 7.10.  } } \par
{\i {\i } } \par
{\i {\i  } } \par
{\i {\i {\b CURLOPT_CLOSEPOLICY}  } } \par
{\i {\i  One of the {\b CURLCLOSEPOLICY_*}  values. \par
{\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid \par
{\b Note} : \par
This option is deprecated, as it was never implemented in cURL and never had any effect. \par
}} } \par
{\i {\i  Removed in PHP 5.6.0.  } } \par
{\i {\i } } \par
{\i {\i  } } \par
{\i {\i {\b CURLOPT_CONNECTTIMEOUT}  } } \par
{\i {\i  The number of seconds to wait while trying to connect. Use 0 to wait indefinitely.  } } \par
{\i {\i   } } \par
{\i {\i } } \par
{\i {\i  } } \par
{\i {\i {\b CURLOPT_CONNECTTIMEOUT_MS}  } } \par
{\i {\i  The number of milliseconds to wait while trying to connect. Use 0 to wait indefinitely.} } \par
{\i {\i If libcurl is built to use the standard system name resolver, that portion of the connect will still use full-second resolution for timeouts with a minimum timeout allowed of one second.  } } \par
{\i {\i  Added in cURL 7.16.2. Available since PHP 5.2.3.  } } \par
{\i {\i } } \par
{\i {\i  } } \par
{\i {\i {\b CURLOPT_DNS_CACHE_TIMEOUT}  } } \par
{\i {\i  The number of seconds to keep DNS entries in memory. This option is set to 120 (2 minutes) by default.  } } \par
{\i {\i   } } \par
{\i {\i } } \par
{\i {\i  } } \par
{\i {\i {\b CURLOPT_FTPSSLAUTH}  } } \par
{\i {\i  The FTP authentication method (when is activated): {\i CURLFTPAUTH_SSL}  (try SSL first), {\i CURLFTPAUTH_TLS}  (try TLS first), or {\i CURLFTPAUTH_DEFAULT}  (let cURL decide).  } } \par
{\i {\i  Added in cURL 7.12.2.  } } \par
{\i {\i } } \par
{\i {\i  } } \par
{\i {\i {\b CURLOPT_HTTP_VERSION}  } } \par
{\i {\i  {\f2 CURL_HTTP_VERSION_NONE}  (default, lets CURL decide which version to use), {\f2 CURL_HTTP_VERSION_1_0}  (forces HTTP/1.0), or {\f2 CURL_HTTP_VERSION_1_1}  (forces HTTP/1.1).  } } \par
{\i {\i   } } \par
{\i {\i } } \par
{\i {\i  } } \par
{\i {\i {\b CURLOPT_HTTPAUTH}  } } \par
{\i {\i  } } \par
{\i {\i  The HTTP authentication method(s) to use. The options are: {\f2 CURLAUTH_BASIC} , {\f2 CURLAUTH_DIGEST} , {\f2 CURLAUTH_GSSNEGOTIATE} , {\f2 CURLAUTH_NTLM} , {\f2 CURLAUTH_ANY} , and {\f2 CURLAUTH_ANYSAFE} . } } \par
{\i {\i  } } \par
{\i {\i  The bitwise {\i |}  (or) operator can be used to combine more than one method. If this is done, cURL will poll the server to see what methods it supports and pick the best one. } } \par
{\i {\i  } } \par
{\i {\i  {\f2 CURLAUTH_ANY}  is an alias for {\i CURLAUTH_BASIC | CURLAUTH_DIGEST | CURLAUTH_GSSNEGOTIATE | CURLAUTH_NTLM} . } } \par
{\i {\i  } } \par
{\i {\i  {\f2 CURLAUTH_ANYSAFE}  is an alias for {\i CURLAUTH_DIGEST | CURLAUTH_GSSNEGOTIATE | CURLAUTH_NTLM} . } } \par
{\i {\i   } } \par
{\i {\i   } } \par
{\i {\i } } \par
{\i {\i  } } \par
{\i {\i {\b CURLOPT_INFILESIZE}  } } \par
{\i {\i  The expected size, in bytes, of the file when uploading a file to a remote site. Note that using this option will not stop libcurl from sending more data, as exactly what is sent depends on {\b CURLOPT_READFUNCTION} .  } } \par
{\i {\i   } } \par
{\i {\i } } \par
{\i {\i  } } \par
{\i {\i {\b CURLOPT_LOW_SPEED_LIMIT}  } } \par
{\i {\i  The transfer speed, in bytes per second, that the transfer should be below during the count of {\b CURLOPT_LOW_SPEED_TIME}  seconds before PHP considers the transfer too slow and aborts.  } } \par
{\i {\i   } } \par
{\i {\i } } \par
{\i {\i  } } \par
{\i {\i {\b CURLOPT_LOW_SPEED_TIME}  } } \par
{\i {\i  The number of seconds the transfer speed should be below {\b CURLOPT_LOW_SPEED_LIMIT}  before PHP considers the transfer too slow and aborts.  } } \par
{\i {\i   } } \par
{\i {\i } } \par
{\i {\i  } } \par
{\i {\i {\b CURLOPT_MAXCONNECTS}  } } \par
{\i {\i  The maximum amount of persistent connections that are allowed. When the limit is reached, {\b CURLOPT_CLOSEPOLICY}  is used to determine which connection to close.  } } \par
{\i {\i   } } \par
{\i {\i } } \par
{\i {\i  } } \par
{\i {\i {\b CURLOPT_MAXREDIRS}  } } \par
{\i {\i  The maximum amount of HTTP redirections to follow. Use this option alongside {\b CURLOPT_FOLLOWLOCATION} .  } } \par
{\i {\i   } } \par
{\i {\i } } \par
{\i {\i  } } \par
{\i {\i {\b CURLOPT_PORT}  } } \par
{\i {\i  An alternative port number to connect to.  } } \par
{\i {\i   } } \par
{\i {\i } } \par
{\i {\i  } } \par
{\i {\i {\b CURLOPT_POSTREDIR}  } } \par
{\i {\i  {\b A} bitmask of 1 (301 Moved Permanently), 2 (302 Found) vand 4 (303 See {\b Other}) if the HTTP POST method should be maintained when {\b CURLOPT_FOLLOWLOCATION}  is set and a specific type of redirect occurs.  } } \par
{\i {\i  Added in cURL 7.19.1. Available since PHP 5.3.2.  } } \par
{\i {\i } } \par
{\i {\i  } } \par
{\i {\i {\b CURLOPT_PROTOCOLS}  } } \par
{\i {\i  } } \par
{\i {\i  Bitmask of {\b CURLPROTO_*}  values. If used, this bitmask limits what protocols libcurl may use in the transfer. This allows you to have a libcurl built to support a wide range of protocols but still limit specific transfers to only be allowed to use a subset of them. By default libcurl will accept all protocols it supports. See also {\b CURLOPT_REDIR_PROTOCOLS} . } } \par
{\i {\i  } } \par
{\i {\i  Valid protocol options are: {\f2 CURLPROTO_HTTP} , {\f2 CURLPROTO_HTTPS} , {\f2 CURLPROTO_FTP} , {\f2 CURLPROTO_FTPS} , {\f2 CURLPROTO_SCP} , {\f2 CURLPROTO_SFTP} , {\f2 CURLPROTO_TELNET} , {\f2 CURLPROTO_LDAP} , {\f2 CURLPROTO_LDAPS} , {\f2 CURLPROTO_DICT} , {\f2 CURLPROTO_FILE} , {\f2 CURLPROTO_TFTP} , {\f2 CURLPROTO_ALL}  } } \par
{\i {\i   } } \par
{\i {\i  Added in cURL 7.19.4.  } } \par
{\i {\i } } \par
{\i {\i  } } \par
{\i {\i {\b CURLOPT_PROXYAUTH}  } } \par
{\i {\i  The HTTP authentication method(s) to use for the proxy connection. Use the same bitmasks as described in {\b CURLOPT_HTTPAUTH} . For proxy authentication, only {\f2 CURLAUTH_BASIC}  and {\f2 CURLAUTH_NTLM}  are currently supported.  } } \par
{\i {\i  Added in cURL 7.10.7.  } } \par
{\i {\i } } \par
{\i {\i  } } \par
{\i {\i {\b CURLOPT_PROXYPORT}  } } \par
{\i {\i  The port number of the proxy to connect to. This port number can also be set in {\b CURLOPT_PROXY} .  } } \par
{\i {\i   } } \par
{\i {\i } } \par
{\i {\i  } } \par
{\i {\i {\b CURLOPT_PROXYTYPE}  } } \par
{\i {\i  Either {\b CURLPROXY_HTTP}  (default), {\b CURLPROXY_SOCKS4} , {\b CURLPROXY_SOCKS5} , {\b CURLPROXY_SOCKS4A}  or {\b CURLPROXY_SOCKS5_HOSTNAME} .  } } \par
{\i {\i  Added in cURL 7.10.  } } \par
{\i {\i } } \par
{\i {\i  } } \par
{\i {\i {\b CURLOPT_REDIR_PROTOCOLS}  } } \par
{\i {\i  Bitmask of {\b CURLPROTO_*}  values. If used, this bitmask limits what protocols libcurl may use in a transfer that it follows to in a redirect when {\b CURLOPT_FOLLOWLOCATION}  is enabled. This allows you to limit specific transfers to only be allowed to use a subset of protocols in redirections. By default libcurl will allow all protocols except for FILE and SCP. This is a difference compared to pre-7.19.4 versions which unconditionally would follow to all protocols supported. See also {\b CURLOPT_PROTOCOLS}  for protocol constant values.  } } \par
{\i {\i  Added in cURL 7.19.4.  } } \par
{\i {\i } } \par
{\i {\i  } } \par
{\i {\i {\b CURLOPT_RESUME_FROM}  } } \par
{\i {\i  The offset, in bytes, to resume a transfer from.  } } \par
{\i {\i   } } \par
{\i {\i } } \par
{\i {\i  } } \par
{\i {\i {\b CURLOPT_SSL_VERIFYHOST}  } } \par
{\i {\i  1 to check the existence of a common name in the SSL peer certificate. 2 to check the existence of a common name and also verify that it matches the hostname provided. In production environments the value of this option should be kept at 2 (default value).  } } \par
{\i {\i  Support for value 1 removed in cURL 7.28.1  } } \par
{\i {\i } } \par
{\i {\i  } } \par
{\i {\i {\b CURLOPT_SSLVERSION}  } } \par
{\i {\i  One of {\b CURL_SSLVERSION_DEFAULT}  (0), {\b CURL_SSLVERSION_TLSv1}  (1), {\b CURL_SSLVERSION_SSLv2}  (2), {\b CURL_SSLVERSION_SSLv3}  (3), {\b CURL_SSLVERSION_TLSv1_0}  (4), {\b CURL_SSLVERSION_TLSv1_1}  (5) or {\b CURL_SSLVERSION_TLSv1_2}  (6). \par
{\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid \par
{\b Note} : \par
Your best bet is to not set this and let it use the default. Setting it to 2 or 3 is very dangerous given the known vulnerabilities in SSLv2 and SSLv3. \par
}} } \par
{\i {\i   } } \par
{\i {\i } } \par
{\i {\i  } } \par
{\i {\i {\b CURLOPT_TIMECONDITION}  } } \par
{\i {\i  How {\b CURLOPT_TIMEVALUE}  is treated. Use {\b CURL_TIMECOND_IFMODSINCE}  to return the page only if it has been modified since the time specified in {\b CURLOPT_TIMEVALUE} . If it hasn't been modified, a {\i "304 Not Modified"}  header will be returned assuming {\b CURLOPT_HEADER is {\b {\f2 TRUE. Use {\f2 CURL_TIMECOND_IFUNMODSINCE}  for the reverse effect. {\f2 CURL_TIMECOND_IFMODSINCE}  is the default.  } } } } } \par
{\i {\i {\b {\b {\f2   } } } } } \par
{\i {\i {\b {\b {\f2 } } } } } \par
{\i {\i {\b {\b {\f2  } } } } } \par
{\i {\i {\b {\b {\f2 {\b CURLOPT_TIMEOUT}  } } } } } \par
{\i {\i {\b {\b {\f2  The maximum number of seconds to allow cURL functions to execute.  } } } } } \par
{\i {\i {\b {\b {\f2   } } } } } \par
{\i {\i {\b {\b {\f2 } } } } } \par
{\i {\i {\b {\b {\f2  } } } } } \par
{\i {\i {\b {\b {\f2 {\b CURLOPT_TIMEOUT_MS}  } } } } } \par
{\i {\i {\b {\b {\f2  The maximum number of milliseconds to allow cURL functions to execute.} } } } } \par
{\i {\i {\b {\b {\f2 If libcurl is built to use the standard system name resolver, that portion of the connect will still use full-second resolution for timeouts with a minimum timeout allowed of one second.  } } } } } \par
{\i {\i {\b {\b {\f2  Added in cURL 7.16.2. Available since PHP 5.2.3.  } } } } } \par
{\i {\i {\b {\b {\f2 } } } } } \par
{\i {\i {\b {\b {\f2  } } } } } \par
{\i {\i {\b {\b {\f2 {\b CURLOPT_TIMEVALUE}  } } } } } \par
{\i {\i {\b {\b {\f2  The time in seconds since January 1st, 1970. The time will be used by {\b CURLOPT_TIMECONDITION} . By default, {\f2 CURL_TIMECOND_IFMODSINCE}  is used.  } } } } } \par
{\i {\i {\b {\b {\f2   } } } } } \par
{\i {\i {\b {\b {\f2 } } } } } \par
{\i {\i {\b {\b {\f2  } } } } } \par
{\i {\i {\b {\b {\f2 {\b CURLOPT_MAX_RECV_SPEED_LARGE}  } } } } } \par
{\i {\i {\b {\b {\f2  If a download exceeds this speed (counted in bytes per second) on cumulative average during the transfer, the transfer will pause to keep the average rate less than or equal to the parameter value. Defaults to unlimited speed.  } } } } } \par
{\i {\i {\b {\b {\f2  Added in cURL 7.15.5. Available since PHP 5.4.0.  } } } } } \par
{\i {\i {\b {\b {\f2 } } } } } \par
{\i {\i {\b {\b {\f2  } } } } } \par
{\i {\i {\b {\b {\f2 {\b CURLOPT_MAX_SEND_SPEED_LARGE}  } } } } } \par
{\i {\i {\b {\b {\f2  If an upload exceeds this speed (counted in bytes per second) on cumulative average during the transfer, the transfer will pause to keep the average rate less than or equal to the parameter value. Defaults to unlimited speed.  } } } } } \par
{\i {\i {\b {\b {\f2  Added in cURL 7.15.5. Available since PHP 5.4.0.  } } } } } \par
{\i {\i {\b {\b {\f2 } } } } } \par
{\i {\i {\b {\b {\f2  } } } } } \par
{\i {\i {\b {\b {\f2 {\b CURLOPT_SSH_AUTH_TYPES}  } } } } } \par
{\i {\i {\b {\b {\f2  {\b A} bitmask consisting of one or more of {\b CURLSSH_AUTH_PUBLICKEY} , {\b CURLSSH_AUTH_PASSWORD} , {\b CURLSSH_AUTH_HOST} , {\b CURLSSH_AUTH_KEYBOARD} . Set to {\b CURLSSH_AUTH_ANY}  to let libcurl pick one.  } } } } } \par
{\i {\i {\b {\b {\f2  Added in cURL 7.16.1.  } } } } } \par
{\i {\i {\b {\b {\f2 } } } } } \par
{\i {\i {\b {\b {\f2  } } } } } \par
{\i {\i {\b {\b {\f2 {\b CURLOPT_IPRESOLVE}  } } } } } \par
{\i {\i {\b {\b {\f2  Allows an application to select what kind of IP addresses to use when resolving host names. This is only interesting when using host names that resolve addresses using more than one version of IP, possible values are {\b CURL_IPRESOLVE_WHATEVER} , {\b CURL_IPRESOLVE_V4} , {\b CURL_IPRESOLVE_V6} , by default {\b CURL_IPRESOLVE_WHATEVER} .  } } } } } \par
{\i {\i {\b {\b {\f2  Added in cURL 7.10.8.  } } } } } \par
{\i {\i {\b {\b {\f2 </tbody>} } } } } \par
{\i {\i {\b {\b {\f2 } } } } } \par
{\i {\i {\b {\b {\f2 } } } } } \par
{\i {\i {\b {\b {\f2 value should be a string for the following values of the option parameter: \par
\pard\plain
\par
} } } } } \par
{\i {\i {\b {\b {\f2  } } } } } \par
{\i {\i {\b {\b {\f2 Option } } } } } \par
{\i {\i {\b {\b {\f2 Set {\f2 value}  to } } } } } \par
{\i {\i {\b {\b {\f2 Notes } } } } } \par
{\i {\i {\b {\b {\f2 </thead>} } } } } \par
{\i {\i {\b {\b {\f2 <tbody class="tbody"> } } } } } \par
{\i {\i {\b {\b {\f2  } } } } } \par
{\i {\i {\b {\b {\f2 {\b CURLOPT_CAINFO}  } } } } } \par
{\i {\i {\b {\b {\f2  The name of a file holding one or more certificates to verify the peer with. This only makes sense when used in combination with {\b CURLOPT_SSL_VERIFYPEER} .  } } } } } \par
{\i {\i {\b {\b {\f2  Might require an absolute path.  } } } } } \par
{\i {\i {\b {\b {\f2 } } } } } \par
{\i {\i {\b {\b {\f2  } } } } } \par
{\i {\i {\b {\b {\f2 {\b CURLOPT_CAPATH}  } } } } } \par
{\i {\i {\b {\b {\f2  {\b A} directory that holds multiple CA certificates. Use this option alongside {\b CURLOPT_SSL_VERIFYPEER} .  } } } } } \par
{\i {\i {\b {\b {\f2   } } } } } \par
{\i {\i {\b {\b {\f2 } } } } } \par
{\i {\i {\b {\b {\f2  } } } } } \par
{\i {\i {\b {\b {\f2 {\b CURLOPT_COOKIE}  } } } } } \par
{\i {\i {\b {\b {\f2  The contents of the {\i "Cookie: "}  header to be used in the HTTP request. Note that multiple cookies are separated with a semicolon followed by a space (e.g., "<em>fruit=apple; colour=red</em>")  } } } } } \par
{\i {\i {\b {\b {\f2   } } } } } \par
{\i {\i {\b {\b {\f2 } } } } } \par
{\i {\i {\b {\b {\f2  } } } } } \par
{\i {\i {\b {\b {\f2 {\b CURLOPT_COOKIEFILE}  } } } } } \par
{\i {\i {\b {\b {\f2  The name of the file containing the cookie data. The cookie file can be in Netscape format, or just plain HTTP-style headers dumped into a file. If the name is an empty string, no cookies are loaded, but cookie handling is still enabled.  } } } } } \par
{\i {\i {\b {\b {\f2   } } } } } \par
{\i {\i {\b {\b {\f2 } } } } } \par
{\i {\i {\b {\b {\f2  } } } } } \par
{\i {\i {\b {\b {\f2 {\b CURLOPT_COOKIEJAR}  } } } } } \par
{\i {\i {\b {\b {\f2  The name of a file to save all internal cookies to when the handle is closed, e.g. after a call to curl_close.  } } } } } \par
{\i {\i {\b {\b {\f2   } } } } } \par
{\i {\i {\b {\b {\f2 } } } } } \par
{\i {\i {\b {\b {\f2  } } } } } \par
{\i {\i {\b {\b {\f2 {\b CURLOPT_CUSTOMREQUEST}  } } } } } \par
{\i {\i {\b {\b {\f2 } } } } } \par
{\i {\i {\b {\b {\f2  {\b A} custom request method to use instead of {\i "GET"}  or {\i "HEAD"}  when doing a HTTP request. This is useful for doing {\i "DELETE"}  or other, more obscure HTTP requests. Valid values are things like {\i "GET"} , {\i "POST"} , {\i "CONNECT"}  and so on; i.e. Do not enter a whole HTTP request line here. For instance, entering {\i "GET /index.html HTTP/1.0\\r\\n\\r\\n"}  would be incorrect. } } } } } \par
{\i {\i {\b {\b {\f2 \par
{\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid \par
{\b Note} : \par
Don't do this without making sure the server supports the custom request method first. \par
}} } } } } \par
{\i {\i {\b {\b {\f2   } } } } } \par
{\i {\i {\b {\b {\f2 } } } } } \par
{\i {\i {\b {\b {\f2  } } } } } \par
{\i {\i {\b {\b {\f2 {\b CURLOPT_EGDSOCKET}  } } } } } \par
{\i {\i {\b {\b {\f2  Like {\b CURLOPT_RANDOM_FILE} , except a filename to an Entropy Gathering Daemon socket.  } } } } } \par
{\i {\i {\b {\b {\f2   } } } } } \par
{\i {\i {\b {\b {\f2 } } } } } \par
{\i {\i {\b {\b {\f2  } } } } } \par
{\i {\i {\b {\b {\f2 {\b CURLOPT_ENCODING}  } } } } } \par
{\i {\i {\b {\b {\f2  The contents of the {\i "Accept-Encoding: "}  header. This enables decoding of the response. Supported encodings are {\i "identity"} , {\i "deflate"} , and {\i "gzip"} . If an empty string, {\i ""} , is set, a header containing all supported encoding types is sent.  } } } } } \par
{\i {\i {\b {\b {\f2  Added in cURL 7.10.  } } } } } \par
{\i {\i {\b {\b {\f2 } } } } } \par
{\i {\i {\b {\b {\f2  } } } } } \par
{\i {\i {\b {\b {\f2 {\b CURLOPT_FTPPORT}  } } } } } \par
{\i {\i {\b {\b {\f2  The value which will be used to get the IP address to use for the FTP "PORT" instruction. The "PORT" instruction tells the remote server to connect to our specified IP address. The string may be a plain IP address, a hostname, a network interface name (under Unix), or just a plain '-' to use the systems default IP address.  } } } } } \par
{\i {\i {\b {\b {\f2   } } } } } \par
{\i {\i {\b {\b {\f2 } } } } } \par
{\i {\i {\b {\b {\f2  } } } } } \par
{\i {\i {\b {\b {\f2 {\b CURLOPT_INTERFACE}  } } } } } \par
{\i {\i {\b {\b {\f2  The name of the outgoing network interface to use. This can be an interface name, an IP address or a host name.  } } } } } \par
{\i {\i {\b {\b {\f2   } } } } } \par
{\i {\i {\b {\b {\f2 } } } } } \par
{\i {\i {\b {\b {\f2  } } } } } \par
{\i {\i {\b {\b {\f2 {\b CURLOPT_KEYPASSWD}  } } } } } \par
{\i {\i {\b {\b {\f2  The password required to use the {\b CURLOPT_SSLKEY}  or {\b CURLOPT_SSH_PRIVATE_KEYFILE}  private key.  } } } } } \par
{\i {\i {\b {\b {\f2  Added in cURL 7.16.1.  } } } } } \par
{\i {\i {\b {\b {\f2 } } } } } \par
{\i {\i {\b {\b {\f2  } } } } } \par
{\i {\i {\b {\b {\f2 {\b CURLOPT_KRB4LEVEL}  } } } } } \par
{\i {\i {\b {\b {\f2  The KRB4 (Kerberos 4) security level. Any of the following values (in order from least to most powerful) are valid: {\i "clear"} , {\i "safe"} , {\i "confidential"} , {\i "private".} . If the string does not match one of these, {\i "private"}  is used. Setting this option to {\b NULL}  will disable KRB4 security. Currently KRB4 security only works with FTP transactions.  } } } } } \par
{\i {\i {\b {\b {\f2   } } } } } \par
{\i {\i {\b {\b {\f2 } } } } } \par
{\i {\i {\b {\b {\f2  } } } } } \par
{\i {\i {\b {\b {\f2 {\b CURLOPT_POSTFIELDS}  } } } } } \par
{\i {\i {\b {\b {\f2   The full data to post in a HTTP "POST" operation. To post a file, prepend a filename with {\i </em> and use the full path. The filetype can be explicitly specified by following the filename with the type in the format '{\i ;type=mimetype} '. This parameter can either be passed as a urlencoded string like '{\i para1=val1&para2=val2&...} ' or as an array with the field name as key and field data as value. If {\f2 value}  is an array, the {\i Content-Type}  header will be set to {\i multipart/form-data} .   As of PHP 5.2.0, {\f2 value}  must be an array if files are passed to this option with the {\i </em> prefix.   As of PHP 5.5.0, the {\i </em> prefix is deprecated and files can be sent using {\f2 CURLFile}. The {\i </em> prefix can be disabled for safe passing of values beginning with {\i </em> by setting the {\b CURLOPT_SAFE_UPLOAD option to {\b {\f2 TRUE.   } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2   } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\b CURLOPT_PROXY}  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  The HTTP proxy to tunnel requests through.  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2   } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\b CURLOPT_PROXYUSERPWD}  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  {\b A} username and password formatted as {\i "[username]:[password]"}  to use for the connection to the proxy.  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2   } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\b CURLOPT_RANDOM_FILE}  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  {\b A} filename to be used to seed the random number generator for SSL.  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2   } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\b CURLOPT_RANGE}  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  Range(s) of data to retrieve in the format {\i "X-Y"}  where X or Y are optional. HTTP transfers also support several intervals, separated with commas in the format {\i "X-Y,N-M"} .  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2   } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\b CURLOPT_REFERER}  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  The contents of the {\i "Referer: "}  header to be used in a HTTP request.  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2   } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\b CURLOPT_SSH_HOST_PUBLIC_KEY_MD5}  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  {\b A} string containing 32 hexadecimal digits. The string should be the MD5 checksum of the remote host's public key, and libcurl will reject the connection to the host unless the md5sums match. This option is only for SCP and SFTP transfers.  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  Added in cURL 7.17.1.  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\b CURLOPT_SSH_PUBLIC_KEYFILE}  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  The file name for your public key. If not used, libcurl defaults to $HOME/.ssh/id_dsa.pub if the HOME environment variable is set, and just "id_dsa.pub" in the current directory if HOME is not set.  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  Added in cURL 7.16.1.  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\b CURLOPT_SSH_PRIVATE_KEYFILE}  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  The file name for your private key. If not used, libcurl defaults to $HOME/.ssh/id_dsa if the HOME environment variable is set, and just "id_dsa" in the current directory if HOME is not set. If the file is password-protected, set the password with {\b CURLOPT_KEYPASSWD} .  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  Added in cURL 7.16.1.  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\b CURLOPT_SSL_CIPHER_LIST}  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  {\b A} list of ciphers to use for SSL. For example, {\i RC4-SHA}  and {\i TLSv1}  are valid cipher lists.  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2   } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\b CURLOPT_SSLCERT}  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  The name of a file containing a PEM formatted certificate.  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2   } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\b CURLOPT_SSLCERTPASSWD}  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  The password required to use the {\b CURLOPT_SSLCERT}  certificate.  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2   } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\b CURLOPT_SSLCERTTYPE}  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  The format of the certificate. Supported formats are {\i "PEM"}  (default), {\i "DER"} , and {\i "ENG"} .  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  Added in cURL 7.9.3.  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\b CURLOPT_SSLENGINE}  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  The identifier for the crypto engine of the private SSL key specified in {\b CURLOPT_SSLKEY} .  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2   } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\b CURLOPT_SSLENGINE_DEFAULT}  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  The identifier for the crypto engine used for asymmetric crypto operations.  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2   } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\b CURLOPT_SSLKEY}  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  The name of a file containing a private SSL key.  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2   } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\b CURLOPT_SSLKEYPASSWD}  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  The secret password needed to use the private SSL key specified in {\b CURLOPT_SSLKEY} . } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 \par
{\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid \par
{\b Note} : \par
Since this option contains a sensitive password, remember to keep the PHP script it is contained within safe. \par
}} } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2   } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\b CURLOPT_SSLKEYTYPE}  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  The key type of the private SSL key specified in {\b CURLOPT_SSLKEY} . Supported key types are {\i "PEM"}  (default), {\i "DER"} , and {\i "ENG"} .  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2   } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\b CURLOPT_URL}  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  The URL to fetch. This can also be set when initializing a session with \{\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
See also\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
{\b curl_init()}\}.  \par
}}} } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2   } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\b CURLOPT_USERAGENT}  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  The contents of the {\i "User-Agent: "}  header to be used in a HTTP request.  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2   } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\b CURLOPT_USERPWD}  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  {\b A} username and password formatted as {\i "[username]:[password]"}  to use for the connection.  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2   } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 </tbody>} } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  \par
\pard\plain
\par
} } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 Option } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 Set {\f2 value}  to } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 Notes } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 </thead>} } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 <tbody class="tbody"> } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\b CURLOPT_CAINFO}  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  The name of a file holding one or more certificates to verify the peer with. This only makes sense when used in combination with {\b CURLOPT_SSL_VERIFYPEER} .  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  Might require an absolute path.  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\b CURLOPT_CAPATH}  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  {\b A} directory that holds multiple CA certificates. Use this option alongside {\b CURLOPT_SSL_VERIFYPEER} .  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2   } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\b CURLOPT_COOKIE}  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  The contents of the {\i "Cookie: "}  header to be used in the HTTP request. Note that multiple cookies are separated with a semicolon followed by a space (e.g., "<em>fruit=apple; colour=red</em>")  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2   } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\b CURLOPT_COOKIEFILE}  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  The name of the file containing the cookie data. The cookie file can be in Netscape format, or just plain HTTP-style headers dumped into a file. If the name is an empty string, no cookies are loaded, but cookie handling is still enabled.  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2   } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\b CURLOPT_COOKIEJAR}  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  The name of a file to save all internal cookies to when the handle is closed, e.g. after a call to curl_close.  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2   } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\b CURLOPT_CUSTOMREQUEST}  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  {\b A} custom request method to use instead of {\i "GET"}  or {\i "HEAD"}  when doing a HTTP request. This is useful for doing {\i "DELETE"}  or other, more obscure HTTP requests. Valid values are things like {\i "GET"} , {\i "POST"} , {\i "CONNECT"}  and so on; i.e. Do not enter a whole HTTP request line here. For instance, entering {\i "GET /index.html HTTP/1.0\\r\\n\\r\\n"}  would be incorrect. } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 \par
{\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid \par
{\b Note} : \par
Don't do this without making sure the server supports the custom request method first. \par
}} } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2   } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\b CURLOPT_EGDSOCKET}  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  Like {\b CURLOPT_RANDOM_FILE} , except a filename to an Entropy Gathering Daemon socket.  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2   } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\b CURLOPT_ENCODING}  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  The contents of the {\i "Accept-Encoding: "}  header. This enables decoding of the response. Supported encodings are {\i "identity"} , {\i "deflate"} , and {\i "gzip"} . If an empty string, {\i ""} , is set, a header containing all supported encoding types is sent.  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  Added in cURL 7.10.  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\b CURLOPT_FTPPORT}  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  The value which will be used to get the IP address to use for the FTP "PORT" instruction. The "PORT" instruction tells the remote server to connect to our specified IP address. The string may be a plain IP address, a hostname, a network interface name (under Unix), or just a plain '-' to use the systems default IP address.  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2   } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\b CURLOPT_INTERFACE}  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  The name of the outgoing network interface to use. This can be an interface name, an IP address or a host name.  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2   } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\b CURLOPT_KEYPASSWD}  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  The password required to use the {\b CURLOPT_SSLKEY}  or {\b CURLOPT_SSH_PRIVATE_KEYFILE}  private key.  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  Added in cURL 7.16.1.  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\b CURLOPT_KRB4LEVEL}  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  The KRB4 (Kerberos 4) security level. Any of the following values (in order from least to most powerful) are valid: {\i "clear"} , {\i "safe"} , {\i "confidential"} , {\i "private".} . If the string does not match one of these, {\i "private"}  is used. Setting this option to {\b NULL}  will disable KRB4 security. Currently KRB4 security only works with FTP transactions.  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2   } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\b CURLOPT_POSTFIELDS}  } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2   The full data to post in a HTTP "POST" operation. To post a file, prepend a filename with {\i </em> and use the full path. The filetype can be explicitly specified by following the filename with the type in the format '{\i ;type=mimetype} '. This parameter can either be passed as a urlencoded string like '{\i para1=val1&para2=val2&...} ' or as an array with the field name as key and field data as value. If {\f2 value}  is an array, the {\i Content-Type}  header will be set to {\i multipart/form-data} .   As of PHP 5.2.0, {\f2 value}  must be an array if files are passed to this option with the {\i </em> prefix.   As of PHP 5.5.0, the {\i </em> prefix is deprecated and files can be sent using {\f2 CURLFile}. The {\i </em> prefix can be disabled for safe passing of values beginning with {\i </em> by setting the {\b CURLOPT_SAFE_UPLOAD option to {\b {\f2 TRUE.   } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2   } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\b CURLOPT_PROXY}  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  The HTTP proxy to tunnel requests through.  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2   } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\b CURLOPT_PROXYUSERPWD}  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  {\b A} username and password formatted as {\i "[username]:[password]"}  to use for the connection to the proxy.  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2   } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\b CURLOPT_RANDOM_FILE}  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  {\b A} filename to be used to seed the random number generator for SSL.  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2   } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\b CURLOPT_RANGE}  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  Range(s) of data to retrieve in the format {\i "X-Y"}  where X or Y are optional. HTTP transfers also support several intervals, separated with commas in the format {\i "X-Y,N-M"} .  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2   } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\b CURLOPT_REFERER}  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  The contents of the {\i "Referer: "}  header to be used in a HTTP request.  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2   } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\b CURLOPT_SSH_HOST_PUBLIC_KEY_MD5}  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  {\b A} string containing 32 hexadecimal digits. The string should be the MD5 checksum of the remote host's public key, and libcurl will reject the connection to the host unless the md5sums match. This option is only for SCP and SFTP transfers.  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  Added in cURL 7.17.1.  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\b CURLOPT_SSH_PUBLIC_KEYFILE}  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  The file name for your public key. If not used, libcurl defaults to $HOME/.ssh/id_dsa.pub if the HOME environment variable is set, and just "id_dsa.pub" in the current directory if HOME is not set.  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  Added in cURL 7.16.1.  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\b CURLOPT_SSH_PRIVATE_KEYFILE}  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  The file name for your private key. If not used, libcurl defaults to $HOME/.ssh/id_dsa if the HOME environment variable is set, and just "id_dsa" in the current directory if HOME is not set. If the file is password-protected, set the password with {\b CURLOPT_KEYPASSWD} .  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  Added in cURL 7.16.1.  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\b CURLOPT_SSL_CIPHER_LIST}  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  {\b A} list of ciphers to use for SSL. For example, {\i RC4-SHA}  and {\i TLSv1}  are valid cipher lists.  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2   } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\b CURLOPT_SSLCERT}  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  The name of a file containing a PEM formatted certificate.  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2   } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\b CURLOPT_SSLCERTPASSWD}  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  The password required to use the {\b CURLOPT_SSLCERT}  certificate.  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2   } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\b CURLOPT_SSLCERTTYPE}  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  The format of the certificate. Supported formats are {\i "PEM"}  (default), {\i "DER"} , and {\i "ENG"} .  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  Added in cURL 7.9.3.  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\b CURLOPT_SSLENGINE}  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  The identifier for the crypto engine of the private SSL key specified in {\b CURLOPT_SSLKEY} .  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2   } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\b CURLOPT_SSLENGINE_DEFAULT}  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  The identifier for the crypto engine used for asymmetric crypto operations.  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2   } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\b CURLOPT_SSLKEY}  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  The name of a file containing a private SSL key.  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2   } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\b CURLOPT_SSLKEYPASSWD}  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  The secret password needed to use the private SSL key specified in {\b CURLOPT_SSLKEY} . } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 \par
{\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid \par
{\b Note} : \par
Since this option contains a sensitive password, remember to keep the PHP script it is contained within safe. \par
}} } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2   } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\b CURLOPT_SSLKEYTYPE}  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  The key type of the private SSL key specified in {\b CURLOPT_SSLKEY} . Supported key types are {\i "PEM"}  (default), {\i "DER"} , and {\i "ENG"} .  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2   } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\b CURLOPT_URL}  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  The URL to fetch. This can also be set when initializing a session with {\f2 curl_init()}.  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2   } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\b CURLOPT_USERAGENT}  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  The contents of the {\i "User-Agent: "}  header to be used in a HTTP request.  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2   } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\b CURLOPT_USERPWD}  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  {\b A} username and password formatted as {\i "[username]:[password]"}  to use for the connection.  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2   } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 </tbody>} } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  value should be an array for the following values of the option parameter: \par
\pard\plain
\par
} } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 Option } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 Set {\f2 value}  to } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 Notes } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 </thead>} } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 <tbody class="tbody"> } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\b CURLOPT_HTTP200ALIASES}  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  An array of HTTP 200 responses that will be treated as valid responses and not as errors.  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  Added in cURL 7.10.3.  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\b CURLOPT_HTTPHEADER}  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  An array of HTTP header fields to set, in the format {\f2  array('Content-type: text/plain', 'Content-length: 100') }   } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2   } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\b CURLOPT_POSTQUOTE}  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  An array of FTP commands to execute on the server after the FTP request has been performed.  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2   } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\b CURLOPT_QUOTE}  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  An array of FTP commands to execute on the server prior to the FTP request.  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2   } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 </tbody>} } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  value should be a stream resource (using \{\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
See also\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
{\b fopen()}\}, for example) for the following values of the option parameter: \par
\pard\plain
\par
}}} } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 Option } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 Set {\f2 value}  to } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 </thead>} } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 <tbody class="tbody"> } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\b CURLOPT_FILE}  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  The file that the transfer should be written to. The default is {\i STDOUT}  (the browser window).  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\b CURLOPT_INFILE}  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  The file that the transfer should be read from when uploading.  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\b CURLOPT_STDERR}  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  An alternative location to output errors to instead of {\i STDERR} .  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\b CURLOPT_WRITEHEADER}  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  The file that the header part of the transfer is written to.  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 </tbody>} } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  value should be the name of a valid function or a {\b Closure} for the following values of the option parameter: \par
\pard\plain
\par
} } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 Option } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 Set {\f2 value}  to } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 </thead>} } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 <tbody class="tbody"> } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\b CURLOPT_HEADERFUNCTION}  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  {\b A} callback accepting two parameters. The first is the cURL resource, the second is a string with the header data to be written. The header data must be written by this callback. Return the number of bytes written.  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\b CURLOPT_PASSWDFUNCTION}  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  {\b A} callback accepting three parameters. The first is the cURL resource, the second is a string containing a password prompt, and the third is the maximum password length. Return the string containing the password.  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\b CURLOPT_PROGRESSFUNCTION}  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  {\b A} callback accepting five parameters. The first is the cURL resource, the second is the total number of bytes expected to be downloaded in this transfer, the third is the number of bytes downloaded so far, the fourth is the total number of bytes expected to be uploaded in this transfer, and the fifth is the number of bytes uploaded so far. } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  \par
{\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid \par
{\b Note} : \par
The callback is only called when the {\b CURLOPT_NOPROGRESS}  option is set to {\b FALSE} . \par
}} } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  Return a non-zero value to abort the transfer. In which case, the transfer will set a {\b CURLE_ABORTED_BY_CALLBACK}  error. } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2   } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\b CURLOPT_READFUNCTION}  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  {\b A} callback accepting three parameters. The first is the cURL resource, the second is a stream resource provided to cURL through the option {\b CURLOPT_INFILE} , and the third is the maximum amount of data to be read. The callback must return a string with a length equal or smaller than the amount of data requested, typically by reading it from the passed stream resource. It should return an empty string to signal {\i EOF} .  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\b CURLOPT_WRITEFUNCTION}  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  {\b A} callback accepting two parameters. The first is the cURL resource, and the second is a string with the data to be written. The data must be saved by this callback. It must return the exact number of bytes written or the transfer will be aborted with an error.  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 </tbody>} } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  {\b Other} values: \par
\pard\plain
\par
} } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 Option } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 Set {\f2 value}  to } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 </thead>} } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 <tbody class="tbody"> } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\b CURLOPT_SHARE}  } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  {\b A} result of \{\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
See also\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
{\b curl_share_init()}\}. Makes the cURL handle to use the data from the shared handle.  \par
}}</tbody>} } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 } } } } } } } } } } } } } } } } } } } } } \par
{\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2 {\i {\i {\i {\i {\i {\b {\b {\f2  \par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
bool true on success or false on failure. \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Since\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
4.0.2 \par
5.0 \par
}}} } } } } } } } } } } } } } } } } } } } } \par
}}
{\xe \v curl_setopt_array\:curl.php}
{\xe \v curl.php\:curl_setopt_array}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
curl_setopt_array (  {\i $ch}, array  {\i $options})}}
\par
{\bkmkstart AAAAAAABYY}
{\bkmkend AAAAAAABYY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Set multiple options for a cURL transfer {\b resource $ch  array $options } An array specifying which options to set and their values. The keys should be valid curl_setopt constants or their integer equivalents. \par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
bool true if all options were successfully set. If an option could not be successfully set, false is immediately returned, ignoring any future options in the options array. \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Since\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
5.1.3 \par
}}}}
{\xe \v curl_share_close\:curl.php}
{\xe \v curl.php\:curl_share_close}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
curl_share_close (  {\i $sh})}}
\par
{\bkmkstart AAAAAAABYZ}
{\bkmkend AAAAAAABYZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
(PHP 5 >=5.5.0)\par
 Close a cURL share handle {\b resource $sh } {\b A} cURL share handle returned by {\b curl_share_init()} \par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
void \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Since\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
5.5 \par
}}}}
{\xe \v curl_share_errno\:curl.php}
{\xe \v curl.php\:curl_share_errno}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
curl_share_errno (  {\i $rh})}}
\par
{\bkmkstart AAAAAAABZA}
{\bkmkend AAAAAAABZA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{resource\cell }{{\i $rh} \cell }{\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Since\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
7.1 \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
int \par
}}}}
{\xe \v curl_share_init\:curl.php}
{\xe \v curl.php\:curl_share_init}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
curl_share_init ()}}
\par
{\bkmkstart AAAAAAABZB}
{\bkmkend AAAAAAABZB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
(PHP 5 >=5.5.0)\par
 Initialize a cURL share handle {\b resource Returns resource of type "cURL Share Handle".  5.5 }\par
}}
{\xe \v curl_share_setopt\:curl.php}
{\xe \v curl.php\:curl_share_setopt}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
curl_share_setopt (  {\i $sh},   {\i $option},   {\i $value})}}
\par
{\bkmkstart AAAAAAABZC}
{\bkmkend AAAAAAABZC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
(PHP 5 >=5.5.0)\par
 Set an option for a cURL share handle. {\b resource $sh } {\b A} cURL share handle returned by {\b curl_share_init()}. \par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{int\cell }{{\i $option} \cell }{\pard\plain
\par
\cell }
{\row }
}
Option \par
Description \par
</thead>\par
<tbody> \par
{\b CURLSHOPT_SHARE}  \par
Specifies a type of data that should be shared.  \par
{\b CURLSHOPT_UNSHARE}  \par
Specifies a type of data that will be no longer shared.  \par
</tbody>\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{string\cell }{{\i $value} \cell }{\cell }
{\row }
}
\pard\plain
\par
Value \par
Description \par
</thead>\par
<tbody class="tbody"> \par
{\b CURL_LOCK_DATA_COOKIE}  \par
Shares cookie data.  \par
{\b CURL_LOCK_DATA_DNS}  \par
Shares DNS cache. Note that when you use cURL multi handles, all handles added to the same multi handle will share DNS cache by default.  \par
{\b CURL_LOCK_DATA_SSL_SESSION}  \par
Shares SSL session IDs, reducing the time spent on the SSL handshake when reconnecting to the same server. Note that SSL session IDs are reused withing the same handle by default.  \par
</tbody>\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
bool Returns {\b TRUE}  on success or {\b FALSE}  on failure. \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Since\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
5.5 \par
}}}}
{\xe \v curl_share_strerror\:curl.php}
{\xe \v curl.php\:curl_share_strerror}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
curl_share_strerror (  {\i $errno})}}
\par
{\bkmkstart AAAAAAABZD}
{\bkmkend AAAAAAABZD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{int\cell }{{\i $errno} \cell }{\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Since\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
7.1 \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
string \par
}}}}
{\xe \v curl_strerror\:curl.php}
{\xe \v curl.php\:curl_strerror}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
curl_strerror (  {\i $errornum})}}
\par
{\bkmkstart AAAAAAABZE}
{\bkmkend AAAAAAABZE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
(PHP 5 >=5.5.0)\par
 Return string describing the given error code {\b int $errornum } One of the {\b \~cURL error codes} constants. \par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
string|null Returns error description or {\b NULL}  for invalid error code. \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Since\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
5.5 \par
}}}}
{\xe \v curl_unescape\:curl.php}
{\xe \v curl.php\:curl_unescape}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
curl_unescape (  {\i $ch},   {\i $str})}}
\par
{\bkmkstart AAAAAAABZF}
{\bkmkend AAAAAAABZF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
(PHP 5 >=5.5.0)\par
 Decodes the given URL encoded string {\b resource $ch }{\b A} cURL handle returned by {\b curl_init()}.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{string\cell }{{\i $str} \cell }{\cell }
{\row }
}
The URL encoded string to be decoded. \par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
string|false Returns decoded string or FALSE on failure. \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Since\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
5.5 \par
}}}}
{\xe \v curl_version\:curl.php}
{\xe \v curl.php\:curl_version}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
curl_version (  {\i $age} = {\f2 {\b null}})}}
\par
{\bkmkstart AAAAAAABZG}
{\bkmkend AAAAAAABZG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Gets cURL version information {\b int $age [optional] } \par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
array an associative array with the following elements: \par
}}Indice \par
Value description  \par
version_number \par
cURL 24 bit version number  \par
version \par
cURL version number, as a string  \par
ssl_version_number \par
OpenSSL 24 bit version number  \par
ssl_version \par
OpenSSL version number, as a string  \par
libz_version \par
zlib version number, as a string  \par
host \par
Information about the host where cURL was built  \par
age \par
features \par
{\b A} bitmask of the CURL_VERSION_XXX constants  \par
protocols \par
An array of protocols names supported by cURL  \par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Since\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
4.0.2 \par
5.0 \par
}}}}
}